{"version":3,"sources":["assets/kit/system/interface/ASystem.ts","assets/kit/framework/platform/AndroidAdapter.ts","assets/kit/framework/load/base/AtlasLoader.ts","assets/kit/framework/load/base/AudioLoader.ts","assets/kit/system/audio/AudioManager.ts","assets/kit/framework/load/base/BaseLoader.ts","assets/kit/component/ClickCmpt.ts","assets/kit/structure/ClientModuleEnum.ts","assets/kit/manager/popupManager.ts/ConfirmPopup.ts","assets/kit/framework/platform/DebuggerAdapter.ts","assets/kit/framework/load/base/DefaultLoader.ts","assets/kit/utils/DelayUtils.ts","assets/kit/system/fsm/entity/EntityManager.ts","assets/kit/system/error/ErrorSystem.ts","assets/kit/system/event/EventEmitter.ts","assets/kit/system/event/EventSystem.ts","assets/kit/system/net/http/HttpState.ts","assets/kit/system/net/http/HttpSystem.ts","assets/kit/system/net/http/Http.ts","assets/kit/framework/load/base/ImageLoader.ts","assets/kit/framework/platform/IosAdapter.ts","assets/kit/framework/load/base/JsonLoader.ts","assets/kit/structure/LinkedNode.ts","assets/kit/framework/load/LoaderObserver.ts","assets/kit/utils/LocalStorageUtils.ts","assets/kit/system/log/LogSystem.ts","assets/kit/model/MessageBase.ts","assets/kit/system/fsm/message/MessageDispatcher.ts","assets/kit/system/fsm/message/MessageType.ts","assets/kit/model/ModelBase.ts","assets/kit/model/ModelManager.ts","assets/kit/utils/MonitorUtils.ts","assets/kit/model/NativeInfo.ts","assets/kit/model/NetHelper.ts","assets/kit/utils/NumberUtils.ts","assets/kit/utils/ParseTemplateUtils.ts","assets/kit/framework/platform/PlatformSystem.ts","assets/kit/utils/PoolUtils.ts","assets/kit/manager/popupManager.ts/PopupBase.ts","assets/kit/manager/popupManager.ts/PopupManager.ts","assets/kit/framework/load/base/PrefabLoader.ts","assets/kit/framework/load/ResLoader.ts","assets/kit/manager/ResourcesManager.ts","assets/kit/framework/load/base/SpineLoader.ts","assets/kit/system/log/SpotSystem.ts","assets/kit/system/fsm/StateMachine.ts","assets/kit/utils/StringUtils.ts","assets/kit/system/fsm/message/Telegram.ts","assets/kit/framework/load/base/TextLoader.ts","assets/kit/utils/TimeUtils.ts","assets/kit/system/timer/TimerSystem.ts","assets/kit/utils/UIUtils.ts","assets/kit/utils/UrlUtils.ts","assets/kit/framework/platform/WebAdapter.ts","assets/kit/utils/audioUtil.ts","assets/kit/utils/bundleUtils.ts","assets/kit/utils/bundleUtil.ts","assets/kit/events/events.ts","assets/kit/kit.ts","assets/kit/framework/load/base/loader-index.ts","assets/scripts/main.ts"],"names":["ASystem","AndroidAdapter","this","packageName","isPrintLog","prototype","onGameExit","onGameReady","callFunction","cc","log","jsb","fileUtils","getWritablePath","toast","message","funcName","parm","moduleName","packagePath","reflection","callStaticMethod","callFunctionResult","result","BaseLoader_1","require","AtlasLoader","_super","__extends","loadNetRes","path","type","callback","assetManager","loadRemote","e","res","error","loadRemoteRes","Error","loadLocalRes","onProgress","bundle","load","resources","default","exports","AudioLoader","audioUtil_1","AudioManager","init","effectSwitch","sys","localStorage","getItem","EFFECT_TAG","musicSwitch","MUSIC_TAG","_effectFlag","_musicFlag","setEffectStatus","setMusicStatus","playEffect","bundleName","name","finishCb","playEffectByName","isSingle","isLoop","_a","sent","stopEffect","stopEffectByName","destroyAudio","playLoopEffect","stopLoopEffect","pauseLoopEffects","resumeLoopEffects","playMusic","_curMusic","_curBundle","stopMusic","passMusic","resumeMusic","flag","setItem","Object","defineProperty","get","BaseLoader","loadRes","options","onComplete","isNetRes","isRemoteRes","startsWith","ResLoader_1","AudioManager_1","LogSystem_1","_decorator","ccclass","property","ClickCmpt","_this","apply","arguments","clickSound","clickAudioEffect","clickEvents","onLoad","length","onCilckEventHandler","forEach","item","targeNode","target","tempCmpt","getComponent","onClick","handler","customEventData","node","param","clickEffect","sound","warn","on","Node","EventType","TOUCH_START","event","soundName","call","offClick","off","preloadClickEffect","AudioClip","__decorate","String","tooltip","Component","EventHandler","VideoEventTransType","PopupBase_1","ConfirmPopup","titleLabel","contentLabel","confirmBtn","registerEvent","onDestroy","unregisterEvent","TOUCH_END","onConfirmBtnClick","targetOff","updateDisplay","string","title","content","confirmCallback","hide","Label","DebuggerAdapter","DefaultLoader","Delay","k","v","key","time","DelayUtils","DelayUtils_1","CheckDelay","delay","delayMap","tick","Date","getTime","current","button","EntityManager","_length","_entityMap","_instance","release","registerEntity","newEntity","sid","getEntityFromID","id","removeEntity","entity","getAllEntity","getAvailableEntity","clazz","availableEntity","createEntity","ErrorSendInterval","RATE_DEFAULT","RATE_LOW","ErrorSystem","errorMap","isNative","outAdapter","Promise","rea","window","__errorHandler","errorMessage","file","line","exception","JSON","stringify","addEventListener","reason","stack","unhandledrejection","onerror","EventEmitter","getListeners","events","_getEvents","response","RegExp","hasOwnProperty","test","addListener","listener","isValidListener","TypeError","listeners","getListenersAsObject","listenerIsWrapped","indexOfListener","push","once","flattenListeners","flatListeners","i","Array","addOnceListener","defineEvent","defineEvents","removeListener","index","splice","addListeners","manipulateListeners","removeListeners","remove","value","single","multiple","removeEvent","_events","removeAllListeners","emitEvent","args","_i","listenersMap","slice","__spreadArrays","onceReturnValue","trigger","emit","_onceReturnValue","set","EventEmitter_1","EventSystem","_emitter","eventData","params","data","HttpStateMap","map","split","element","temp","getErrorInfoById","Http_1","HttpSystem","__awaiter","httpGet","url","header","console","resolve","reject","headerJson","Content-Type","json","parse","xhr","Http","onError","errInfo","openGet","getUrl","setRequestHeader","send","catch","httpPost","body","openPost","HttpState_1","ActiveXObject","timeout","open","method","GET","spliceUrl","POST","_onComplete","_onError","onreadystatechange","onReadyStateChange","bind","abort","getAllResponseHeaders","dataStr","substr","indexOf","readyState","ioError","status","self","instance","DONE","stringifyPrimitive","isFinite","obj","sep","eq","undefined","keys","ks","encodeURIComponent","isArray","join","s","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","ImageLoader","tex","SpriteFrame","IosAdapter","JsonLoader","LinkedNode","previous","LinkedList","head","next","from","array","linkedList","shift","reduce","find","cb","currentNode","insert","newElement","newNode","previousNode","n","rawNextNode","deletedNode","LoaderObserverParam","LocalStorageUtils","removeItem","setObject","getObject","setBool","toString","getBool","setInt","getInt","Number","setString","getString","kit_1","ASystem_1","LogSystem","isDebug","gameName","gameVersion","isPrintTime","print","messages","toLocaleString","obj2String","str","kit","system","info","MessageBase","showTips","Telegram_1","EntityManager_1","MessageDispatcher","SEND_MSG_IMMEDIATELY","NO_ADDITIONAL_INFO","PriorityQ","TreeSet","a","b","showList","Discharge","pReceiver","telegram","stateMachine","HandleMessage","DispatchMessage","sender","receiver","msg","pSender","DispatchTime","now","add","DispatchDelayedMessages","isEmpty","first","Receiver","DispatchSimpleMessage","sort","sortFun","delete","size","Set","MessageType","NetHelper_1","ModelBase","cbMap","Map","sendMessage","regiestReponse","sendMessageWithOutToken","registerCallBack","messageBase","callBack","messageApi","registCb","responseMessage","api","clear","LocalStorageUtils_1","NativeInfo_1","ModelManager","_modelList","ModelManager_1","userToken","generateInfo","_timestamp","currentTimeStamp","registerModel","model","m","getModel","has","removeAllModel","clearAllModel","keyList","keyList_1","reInitAllModel","keyList_2","MonitorUtils","fps","elem","document","createElement","setAttribute","style","fontSize","appendChild","setInterval","performance","innerHTML","getInfo","times","refreshLoop","requestAnimationFrame","showData","memory","jsHeapSizeLimit","toFixed","totalJSHeapSize","usedJSHeapSize","t","timing","responseStart","navigationStart","domainLookupEnd","domainLookupStart","responseEnd","requestStart","connectEnd","connectStart","loadEventEnd","loadEventStart","PlatformSystem_1","NativeInfo","isBrowser","device_uuid","adapter","getNetworkStatus","NetworkType","NETWORK_WIFI","isAndroid","GenerateInfo","events_1","EventSystem_1","HttpSystem_1","NetHelper","currentMessage","formatUrl","timestamp","phoneInfo","Authorization","UserToken","then","code","dispatcher","states","netWork","NETWORK_NO","tipsConfig","cancelCallback","SHOW_COMMON_TIPS_POP","Test_HostUrl","NumberUtils","random","lower","upper","range","Math","floor","randomf","floatSub","arg1","arg2","r1","r2","pow","max","tmp","parseFloat","floatMul","s1","s2","replace","floatDiv","t1","t2","floatTok","floatSqrt","arg3","arg4","len","sqrt","mul","ParseTemplateUtils","parseSrt","srtText","ToSeconds","p","filter","textItem","text","translate","startTime","endTime","timeLine","isShow","AndroidAdapter_1","IosAdapter_1","WebAdapter_1","DebuggerAdapter_1","PlatformSystem","browserType","BROWSER_TYPE_WECHAT","BROWSER_TYPE_SAFARI","platform","WECHAT_GAME","os","OS_ANDROID","OS_IOS","isWeChat","location","href","isIOS","PoolUtils","initPool","className","num","poolArray","classArray","object","getPool","putPool","parent","clearAll","pool","PopupBase","background","main","animDuration","blocker","finishCallback","show","duration","active","opacity","scale","tween","to","start","easing","onShow","suspended","addComponent","BlockInputEvents","setParent","setContentSize","getContentSize","onHide","setFinishCallback","CC_DEV","PopupCacheMode","PopupShowResult","PopupManager","_prefabCache","_nodeCache","_current","_queue","_suspended","targetNode","uuid","parseParams","locked","immediately","suspend","Waiting","getNodeFromCache","isValid","loadStartCallback","prefab","loadFinishCallback","Failed","instantiate","popup","container","Canvas","setSiblingIndex","macro","MAX_ZINDEX","recycle","mode","Done","_res","scheduleOnce","interval","nodeCache","prefabCache","request","priority","Once","destroy","Normal","Frequent","removeFromParent","prefabMap","addRef","decRef","PopupParams","cacheMode","showResult","Base","PrefabLoader","loader_index_1","LoaderObserver_1","RemoteSpineData","ResLoader","_init","_defaultMap","SpriteAtlas","JsonAsset","TextAsset","TextLoader","Prefab","sp","SkeletonData","SpineLoader","_defaultLoader","addObserver","observer","_observerList","removeObserver","obs","curBundle","tempType","getBundle","as","__beforeLoadRes","__afterLoadRes","loader","_err","beforeLoadRes","afterLoadRes","loadDir","dir","loadBundle","nameOrUrl","__beforeLoadBundle","_bundle","__afterLoadBundle","beforeLoadBundle","afterLoadBundle","ResourceType","Asset","resType","assetMap","reslove","asset","releaseComponents","releaseAsset","Global","removeBundle","releaseWithOutBundle","ResourcesManager","assetsMap","resPath","assetType","rej","assetClip","loadBundleList","nameList","list","all","releaseKey","releaseRes","StringUtils_1","SpotSystem","baseInfo","sendHttp","sendSdk","StringUtils","format","LOG_EVENT","api_key","APP_KEY","__assign","event_type","HTTP_HOST","LOG_INIT","LOG_SET_USER_ID","NAME_SPACE_IOS","NAME_SPACE_ANDROID","StateMachine","owner","m_pOwner","m_pCurrentState","m_pPreviousState","m_pGlobalState","exit","AddGlobalState","state","newState","enter","RemoveGlobalState","Update","dt","execute","Transition","onTransition","ChangeState","pNewState","onMessage","RevertPreviousState","isInState","exitCurrentState","CurrentState","sourceStr","replaceStr","fromIndex","replaceCode","tempStr","tempLen","charAt","strLength","charCodeAt","moreText","substring","Telegram","SmallestDelay","Sender","Msg","ExtraInfo","NumberUtils_1","TimeUtils","dateToFormate","date","fmt","o","M+","getMonth","d+","getDate","h+","getHours","m+","getMinutes","s+","getSeconds","q+","S","getMilliseconds","$1","getFullYear","toDate","hour","minute","second","TimerSystem","_pool","_handlers","_currTimer","_currFrame","_count","_index","_startTime","director","getScheduler","enableForTarget","schedule","onEnterFrame","INTERVAL","elapsed","userFrame","exeTime","repeat","thisObj","clearTimer","create","useFrame","cover","pop","TimerHandler","doOnce","doLoop","doFrameOnce","doFrameLoop","running","UIUtils","createSubNodeMap","children","subChild","seekAllSubView","UIContainer","nodesMap","_clickSound","_bundleName","_uiNodesMap","getNode","com","tempNode","manager","Audio","UrlUtils","getQueryString","reg","rs","search","match","getUrlArrayByFileType","jsonObj","urls","traverseJson","parseUrl","r","hash","host","hostname","origin","pathname","port","protocol","username","password","toUpperCase","getUrlPathName","ret","WebAdapter","MusicType","AudioUtil","getFixedPath","cachePath","AssetManager","Bundle","_pauseFlag","curTime","_curSound","tempTime","_lastSoundTime","fixedPath","source","getEffectFromPool","play","__AudioSource","SOUND","addEffectToPool","_soundPool","value_1","stop","_loopSoundPool","LOOP_SOUND","_musicPool","MUSIC","pause","resume","list_1","isPlaying","setPauseFlag","level","_level","clip","_loaded","_audioSource","_path","_musicType","err","_isStop","audioEngine","timer","pauseMusic","pauseEffect","resumeEffect","timeEnd","loadBundleScene","sceneName","loadScene","scene","loadBundles","BundleUtil","LIFE_CYCLE_CREATED","LIFE_CYCLE_READY","LIFE_CYCLE_COMPLETE","LIFE_CYCLE_BLOCK","LIFE_CYCLE_UNBLOCK","LIFE_CYCLE_PARAMS","LIFE_CYCLE_BACK","FOLLOW_CLIENT_TO_MODULE","FOLLOW_MODULE_TO_CLIENT","VIDEO_CLIENT_TO_MODULE","VIDEO_MODULE_TO_CLIENT","SET_TOP_BAR_ACTIVE","Events","ClickCmpt_1","PopupManager_1","ResourcesManager_1","ClientModuleEnum_1","LinkedNode_1","ErrorSystem_1","StateMachine_1","TimerSystem_1","TimeUtils_1","UIUtils_1","ModelBase_1","MessageBase_1","SpotSystem_1","util","Time","Ui","UiContainer","LocalStorage","spot","Resources","Type","Event","Popup","consts","structure","LinkList","video","videoTransType","component","Click","Loader","fsm","StateManager","Telegrams","modelManager","modelBase","nativeInfo","networkType","__exportStar","bundleUtils_1","cdn_root","book_id","CONFIG","assets","contentNode","lessonNode","lock","relayout","debug","setDisplayStats","loadLocalProject","frameSize","view","getFrameSize","designResolution","designSize","width","height","frameAspectRatio","designAspectRatio","screenSize","ceil","comp","initParams","addChild"],"mappings":"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","sourcesContent":["export default abstract class ASystem {\n    public abstract init(...args): Promise<any>;\n    public abstract release(): void;\n}","\nimport IPlatform from \"./IPlatform\";\n\nexport default class AndroidAdapter implements IPlatform {\n    public packageName: string = \"org/cocos2dx/javascript/\";\n    public isPrintLog: boolean = true;\n    public onGameExit(): void {\n        // console.log(`Android adapter:onGameExit`)\n        // this.callNative(\"onGameExit\", \"()V\")\n    }\n    public onGameReady(): void {\n        // console.log(`Android adapter:onGameReeady`)\n        // GameInfo.instance.hasCalledOnGameReady = true;\n        // this.callNative(\"onGameReady\", \"()V\")\n        this.callFunction(\"hideSplash\", \"\", \"NativeInterface\");\n        cc.log(`getWritablePath():${jsb.fileUtils.getWritablePath()}`)\n    }\n\n    public toast(message: string): void {\n        // jsb.reflection.callStaticMethod(this.packageName, \"toast\", \"(Ljava/lang/String;)V\", message);\n\n        this.callFunction(\"toast\", message, \"NativeInterface\");\n    }\n\n    public callFunction(funcName: string, parm: string, moduleName: string): void {\n        let packagePath = this.packageName;\n        if (moduleName && moduleName != '') {\n            packagePath += moduleName;\n        }\n        jsb.reflection.callStaticMethod(packagePath, funcName, \"(Ljava/lang/String;)V\", parm);\n    }\n\n    callFunctionResult(funcName: string, parm: string, moduleName: string) {\n        let packagePath = this.packageName;\n        if (moduleName && moduleName != '') {\n            packagePath += moduleName;\n        }\n        let result = jsb.reflection.callStaticMethod(packagePath, funcName, \"(Ljava/lang/String;)Ljava/lang/String;\", parm);\n        return result;\n    }\n}","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class AtlasLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"AtlasLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class AudioLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res: cc.AudioClip) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"AudioLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","import AudioUtil from \"../../utils/audioUtil\";\r\n\r\n/**\r\n * 音频播放类\r\n */\r\nexport default class AudioManager {\r\n\r\n    /** 音乐音效状态缓存tag */\r\n    public static EFFECT_TAG = \"ChineseAi_EFFECT_TAG\";\r\n    public static MUSIC_TAG = \"ChineseAi_MUSIC_TAG\";\r\n\r\n    /** 是否播放音效和音乐标志位 */\r\n    private static _effectFlag: boolean = true;\r\n    private static _musicFlag: boolean = true;\r\n\r\n    private static _curMusic: string = \"\";\r\n    private static _curBundle: string | cc.AssetManager.Bundle;\r\n\r\n    public static init(): void {\r\n        let effectSwitch = cc.sys.localStorage.getItem(AudioManager.EFFECT_TAG) === \"false\";\r\n        let musicSwitch = cc.sys.localStorage.getItem(AudioManager.MUSIC_TAG) === \"false\";\r\n        AudioManager._effectFlag = !effectSwitch;\r\n        AudioManager._musicFlag = !musicSwitch;\r\n        this.setEffectStatus(AudioManager._effectFlag);\r\n        this.setMusicStatus(AudioManager._musicFlag);\r\n    }\r\n\r\n    /**\r\n     * 播放音效\r\n     * @param {string | cc.AssetManager.Bundle} bundleName\r\n     * @param {string} name 音效资源\r\n     * @param {function} finishCb\r\n     */\r\n    public static playEffect(bundleName: string | cc.AssetManager.Bundle, name: string, finishCb?: () => void): void {\r\n        if (!bundleName || bundleName === '') {\r\n            return;\r\n        }\r\n        if (AudioManager._effectFlag) {\r\n            AudioUtil.playEffect(bundleName, name, finishCb);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放音效(async await)\r\n     * @param bundleName \r\n     * @param name \r\n     * @param isSingle \r\n     * @param isLoop \r\n     * @returns \r\n     */\r\n    public static async playEffectByName(bundleName: string | cc.AssetManager.Bundle, name: string, isSingle: boolean = true, isLoop: boolean = false) {\r\n        if (!bundleName || bundleName === '') {\r\n            return\r\n        }\r\n        if (AudioManager._effectFlag) {\r\n            await AudioUtil.playEffectByName(bundleName, name, isSingle, isLoop)\r\n        }\r\n    }\r\n\r\n    /** 暂停音效 */\r\n    public static stopEffect(): void {\r\n        AudioUtil.stopEffect();\r\n    }\r\n\r\n    static stopEffectByName(name: string) {\r\n        AudioUtil.stopEffectByName(name)\r\n    }\r\n\r\n    static destroyAudio(bundleName: string, name: string) {\r\n        AudioUtil.destroyAudio(bundleName, name)\r\n    }\r\n\r\n    /** 播放循环音效 */\r\n    public static playLoopEffect(bundleName: string | cc.AssetManager.Bundle, name: string): void {\r\n        if (AudioManager._effectFlag) {\r\n            AudioUtil.playLoopEffect(bundleName, name);\r\n        }\r\n    }\r\n\r\n    /** 暂停循环音效 */\r\n    public static stopLoopEffect(bundleName, name: string): void {\r\n        AudioUtil.stopLoopEffect(bundleName, name);\r\n    }\r\n\r\n    /** 暂停所有循环音效 */\r\n    public static pauseLoopEffects(): void {\r\n        AudioUtil.pauseLoopEffects();\r\n    }\r\n\r\n    /** 恢复所有循环音效 */\r\n    public static resumeLoopEffects(): void {\r\n        if (AudioManager._effectFlag) {\r\n            AudioUtil.resumeLoopEffects();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放背景音乐\r\n     * @param {string} name 播放背景音乐\r\n     */\r\n    public static playMusic(bundleName: string | cc.AssetManager.Bundle, name: string): void {\r\n        if (!bundleName || bundleName === '') {\r\n            return;\r\n        }\r\n        AudioManager._curMusic = name;\r\n        AudioManager._curBundle = bundleName;\r\n        if (AudioManager._musicFlag) {\r\n            AudioUtil.playMusic(bundleName, name);\r\n        }\r\n    }\r\n\r\n    /** 暂停背景音乐 */\r\n    public static stopMusic(): void {\r\n        AudioUtil.stopMusic();\r\n    }\r\n\r\n    public static passMusic() {\r\n        AudioUtil.passMusic();\r\n    }\r\n\r\n    public static resumeMusic() {\r\n        AudioUtil.resumeMusic();\r\n    }\r\n\r\n    /** 设置背景音乐播放状态 */\r\n    public static setMusicStatus(flag: boolean): void {\r\n        AudioManager._musicFlag = flag;\r\n        cc.sys.localStorage.setItem(AudioManager.MUSIC_TAG, flag);\r\n        if (flag) {\r\n            AudioManager.playMusic(AudioManager._curBundle, AudioManager._curMusic);\r\n        } else {\r\n            AudioManager.stopMusic();\r\n        }\r\n    }\r\n\r\n    /** 设置音效播放状态 */\r\n    public static setEffectStatus(flag: boolean): void {\r\n        AudioManager._effectFlag = flag;\r\n        cc.sys.localStorage.setItem(AudioManager.EFFECT_TAG, flag);\r\n        cc.log(\"AudioManager.setEffectStatus.flag\" + flag);\r\n        if (flag) {\r\n            this.resumeLoopEffects();\r\n        } else {\r\n            this.pauseLoopEffects();\r\n        }\r\n    }\r\n\r\n    public static get effectFlag(): boolean {\r\n        return AudioManager._effectFlag;\r\n    }\r\n\r\n    public static get musicFlag(): boolean {\r\n        return AudioManager._musicFlag;\r\n    }\r\n}\r\n","/**\r\n * 资源加载基类，负责处理资源加载逻辑（本地/远程下载/网络动态资源）\r\n * @author Yue\r\n */\r\nexport default abstract class BaseLoader {\r\n    /**\r\n     * 资源统一加载接口\r\n     * @param {string} path 资源路径\r\n     * @param {cc.Asset} type 资源类型\r\n     * @param {(err, res) => void} onComplete 加载完成回调\r\n     * @param {cc.AssetManager.Bundle | string} bundle 资源所属bundle，可选。\r\n     * @param {(finish: number, total: number, item: cc.AssetManager.RequestItem) => void} onProgress 加载进度\r\n     */\r\n    public loadRes(path: string, options: typeof cc.Asset | Record<string, any>, onComplete: (err, res) => void, bundle?: cc.AssetManager.Bundle, onProgress?: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void): void {\r\n        if (this.isNetRes(path)) {\r\n            // 加载网络资源\r\n            this.loadNetRes(path, options, onComplete);\r\n        } else if (this.isRemoteRes(path)) {\r\n            // 加载远程待下载资源\r\n            this.loadRemoteRes(path, options, onComplete);\r\n        } else {\r\n            // 加载本地资源\r\n            this.loadLocalRes(path, options, onProgress, onComplete, bundle);\r\n        }\r\n    }\r\n\r\n    // 加载网络资源\r\n    public abstract loadNetRes(path: string, options: typeof cc.Asset | Record<string, any>, callback: (err, res) => void): void;\r\n    // 加载远程待下载资源\r\n    public abstract loadRemoteRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err, res) => void): void;\r\n    // 加载本地资源\r\n    public abstract loadLocalRes(path: string, type: typeof cc.Asset | Record<string, any>, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, onComplete: (err, res) => void, bundle?: cc.AssetManager.Bundle): void;\r\n\r\n    /**\r\n     * 判断是否是远程待下载资源\r\n     * @param {string} path 资源路径 \r\n     */\r\n    public isRemoteRes(path: string): boolean {\r\n        return false;\r\n    }\r\n\r\n    public isNetRes(path: string): boolean {\r\n        if (path.startsWith(\"http://\") || path.startsWith(\"https://\") || path.startsWith(\"zybhost://\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}","import ResLoader from \"../framework/load/ResLoader\";\nimport AudioManager from \"../system/audio/AudioManager\";\nimport LogSystem from \"../system/log/LogSystem\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ClickCmpt extends cc.Component {\n\n    // 点击音效\n    @property(cc.String)\n    clickSound: string = \"commonRes/sound/btn_click\";\n    // 默认bundle\n    @property(cc.String)\n    bundleName = 'components';\n\n\n    @property({ tooltip: \"启用点击反馈\" })\n    clickAudioEffect: boolean = true;\n    // 点击事件\n    @property({ type: [cc.Component.EventHandler], tooltip: \"点击事件列表\" })\n    clickEvents: cc.Component.EventHandler[] = [];\n\n    onLoad() {\n        if (this.clickEvents.length > 0) {\n            this.onCilckEventHandler();\n        }\n    }\n\n    onCilckEventHandler() {\n        this.clickEvents.forEach(item => {\n            let targeNode = item.target;\n            let tempCmpt = targeNode.getComponent(item[\"_componentName\"]);\n            this.onClick(targeNode, tempCmpt[item.handler], tempCmpt, item.customEventData, this.clickAudioEffect)\n        })\n    }\n\n    /**\n     * 注册或发送点击事件，默认带点击音效\n     * @param {cc.Node} node 事件节点  \n     * @param {string | (event: any) => void} handler 事件名称 | 事件回调函数 \n     * @param {any} target 目标 \n     * @param {any} param 参数 \n     * @param {boolean} clickEffect 点击反馈\n     * @param {string} sound 声音，有默认 \n     * @param {string} bundleName bundle名称 默认components\n     * \n     */\n    public onClick<T extends (event: any) => void>(node: cc.Node,\n        handler: T,\n        target?: any,\n        param?: any,\n        clickEffect?: boolean,\n        sound?: string,\n        bundleName?: string | cc.AssetManager.Bundle): void {\n        if (!node) {\n            LogSystem.warn(`onClick参数node不能为空：${node}`);\n            return;\n        }\n\n        node.on(cc.Node.EventType.TOUCH_START, (event) => {\n            let soundName = sound ? sound : this.clickSound;\n            let bundle = bundleName ? bundleName : this.bundleName;\n            // \b点击反馈\n            if (clickEffect) {\n                AudioManager.playEffect(bundle, soundName);\n\n            }\n            if (handler) { handler.call(target, param); }\n\n        }, target);\n\n\n    }\n\n    /**\n     * 移除节点的点击事件\n     * @param {cc.Node | string} node 事件节点 \n     */\n    public offClick(node: cc.Node): void {\n        if (!node) {\n            LogSystem.warn(`offClick参数node不能为空：${node}`);\n            return;\n        }\n\n        node.off(cc.Node.EventType.TOUCH_START);\n    }\n\n    public preloadClickEffect() {\n        ResLoader.loadRes(this.clickSound, cc.AudioClip, () => { }, this.bundleName);\n    }\n}","/**\n * 主要定义子游戏和框架交互的事件类型\n * C2M_** 框架到子游戏事件\n * M2C_** 子游戏到框架事件\n */\n\n// 视频与子游戏交互\nexport enum VideoEventTransType {\n    //  视频开始播放\n    C2M_VIDEO_PLAY_START,\n    //  刷新视频进度\n    C2M_UPDATE_PLAY_STATUS = 1,\n    //  视频播放完成\n    C2M_VIDEO_PLAY_COMPLETE,\n    //  播放视频\n    M2C_VIDEO_PLAY_START,\n    //  暂停视频\n    M2C_VIDEO_PLAY_PAUSE,\n    //  恢复播放视频\n    M2C_VIDEO_PLAY_RESUME,\n    //  视频跳转\n    M2C_VIDEO_PLAY_SEEKTO,\n    //  视频初始化\n    M2C_VIDEO_INIT,\n    //  视频卸载\n    M2C_VIDEO_DESTROY,\n}","import PopupBase from \"./PopupBase\";\n\nconst { ccclass, property } = cc._decorator;\n\n/**\n * 确认弹窗（PopupBase 使用示例）\n */\n@ccclass\nexport default class ConfirmPopup extends PopupBase<ConfirmPopupOptions> {\n\n    @property(cc.Label)\n    private titleLabel: cc.Label = null;\n\n    @property(cc.Label)\n    private contentLabel: cc.Label = null;\n\n    @property(cc.Node)\n    private confirmBtn: cc.Node = null;\n\n    protected onLoad() {\n        this.registerEvent();\n    }\n\n    protected onDestroy() {\n        this.unregisterEvent();\n    }\n\n    private registerEvent() {\n        this.confirmBtn.on(cc.Node.EventType.TOUCH_END, this.onConfirmBtnClick, this);\n    }\n\n    private unregisterEvent() {\n        this.confirmBtn.targetOff(this);\n    }\n\n    protected init() {\n\n    }\n\n    protected updateDisplay(options: ConfirmPopupOptions): void {\n        this.titleLabel.string = options.title;\n        this.contentLabel.string = options.content;\n    }\n\n    protected onConfirmBtnClick() {\n        this.options.confirmCallback && this.options.confirmCallback();\n        this.hide();\n    }\n\n}\n\n/** 确认弹窗选项 */\nexport interface ConfirmPopupOptions {\n    title: string;\n    content: string;\n    confirmCallback: Function;\n}\n","\nimport IPlatform from \"./IPlatform\";\n\nexport default class DebuggerAdapter implements IPlatform {\n    packageName: string;\n    public isPrintLog: boolean = false;\n    public onGameExit(): void {\n        // console.log(`Android adapter:onGameExit`)\n        // this.callNative(\"onGameExit\", \"()V\")\n    }\n    public onGameReady(): void {\n        // console.log(`Android adapter:onGameReeady`)\n        // GameInfo.instance.hasCalledOnGameReady = true;\n        // this.callNative(\"onGameReady\", \"()V\")\n    }\n\n    public toast(message: string): void {\n        // this.callNative(\"toast\", \"(Ljava/lang/String;)V\", message)\n    }\n\n    callFunction(funcName: string): void {\n        // throw new Error(\"Method not implemented.\");\n    }\n\n    callFunctionResult(funcName: string, parm: string, moduleName: string) {\n        throw new Error(\"Method not implemented.\");\n    }\n}","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class DefaultLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, options: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, options, (e, res) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"AtlasLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}","/**\n * 延迟节点\n */\nexport class Delay {\n    public key: string;   // key\n    public time: number;   // 间隔多久\n    public current: number;   // 当前时间戳\n\n    constructor(k, v) {\n        this.key = k;\n        this.time = v;\n    }\n}\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class DelayUtils {\n    /**\n     * 延迟队列\n     */\n    private static delayMap: { [key: string]: Delay; } = {\n        \"button\": new Delay(\"button\", 400)\n    };\n\n    /**\n     * 检测是否延迟\n     * @param key\n     * @returns true : 延迟 false : 不需要延迟\n     */\n    public static CheckDelay(key: string): boolean {\n\n        let delay = DelayUtils.delayMap[key];\n        if (!delay) { return true; }\n\n        let tick = (new Date()).getTime();\n\n        let time = tick - delay.current\n\n        if (time < delay.time) { return true; }\n\n        delay.current = tick;\n\n        return false;\n    }\n}\n","import IEntity from \"./IEntity\";\n\n/**\n * @author\n *\n */\nexport default class EntityManager {\n    private static _instance: EntityManager;\n    private _entityMap: Object;\n    private _length: number = 0;\n\n    public constructor() {\n        this._entityMap = {};\n    }\n\n    public static get instance(): EntityManager {\n        if (this._instance == null) {\n            this._instance = new EntityManager();\n        }\n        return this._instance;\n    }\n    public release(): void {\n        this._entityMap = null;\n        EntityManager._instance = null;\n    }\n\n    // this method stores a pointer to the entity in the std::vector\n    // m_Entities at the index position indicated by the entity's ID\n    // (makes for faster access)\n    public registerEntity(newEntity: IEntity): void {\n        this._entityMap[newEntity.sid] = newEntity;\n        // this.index++;\n    }\n\n    // returns a pointer to the entity with the ID given as a parameter\n    public getEntityFromID(id: string): IEntity {\n        return this._entityMap[id];\n    }\n\n    // this method removes the entity from the list\n    public removeEntity(entity: IEntity): void {\n        let key: any;\n        for (key in this._entityMap) {\n            if (this._entityMap[key] == entity) {\n                delete this._entityMap[key];\n            }\n        }\n    }\n\n    /**\n     * 获取所有智体\n     */\n    public getAllEntity(): Object {\n        return this._entityMap;\n    }\n\n    /**\n     * 获取一个可用的智体\n     */\n    public getAvailableEntity<T extends IEntity>(clazz: any): T {\n        let key: any;\n        let availableEntity: T\n        for (key in this._entityMap) {\n            let entity: T = this._entityMap[key];\n            // console.log(entity instanceof clazz);\n            if (entity instanceof clazz) {\n                if (entity != null) {\n                    // if (entity.isDestroy == true) {\n                        availableEntity = entity;\n                        return availableEntity;\n                    // }\n                }\n            }\n        }\n        availableEntity = this.createEntity<T>(clazz);\n        return availableEntity;\n    }\n\n    /**\n     * new一个智体\n     */\n    private createEntity<T extends IEntity>(clazz: new() => T): T {\n        let entity: T = new clazz();\n        // (entity as IEntity).isDestroy = false;\n        // (<IEntity>entity).entityType = EntityType.FISH;\n        this.registerEntity(entity);\n        this._length++;\n        return entity;\n    }\n\n    /**\n     * get length\n     */\n    public get length(): number {\n        return this._length\n    }\n}\n","\nexport class ErrorSendInterval {\n    public static readonly RATE_DEFAULT: number = 5;\n    public static readonly RATE_LOW: number = 10;\n}\n\n/**\n * 错误捕获系统\n * @export\n * @class ErrorSystem\n * # 注册错误监听\n * ```\n * ErrorSystem.instance.init(false,this.errorOutAdapter,ErrorSendInterval.RATE_LOW)\n * ```\n */\nexport default class ErrorSystem {\n    private static _instance: ErrorSystem;\n\n    private errorMap: any = {};\n    private outAdapter: Function;\n    private minInterval: number;\n\n    public static get instance(): ErrorSystem {\n        if (ErrorSystem._instance == null) {\n            ErrorSystem._instance = new ErrorSystem();\n        }\n        return ErrorSystem._instance;\n    }\n\n    /**\n     * 注册全局错误捕获\n     * @param {boolean} isNative 是否是native环境\n     * @param {(exception: string) => void} outAdapter 输出适配器\n     * @returns {Promise<any>}\n     * @memberof ErrorSyStem\n     */\n    public init(isNative: boolean, outAdapter?: (exception: string) => void): Promise<void> {\n        this.outAdapter = outAdapter;\n        return new Promise((res, rea) => {\n            if (isNative) {\n                // @ts-ignore\n                window.__errorHandler = (errorMessage, file, line, message, error) => {\n                    let exception: any = {};\n                    exception.errorMessage = errorMessage;\n                    exception.file = file;\n                    exception.line = line;\n                    exception.message = message;\n                    exception.error = error;\n                    // @ts-ignore\n                    if (window.exception != JSON.stringify(exception)) {\n                        // @ts-ignore\n                        window.exception = JSON.stringify(exception);\n                    }\n                    //TODO: 发送请求上报异常\n                    this.outAdapter(exception);\n                };\n                // @ts-ignore\n            } else {\n                //捕获promise错误\n                window.addEventListener('unhandledrejection', (event: PromiseRejectionEvent) => {\n                    let message: string = String(event.reason.stack)\n                    this.outAdapter({ \"unhandledrejection\": String(event.reason.stack) });\n                })\n                window.onerror = (errorMessage, file, line, message, error) => {\n                    let exception: any = {};\n                    exception.errorMessage = errorMessage;\n                    exception.file = file;\n                    exception.line = line;\n                    exception.message = message;\n                    exception.error = error;\n                    // @ts-ignore\n                    if (window.exception != JSON.stringify(exception)) {\n                        // @ts-ignore\n                        window.exception = JSON.stringify(exception);\n                    }\n                    //TODO: 发送请求上报异常\n                    this.outAdapter(exception);\n                };\n            }\n            res();\n        })\n    }\n\n    // private send(exception: any): void {\n    //     let str: string = JSON.stringify(exception);\n    //     if (this.errorMap[exception]) {\n    //         this.errorMap[exception] += 1;\n    //         if (this.errorMap[exception] >= this.minInterval) {\n    //             this.outAdapter(str);\n    //             this.errorMap[exception] = null;\n    //             delete this.errorMap[exception];\n    //         }\n    //     } else {\n    //         this.errorMap[exception] = 1;\n    //         this.outAdapter(str);\n    //     }\n    // }\n\n    public release(): void {\n        this.outAdapter = null;\n        this.errorMap = null;\n        ErrorSystem._instance = null;\n    }\n}","/**\n * @private\n * 用于管理事件的类\n * 可以扩展以在其他类中提供事件功能,参考NODEJS的EventEmitter模块实现,注释为机翻\n *\n * @class 事件管理器管理事件注册和发布\n * @see https://github.com/Olical/EventEmitter\n * @version 1.0\n */\nexport class EventEmitter {\n  private _events: any;\n  private _onceReturnValue: any;\n\n  /**\n   * 返回指定事件的侦听器数组。\n   * 如果需要，将初始化事件对象和侦听器数组。\n   * 如果使用正则表达式搜索，将返回一个对象。对象包含每个匹配事件的键。\n   * @example  /ba[rz]/ 则 返回一个对象包含 bar 和 baz.\n   * 但是，如果您已经用定义事件定义了它们，或者添加了一些侦听器\n   * 对象响应中的每个属性都是监听器函数的数组。\n   *\n   * @param {string|RegExp} 事件名称\n   * @return {Function[|Object]} 事件的所有侦听器函数.\n   */\n  public getListeners(event: string | RegExp): Function[] {\n    var events = this._getEvents();\n    var response: any;\n    var key: any;\n\n    // Return a concatenated array of all matching events if\n    // the selector is a regular expression.\n    if (event instanceof RegExp) {\n      response = {};\n      for (key in events) {\n        if (events.hasOwnProperty(key) && event.test(key)) {\n          response[key] = events[key];\n        }\n      }\n    } else {\n      response = events[event] || (events[event] = []);\n    }\n\n    return response;\n  }\n\n  /**\n   * 将侦听器函数添加到指定的事件。\n   * 重复添加将会被忽略\n   * 如果侦听器返回true，那么它将被调用后被删除\n   * 如果将正则表达式作为事件名传递，则监听器将被添加到匹配它的所有事件。\n   *\n   * @param {string|RegExp} event 事件名称\n   * @param {Function} listener 发出事件时调用的方法。\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public addListener(event: string | RegExp, listener: Function | object, target: any = null): EventEmitter {\n    if (!this.isValidListener(listener)) {\n      throw new TypeError(\"listener must be a function\");\n    }\n\n    var listeners = this.getListenersAsObject(<string>event);\n    var listenerIsWrapped = typeof listener === \"object\";\n    var key;\n\n    for (key in listeners) {\n      if (listeners.hasOwnProperty(key) && this.indexOfListener(listeners[key], listener, target) === -1) {\n        (<any>listeners[key]).push(\n          listenerIsWrapped\n            ? listener\n            : {\n              listener: listener,\n              once: false,\n              target: target\n            }\n        );\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * addListener方法的别名\n   * @param {string | RegExp} event\n   * @param {Function} listener\n   * @returns {EventEmitter}\n   */\n  public on(event: string | RegExp, listener: Function | object, target?: any): EventEmitter {\n    return this.addListener(event, listener, target);\n  }\n\n  /**\n   * 取一组听众对象和把它变成一个侦听器函数列表。\n   *\n   * @param {Object[]} 侦听原始监听器对象。\n   * @return {Function[]} 侦听器的功能。\n   */\n  public flattenListeners(listeners: { listener: Function }[]): Function[] {\n    var flatListeners = [];\n    var i;\n\n    for (i = 0; i < listeners.length; i += 1) {\n      flatListeners.push(listeners[i].listener);\n    }\n\n    return flatListeners;\n  }\n\n  /**\n   * Fetches the requested listeners via getListeners but will always return the results inside an object.\n   * This is mainly for internal use but others may find it useful.\n   *\n   * @param event {string|RegExp} Name of the event to return the listeners from.\n   * @return {Object} All listener functions for an event in object\n   */\n  public getListenersAsObject(event: string): { [event: string]: Function } {\n    var listeners = this.getListeners(event);\n    var response: any; //Array<string | RegExp>;\n\n    if (listeners instanceof Array) {\n      response = {};\n      response[event] = listeners;\n    }\n\n    return response || listeners;\n  }\n\n  /**\n   * Semi-alias of addListener. It will add a listener that will be\n   * automatically removed after it's first execution.\n   *\n   * @param event {string|RegExp} Name of the event to attach the listener to.\n   * @param listener {Function} Method to be called when the event is emitted.\n   * If the function returns true then it will be removed after calling.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public addOnceListener(event: string | RegExp, listener: Function): EventEmitter {\n    return this.addListener(event, <Object>{ listener: listener, once: true });\n  }\n\n  /**\n   * addOnceListener的别名\n   * @param {string | RegExp} event\n   * @param {Function} listener\n   * @returns {EventEmitter}\n   */\n  public once(event: string | RegExp, listener: Function): EventEmitter {\n    return this.addOnceListener(event, listener);\n  }\n\n  /**\n   * Defines an event name.\n   * This is required if you want to use a regex to add a listener to multiple events at once.\n   * If you don't do this then how do you expect it to know what event to add to?\n   * Should it just add to every possible match for a regex? No. That is scary and bad.\n   * You need to tell it what event names should be matched by a regex.\n   *\n   * @param {string} event Name of the event to create.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public defineEvent(event: string): EventEmitter {\n    this.getListeners(event);\n    return this;\n  }\n\n  /**\n   * Defines an event name.\n   * This is required if you want to use a regex to add a listener to multiple events at once.\n   * If you don't do this then how do you expect it to know what event to add to?\n   * Should it just add to every possible match for a regex? No. That is scary and bad.\n   * You need to tell it what event names should be matched by a regex.\n   *\n   * @param {string[]} events Name of the event to create.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public defineEvents(events: string[]): EventEmitter {\n    for (var i = 0; i < events.length; i += 1) {\n      this.defineEvent(events[i]);\n    }\n    return this;\n  }\n\n  /**\n   * 从指定的事件中移除侦听器函数。\n   * 当将正则表达式传递为事件名称时，它将从与它匹配的所有事件中移除侦听器。\n   *\n   * @param {String|RegExp} event Name of the event to remove the listener from.\n   * @param {Function} listener Method to remove from the event.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public removeListener(event: string | RegExp, listener: Function, target: any = null): EventEmitter {\n    var listeners = this.getListenersAsObject(<string>event);\n    var index;\n    var key;\n\n    for (key in listeners) {\n      if (listeners.hasOwnProperty(key)) {\n        index = this.indexOfListener(listeners[key], listener, target);\n\n        if (index !== -1) {\n          (<any>listeners[key]).splice(index, 1);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * removeListener的别名\n   * @param {string | RegExp} event\n   * @param {Function} listener\n   * @returns {EventEmitter}\n   */\n  public off(event: string | RegExp, listener: Function, target: any = null): EventEmitter {\n    return this.removeListener(event, listener, target);\n  }\n\n  /**\n   * Adds listeners in bulk using the manipulateListeners method.\n   * If you pass an object as the second argument you can add to multiple events at once.\n   * The object should contain key value pairs of events and listeners or listener arrays.\n   * You can also pass it an event name and an array of listeners to be added.\n   * You can also pass it a regular expression to add the array of listeners to all events that match it.\n   * Yeah, this function does quite a bit. That's probably a bad thing.\n   *\n   * @param {String|Object|RegExp} event An event name if you will pass an array of listeners next.\n   * An object if you wish to add to multiple events at once.\n   * @param {Function[]} [listeners] An optional array of listener functions to add.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public addListeners(event: string | RegExp, listeners: Function[]): EventEmitter {\n    return this.manipulateListeners(false, event, listeners);\n  }\n\n  /**\n   * Removes listeners in bulk using the manipulateListeners method.\n   * If you pass an object as the second argument you can remove from multiple events at once.\n   * The object should contain key value pairs of events and listeners or listener arrays.\n   * You can also pass it an event name and an array of listeners to be removed.\n   * You can also pass it a regular expression to remove the listeners from all events that match it.\n   *\n   * @param {String|Object|RegExp} event An event name if you will pass an array of listeners next.\n   * An object if you wish to remove from multiple events at once.\n   * @param {Function[]} [listeners] An optional array of listener functions to remove.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public removeListeners(event: string | RegExp, listeners: Function[]): EventEmitter {\n    return this.manipulateListeners(true, event, listeners);\n  }\n\n  /**\n   * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job.\n   * You should really use those instead, this is a little lower level.\n   * The first argument will determine if the listeners are removed (true) or added (false).\n   * If you pass an object as the second argument you can add/remove from multiple events at once.\n   * The object should contain key value pairs of events and listeners or listener arrays.\n   * You can also pass it an event name and an array of listeners to be added/removed.\n   * You can also pass it a regular expression to manipulate the listeners of all events that match it.\n   *\n   * @param {Boolean} remove True if you want to remove listeners, false if you want to add.\n   * @param {String|Object|RegExp} event An event name if you will pass an array of listeners next.\n   * An object if you wish to add/remove from multiple events at once.\n   * @param {Function[]} [listeners] An optional array of listener functions to add/remove.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public manipulateListeners(\n    remove: boolean,\n    event: string | Object | RegExp,\n    listeners: Function[]\n  ): EventEmitter {\n    var i;\n    var value;\n    var single = remove ? this.removeListener : this.addListener;\n    var multiple = remove ? this.removeListeners : this.addListeners;\n\n    // If event is an object then pass each of its properties to this method\n    if (typeof event === \"object\" && !(event instanceof RegExp)) {\n      for (i in event) {\n        if ((<object>event).hasOwnProperty(i) && (value = event[i])) {\n          // Pass the single listener straight through to the singular method\n          if (typeof value === \"function\") {\n            single.call(this, i, value);\n          } else {\n            // Otherwise pass back to the multiple function\n            multiple.call(this, i, value);\n          }\n        }\n      }\n    } else {\n      // So event must be a string\n      // And listeners must be an array of listeners\n      // Loop over it and pass each one to the multiple method\n      i = listeners.length;\n      while (i--) {\n        single.call(this, event, listeners[i]);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all listeners from a specified event.\n   * If you do not specify an event then all listeners will be removed.\n   * That means every event will be emptied.\n   * You can also pass a regex to remove all events that match it.\n   *\n   * @param {String|RegExp} [event] Optional name of the event to remove all listeners for.\n   * Will remove from every event if not passed.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public removeEvent(event?: string | RegExp): EventEmitter {\n    var type = typeof event;\n    var events = this._getEvents();\n    var key;\n\n    // Remove different things depending on the state of event\n    if (type === \"string\") {\n      // Remove all listeners for the specified event\n      delete events[<string>event];\n    } else if (event instanceof RegExp) {\n      // Remove all events matching the regex.\n      for (key in events) {\n        if (events.hasOwnProperty(key) && event.test(key)) {\n          delete events[key];\n        }\n      }\n    } else {\n      // Remove all listeners in all events\n      delete this._events;\n    }\n\n    return this;\n  }\n\n  /**\n   * Alias of removeEvent.\n   *\n   * Added to mirror the node API.\n   */\n  public removeAllListeners(event?: string | RegExp): EventEmitter {\n    return this.removeEvent(event);\n  }\n\n  /**\n   * 派发事件\n   * > 当发出时，将执行附加到该事件的每个侦听器。\n   * > 如果传递可选参数数组，那么这些参数将在执行后传递给每个侦听器。\n   * > 因为它使用apple，所以你的参数数组会像你单独写出来一样通过。\n   * > 还可以传递正则表达式，以将其发送给匹配它的所有事件。\n   *\n   * @param {String|RegExp} event 发出和执行侦听器的事件的名称。\n   * @param {Array} [args] 要传递给每个侦听器的可选参数数组。\n   * @return {EventEmitter} 当前示例\n   */\n  public emitEvent(event: string | RegExp, ...args: any[]): EventEmitter {\n    var listenersMap = this.getListenersAsObject(<string>event);\n    var listeners;\n    var listener;\n    var i;\n    var key;\n    var response;\n\n    for (key in listenersMap) {\n      if (listenersMap.hasOwnProperty(key)) {\n        listeners = (<any>listenersMap[key]).slice(0);\n\n        for (i = 0; i < listeners.length; i++) {\n          // If the listener returns true then it shall be removed from the event\n          // The function is executed either with a basic call or an apply if there is an args array\n          listener = listeners[i];\n\n          if (listener.once === true) {\n            this.removeListener(event, listener.listener);\n          }\n          response = listener.listener.apply(listener.target || this, ...args || []);\n\n          if (response === this.onceReturnValue) {\n            this.removeListener(event, listener.listener);\n          }\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * emitEvent的别名\n   * @param {string | RegExp} event\n   * @param args\n   * @returns {EventEmitter}\n   */\n  public trigger(event: string | RegExp, ...args: any[]): EventEmitter {\n    return this.emitEvent(event, ...args);\n  }\n\n  /**\n   * Subtly different from emitEvent in that it will pass its arguments on to the listeners,\n   * as opposed to taking a single array of arguments to pass on.\n   * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.\n   *\n   * @param {String|RegExp} event Name of the event to emit and execute listeners for.\n   * @param {... any[]} args Optional additional arguments to be passed to each listener.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public emit(event: string | RegExp, ...args: any[]): EventEmitter {\n    // var args = Array.prototype.slice.call(arguments, 1);\n    return this.emitEvent(event, args);\n  }\n\n  public get onceReturnValue() {\n    if (this.hasOwnProperty(\"_onceReturnValue\")) {\n      return this._onceReturnValue;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Sets the current value to check against when executing listeners. If a\n   * listeners return value matches the one set here then it will be removed\n   * after execution. This value defaults to true.\n   *\n   * @param {any} value The new value to check for when executing listeners.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public set onceReturnValue(value) {\n    this._onceReturnValue = value;\n    // return this;\n  }\n\n  private _getEvents() {\n    return this._events || (this._events = {});\n  }\n\n  private isValidListener(listener: object | Function): boolean {\n    if (typeof listener === \"function\" || listener instanceof RegExp) {\n      return true;\n    } else if (listener && typeof listener === \"object\") {\n      return this.isValidListener(<any>listener);\n    } else {\n      return false;\n    }\n  }\n\n  private indexOfListener(listeners: any, listener: any, target: any): number {\n    var i = listeners.length;\n    while (i--) {\n      if ((listeners[i].listener === listener) && (target == listeners[i].target)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n}\n","/**\n * @class 事件管理器\n * @version 1.0\n */\nimport { EventEmitter } from \"./EventEmitter\";\n\nexport default class EventSystem {\n  private static _emitter = new EventEmitter();\n\n  /**\n   * 绑定事件\n   * @param {String} event\n   * @param {Function} callback\n   * @example Event.on(events, this.onEvents.bind(this));\n   */\n  public static on(event: string, callback: any, target?: any): void {\n    this._emitter.on(event, callback, target);\n  }\n\n  /**\n   * 绑定事件\n   * @param {String} event\n   * @param {Function} callback\n   * @example Event.on(events, this.onEvents.bind(this));\n   */\n  public static once(event: string, callback: any, target?: any): void {\n    this._emitter.once(event, callback);\n  }\n\n  /**\n   * 销毁事件\n   * @param {String} event\n   * @param {Function} callback\n   * @example Event.off(events, this.onEvents.bind(this));\n   */\n  public static off(event: string, callback: any, target: any): void {\n    this._emitter.off(event, callback, target);\n  }\n\n  /**\n   * 派发事件\n   * @param {String} event\n   * @param {any} data\n   * @example Event.emit(event, data);\n   */\n  public static emit(event: string, eventData?: any): void {\n    let params: any = {};\n    params.event = event;\n    params.data = eventData;\n    this._emitter.emit(event, params);\n  }\n\n  /**\n   * 释放所有监听器\n   */\n  public static release(): void {\n    this._emitter.removeEvent();\n  }\n}\n","/**\n * HTTP状态码辅助类\n * * 1**\t信息，服务器收到请求，需要请求者继续执行操作\n * * 2**\t成功，操作被成功接收并处理\n * * 3**\t重定向，需要进一步的操作以完成请求\n * * 4**\t客户端错误，请求包含语法错误或无法完成请求\n * * 5**\t服务器错误，服务器在处理请求的过程中发生了错误\n */\nexport class HttpStateMap {\n  private static _instance: HttpStateMap;\n\n  public static readonly map =\n    \"100\\tContinue\\t继续。客户端应继续其请求\\n\" +\n    \"101\\tSwitching Protocols\\t切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议\\n\" +\n    \"0\\terror\\t详见：https://codeday.me/bug/20170705/34070.html\\n\" +\n    \"200\\tOK\\t请求成功。一般用于GET与POST请求\\n\" +\n    \"201\\tCreated\\t已创建。成功请求并创建了新的资源\\n\" +\n    \"202\\tAccepted\\t已接受。已经接受请求，但未处理完成\\n\" +\n    \"203\\tNon-Authoritative Information\\t非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本\\n\" +\n    \"204\\tNo Content\\t无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档\\n\" +\n    \"205\\tReset Content\\t重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域\\n\" +\n    \"206\\tPartial Content\\t部分内容。服务器成功处理了部分GET请求\\n\" +\n    \"300\\tMultiple Choices\\t多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择\\n\" +\n    \"301\\tMoved Permanently\\t永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替\\n\" +\n    \"302\\tFound\\t临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI\\n\" +\n    \"303\\tSee Other\\t查看其它地址。与301类似。使用GET和POST请求查看\\n\" +\n    \"304\\tNot Modified\\t未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源\\n\" +\n    \"305\\tUse Proxy\\t使用代理。所请求的资源必须通过代理访问\\n\" +\n    \"306\\tUnused\\t已经被废弃的HTTP状态码\\n\" +\n    \"307\\tTemporary Redirect\\t临时重定向。与302类似。使用GET请求重定向\\n\" +\n    \"400\\tBad Request\\t客户端请求的语法错误，服务器无法理解\\n\" +\n    \"401\\tUnauthorized\\t请求要求用户的身份认证\\n\" +\n    \"402\\tPayment Required\\t保留，将来使用\\n\" +\n    \"403\\tForbidden\\t服务器理解请求客户端的请求，但是拒绝执行此请求\\n\" +\n    '404\\tNot Found\\t服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置\"您所请求的资源无法找到\"的个性页面\\n' +\n    \"405\\tMethod Not Allowed\\t客户端请求中的方法被禁止\\n\" +\n    \"406\\tNot Acceptable\\t服务器无法根据客户端请求的内容特性完成请求\\n\" +\n    \"407\\tProxy Authentication Required\\t请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权\\n\" +\n    \"408\\tRequest Time-out\\t服务器等待客户端发送的请求时间过长，超时\\n\" +\n    \"409\\tConflict\\t服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突\\n\" +\n    \"410\\tGone\\t客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置\\n\" +\n    \"411\\tLength Required\\t服务器无法处理客户端发送的不带Content-Length的请求信息\\n\" +\n    \"412\\tPrecondition Failed\\t客户端请求信息的先决条件错误\\n\" +\n    \"413\\tRequest Entity Too Large\\t由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息\\n\" +\n    \"414\\tRequest-URI Too Large\\t请求的URI过长（URI通常为网址），服务器无法处理\\n\" +\n    \"415\\tUnsupported Media Type\\t服务器无法处理请求附带的媒体格式\\n\" +\n    \"416\\tRequested range not satisfiable\\t客户端请求的范围无效\\n\" +\n    \"417\\tExpectation Failed\\t服务器无法满足Expect的请求头信息\\n\" +\n    \"500\\tInternal Server Error\\t服务器内部错误，无法完成请求\\n\" +\n    \"501\\tNot Implemented\\t服务器不支持请求的功能，无法完成请求\\n\" +\n    \"502\\tBad Gateway\\t充当网关或代理的服务器，从远端服务器接收到了一个无效的请求\\n\" +\n    \"503\\tService Unavailable\\t由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中\\n\" +\n    \"504\\tGateway Time-out\\t充当网关或代理的服务器，未及时从远端服务器获取请求\\n\" +\n    \"505\\tHTTP Version not supported\\t服务器不支持请求的HTTP协议的版本，无法完成处理\";\n\n  private data: any;\n\n  public static get instance(): HttpStateMap {\n    if (HttpStateMap._instance == null) {\n      HttpStateMap._instance = new HttpStateMap();\n    }\n    return HttpStateMap._instance;\n  }\n\n  constructor() {\n    var line: Array<string> = HttpStateMap.map.split(\"\\n\");\n    this.data = {};\n    line.forEach(element => {\n      // var vo:HttpInfoVo=new HttpInfoVo();\n      var temp: Array<string> = element.split(\"\\t\");\n      this.data[temp[0]] = temp[1] + \"\\t\" + temp[2];\n    });\n  }\n\n  /**\n   * 通过http状态码，返回中英文信息\n   * @param id\n   */\n  public getErrorInfoById(id: number): void {\n    return this.data[id];\n  }\n}\n\n// export class HttpInfoVo{\n//     public id:number;\n//     public en:string;\n//     public cn:string;\n// }\n","import { Http } from \"./Http\";\n\n/**\n * # HTTP工具包\n * 封装http请求,兼容IE5 和 IE6。\n * ## 使用示例\n * * 快捷调用\n * ```\n * HttpSystem.httpGet(\"www.baidu.com\");\n * HttpSystem.httpPost(\"www.baidu.com\",{name:\"fb\",age:33});\n * ```\n * * 常规调用\n * ```\n * let req = new HttpSystem();\n * req.open(\"baidu.com\", \"get\", {cointype: 8, gameid: GlobalConfig.GAME_ID, group: 1});\n * req.onResult(resultHandler);\n * req.setRequestHeader({\"Content-Type\": \"application/x-www-form-urlencoded\", \"token\": token});\n * req.send();\n * ```\n * * 链式调用\n * ```\n * let req = new HttpSystem();\n * req.open(AppConfig.getInstance().shop_list_URL, \"get\", {cointype: 8, gameid: GlobalConfig.GAME_ID, group: 1}).onResult(resultHandler).setRequestHeader({\"Content-Type\": \"application/x-www-form-urlencoded\", \"token\": token}).send();\n * ```\n * \n * * Promise\n * ```\n * let result = await HttpSystem.httpGet(`/api/m-course?contentId=24`);\n * ```\n * ```\n * HttpSystem.httpPost(\"api/dosomething\",{name:1,age:20}).then(res=>{}).catch(e => false);\n * ```\n * ## HTTP请求方法\n\n * 方法    | 描述\n * --- | ---\n * GET | 请求指定的页面信息，并返回实体主体。\n * HEAD | 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头\n * POST | 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。\n * PUT  | 从客户端向服务器传送的数据取代指定的文档的内容。\n * DELETE | 请求服务器删除指定的页面。\n * CONNECT | HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\n * OPTIONS | 允许客户端查看服务器的性能。\n * TRACE | 回显服务器收到的请求，主要用于测试或诊断。\n *\n * @version 1.0\n */\nexport default class HttpSystem {\n    private static _instance: HttpSystem;\n    private outAdapter: Function;\n\n    public static get instance(): HttpSystem {\n        if (HttpSystem._instance == null) {\n            HttpSystem._instance = new HttpSystem();\n        }\n        return HttpSystem._instance;\n    }\n\n    /**\n     * @param {Function} outAdapter 发生错误的回调\n     * @memberof HttpSystem\n     */\n    public async init(outAdapter: Function): Promise<void> {\n        return new Promise((res) => {\n            this.outAdapter = outAdapter;\n            res();\n        })\n    }\n\n    public release(): void {\n        this.outAdapter = null;\n        HttpSystem._instance = null;\n    }\n    /**\n     * 发送get请求\n     * @param url 地址\n     * @param params url参数\n     */\n    public httpGet(url: string, params?: object, header?: string): Promise<any> {\n        console.log(`httpget:url = ${url}`)\n        return new Promise((resolve, reject) => {\n            let headerJson = { 'Content-Type': 'application/json; charset=utf-8' };\n            if (header && header != \"\") {\n                let json = JSON.parse(header);\n                for (let key in json) {\n                    headerJson[key] = json[key];\n                }\n            }\n            let xhr: Http = new Http();\n            xhr.onComplete(resolve);\n            xhr.onError((error, errInfo, response) => {\n                if (this.outAdapter) {\n                    this.outAdapter(`网络错误 ${error},${url}`, errInfo, response);\n                }\n                reject()\n            });\n            xhr.openGet(Http.getUrl(url, params));\n            xhr.setRequestHeader(headerJson);\n            xhr.send();\n        }).catch(reason => {\n            if (this.outAdapter) {\n                this.outAdapter(reason && reason.message || '网络错误' + url);\n            }\n        })\n    }\n\n    /**\n     * 发送一个post请求\n     * @param url 地址\n     * @param body 包体\n     * @param params url参数\n     */\n    public httpPost(url: string, body?: any, params?: object, header?: string,): Promise<any> {\n        console.log(`httpPost:url = ${Http.getUrl(url, params)}`)\n        return new Promise((resolve, reject) => {\n            let headerJson = { 'Content-Type': 'application/json; charset=utf-8' };\n            if (header && header != \"\") {\n                let json = JSON.parse(header);\n                for (let key in json) {\n                    headerJson[key] = json[key];\n                }\n            }\n\n            let xhr: Http = new Http();\n            xhr.onComplete(resolve);\n            xhr.onError((error, errInfo, response) => {\n                if (this.outAdapter) {\n                    this.outAdapter(`网络错误 ${error},${url}`, errInfo, response);\n                }\n                reject()\n            });\n            xhr.openPost(Http.getUrl(url, params));\n            xhr.setRequestHeader(headerJson);\n            xhr.send(body);\n        }).catch(reason => {\n            if (this.outAdapter) {\n                this.outAdapter(reason && reason.message || '网络错误' + url);\n            }\n        })\n    }\n}","import { HttpStateMap } from \"./HttpState\";\n\nexport class Http {\n    public static readonly GET: string = \"get\";\n    public static readonly POST: string = \"post\";\n\n    private static readonly UNSENT: number = 0; // Client has been created. open() not called yet.\n    private static readonly OPENED: number = 1; // open() has been called.\n    private static readonly HEADERS_RECEIVED: number = 2; // send() has been called, and headers and status are available.\n    private static readonly LOADING: number = 3; // Downloading; responseText holds partial data.\n    private static readonly DONE: number = 4; // The operation is complete.\n\n\n    private xhr: XMLHttpRequest;\n    private _onComplete: Function;\n    private _onError: Function;\n    private method: string;\n    private target: any;\n    private data: any;\n    private url: string;\n\n    public constructor() {\n        try {\n            if (window[\"XMLHttpRequest\"]) {\n                this.xhr = new window[\"XMLHttpRequest\"]();\n            } else {\n                // @ts-ignore\n                this.xhr = new ActiveXObject(\"MSXML2.XMLHTTP\");\n            }\n            this.xhr.timeout = 3000;\n        } catch (e) {\n            console.error(\"Http create error\", e);\n        }\n    }\n\n    /**\n     * 打开连接\n     * @param {string} url 文件在服务器上的位置\n     * @param {string} method 请求的类型，GET 或 POST,默认GET\n     * @param data 数据，对象或字符\n     * @returns {Http}\n     */\n    public open(url: string, method: string = Http.GET, data?: any): Http {\n        this.method = method || \"get\";\n        if (this.method == \"get\" && data) {\n            url = this.spliceUrl(url, data);\n        }\n        this.url = url;\n        this.data = data;\n        this.xhr.open(method, url, true);\n        return this;\n    }\n\n    /**\n     * get方法\n     * @param {string} url 文件在服务器上的位置\n     * @param data 对象或字符\n     * @returns {Http}\n     */\n    public openGet(url: string, data?: any): Http {\n        this.open(url, Http.GET, data);\n        return this;\n    }\n\n    /**\n     * post方法\n     * @param {string} url 文件在服务器上的位置\n     * @param data 对象或字符\n     * @returns {Http}\n     */\n    public openPost(url: string, data?: any): Http {\n        this.open(url, Http.POST, data)\n        return this;\n    }\n\n    /**\n     * 返回的结果，包括错误\n     * @param {Function} callback\n     * @param target this指针\n     * @returns {Http}\n     */\n    public onComplete(callback: Function, target?: any): Http {\n        this.target = target;\n        this._onComplete = callback;\n        return this;\n    }\n\n    /**\n     * 错误回调\n     * @param {Function} callback\n     * @param target this指针\n     * @returns {Http}\n     */\n    public onError(callback: Function, target?: any): Http {\n        this.target = target;\n        this._onError = callback;\n        return this;\n    }\n\n    /**\n     * 将请求发送到服务器。\n     * @param data 可以是对象|字符,仅用于 POST 请求\n     */\n    public send(data?: any): void {\n        data = data || this.data;\n        if (typeof data === \"object\") {\n            try {\n                data = JSON.stringify(data);\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        this.xhr.onreadystatechange = this.onReadyStateChange.bind(this);\n        console.log(`body = ${data}`)\n        this.xhr.send(data);\n    }\n\n    /**\n     * 如果请求已经被发送,则立刻中止请求.\n     */\n    public abort(): void {\n        if (this.xhr) {\n            this.xhr.abort();\n        }\n    }\n\n    /**\n     * 向请求添加 HTTP 头。\n     * @example {token:A1BC,name:guess}\n     * @param data 键值对形式都好分割\n     * @returns {Http}\n     */\n    public setRequestHeader(data?: any): Http {\n        try {\n            for (let key in data) {\n                this.xhr.setRequestHeader(key, data[key]);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n        return this;\n    }\n\n    /**\n     * 返回所有响应头信息(响应头名和值), 如果响应头还没接受,则返回\"\".\n     */\n    public getAllResponseHeaders(): string {\n        if (!this.xhr) {\n            return \"\";\n        }\n        let result: string = this.xhr.getAllResponseHeaders();\n        return result ? result : \"\";\n    }\n\n    public onDestroy(): void {\n        // TODO 清空其他数据\n        this.xhr = null;\n    }\n\n    private spliceUrl(url: string, data: any): string {\n        let dataStr: string = \"\";\n        for (let key in data) {\n            dataStr += key + \"=\" + data[key] + \"&\";\n        }\n        dataStr = dataStr.substr(0, dataStr.length - 1);\n        if (dataStr.length > 2) {\n            url += url.indexOf(\"?\") < 0 ? \"?\" + dataStr : url + dataStr;\n        }\n        return url;\n    }\n\n    private onReadyStateChange(): void {\n        let xhr = this.xhr;\n        if (xhr.readyState == 4) {\n            let ioError = xhr.status >= 400 || xhr.status == 0;\n            let url = this.url;\n            let self = this;\n            if (ioError) {\n                if (this._onError) {\n                    this._onError(this.xhr.status, HttpStateMap.instance.getErrorInfoById(this.xhr.status), JSON.parse(this.xhr.response)); // TODO 返回错误码对应的含义\n                    // this._onError(this.xhr.status, HttpStateMap.instance.getErrorInfoById(this.xhr.status)); //TODO 返回错误码对应的含义\n                }\n            } else {\n                if (this.xhr.readyState == Http.DONE) {\n                    if (this.xhr.status >= 200 && this.xhr.status < 400) {\n                        this._onComplete.call(this.target ? this.target : null, JSON.parse(this.xhr.response));\n                    } else {\n                        this._onComplete.call(this.target ? this.target : null, HttpStateMap.instance.getErrorInfoById(this.xhr.status) // 返回错误码对应的含义\n                        );\n                    }\n                }\n            }\n        }\n    }\n    private static stringifyPrimitive(v: any) {\n        switch (typeof v) {\n            case 'string':\n                return v\n            case 'boolean':\n                return v ? 'true' : 'false'\n            case 'number':\n                return isFinite(v) ? v : ''\n            default:\n                return ''\n        }\n    }\n\n    private static stringify(obj, sep?: string, eq?: string, name?: string) {\n        sep = sep || '&'\n        eq = eq || '='\n        if (obj === null) {\n            obj = undefined\n        }\n\n        if (typeof obj === 'object') {\n            return Object.keys(obj).map(function (k) {\n                let ks = encodeURIComponent(Http.stringifyPrimitive(k)) + eq\n                if (Array.isArray(obj[k])) {\n                    return obj[k].map(function (v) {\n                        return ks + encodeURIComponent(Http.stringifyPrimitive(v))\n                    }).join(sep)\n                } else {\n                    return ks + encodeURIComponent(Http.stringifyPrimitive(obj[k]))\n                }\n            }).join(sep)\n\n        }\n\n        if (!name) { return '' }\n        return encodeURIComponent(Http.stringifyPrimitive(name)) + eq +\n            encodeURIComponent(Http.stringifyPrimitive(obj))\n    };\n\n    public static getUrl(url: string, params?: any) {\n        let s = Http.stringify(params)\n        let sep = url.indexOf('?') > -1 ? '&' : '?'\n        return url + (s ? sep + s : '')\n    }\n}","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class ImageLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络图片资源\r\n        cc.assetManager.loadRemote(path, type, (e, tex: cc.Texture2D) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, new cc.SpriteFrame(tex));\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"ImageLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","import IPlatform from \"./IPlatform\";\n\nexport default class IosAdapter implements IPlatform {\n    public packageName: string = \"CocosHelper\";\n    public isPrintLog: boolean = true;\n    public onGameExit(): void {\n        // console.log(`IosAdapter:onGameExit`)\n        // if (!ifGameExited()) {\n        //     this.callNative(\"InteractCourseResponder\", \"onGameExit\")\n        //     setGameExited(true);\n        // }\n    }\n    public onGameReady(): void {\n        // GameInfo.instance.hasCalledOnGameReady = true;\n        // this.callNative(\"InteractCourseResponder\", \"onGameReady\")\n        cc.log(`getWritablePath():${jsb.fileUtils.getWritablePath()}`)\n    }\n\n    public toast(message: string): void {\n        // jsb.reflection.callStaticMethod(\"CocosHelper\", \"test2WithParm1:andParm2:\", parm1, parm2);\n       jsb.reflection.callStaticMethod(this.packageName, `toast:`, message);\n    }\n\n    callFunction(funcName: string, parm: string, moduleName: string): void {\n        let packagePath = this.packageName;\n        if (moduleName && moduleName != '') {\n            packagePath = moduleName;\n        }\n        jsb.reflection.callStaticMethod(packagePath, `${funcName}:`, parm);\n    }\n\n    callFunctionResult(funcName: string, parm: string, moduleName: string): any {\n        let packagePath = this.packageName;\n        if (moduleName && moduleName != '') {\n            packagePath = moduleName;\n        }\n        let result = jsb.reflection.callStaticMethod(packagePath, `${funcName}:`, parm);\n        return result;\n    }\n}\n","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class JsonLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res: cc.JsonAsset) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"JsonLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","/**\n * 节点类型\n */\nexport class LinkedNode<N> {\n    /** 元素对象本身的值 */\n    public element: N = null;\n    /** 指向前一项 */\n    public previous: LinkedNode<N> = null;\n    /** 指向下一项 */\n    public next: LinkedNode<N>;\n    constructor(element: N) {\n        this.element = element;\n    }\n}\n\n/**\n * 双向链表\n */\nexport default class LinkedList<T> {\n    /** 将数组转化为链表 */\n    public static from<L>(array: L[]) {\n        const { length } = array;\n        const linkedList = new LinkedList(array.shift());\n        linkedList.length = length;\n        array.reduce((previous, current) => {\n            previous.next = new LinkedNode(current);\n            previous.next.previous = previous;\n            return previous.next;\n        }, linkedList.head);\n        return linkedList\n    }\n    /** 头节点 */\n    public head: LinkedNode<T>;\n    /** 链表的长度 */\n    public length: number = 0;\n    constructor(element: T) {\n        this.head = new LinkedNode(element);\n        this.head.next = this.head;\n        this.head.previous = this.head;\n        this.length = 1;\n    }\n\n    /**\n     * @description 用于寻找符合条件的节点，回调函数返回为 true 时，返回对应节点\n     * @param cb 用于寻找的回调函数\n     */\n    public find(cb: (element: LinkedNode<T>) => boolean) {\n        let i;\n        let currentNode = this.head;\n        for (i = 0; i < this.length; i++) {\n            if (cb.call(this, currentNode)) { break; }\n            currentNode = currentNode.next;\n        }\n        return i !== this.length ? currentNode : null;\n    }\n\n\n    /**\n     * @description 在指定节点插入元素\n     * @param newElement 插入元素\n     * @param node 被插入节点\n     */\n    public insert(newElement: T, node: LinkedNode<T>) {\n        const newNode = new LinkedNode(newElement);\n        const previousNode = this.find((n) => n === node);\n        if (previousNode) {\n            const rawNextNode = previousNode.next;\n            previousNode.next = newNode;\n            newNode.previous = previousNode;\n            newNode.next = rawNextNode;\n            rawNextNode.previous = newNode;\n            this.length++;\n        }\n    }\n\n    /**\n     * 删除指定的节点\n     * @param node 要删除的节点\n     */\n    public remove(node: LinkedNode<T>) {\n        const deletedNode = this.find((n) => n === node);\n        if (deletedNode) {\n            if (this.head === deletedNode) {\n                this.head = deletedNode.next;\n            }\n            deletedNode.previous.next = deletedNode.next;\n            deletedNode.next.previous = deletedNode.previous;\n            this.length--;\n        }\n    }\n}","\r\nexport class LoaderObserverParam {\r\n    public url: string;\r\n    public type: typeof cc.Asset;\r\n    public bundle: cc.AssetManager.Bundle;\r\n    public time: number;\r\n    public options: any;\r\n\r\n    public constructor (url: string, type: typeof cc.Asset, bundle: cc.AssetManager.Bundle, time: number, options: any) {\r\n        this.url = url;\r\n        this.type = type;\r\n        this.bundle = bundle;\r\n        this.time = time;\r\n        this.options = options;\r\n    }\r\n}\r\n\r\nexport interface LoaderObserver {\r\n    /**\r\n     * 资源开始加载之前\r\n     * @param {string} url 资源地址\r\n     * @param {cc.Asset} type 资源类型\r\n     */\r\n    beforeLoadRes(param: LoaderObserverParam): void;\r\n\r\n    /**\r\n     * 资源开始加载之前\r\n     * @param {string} url 资源地址\r\n     * @param {cc.Asset} type 资源类型\r\n     * @param {number} time 资源加载时间\r\n     */\r\n    afterLoadRes(param: LoaderObserverParam): void;\r\n\r\n    /**\r\n     * bundle开始加载之前\r\n     * @param {string} url 资源地址\r\n     * @param {cc.Asset} type 资源类型\r\n     */\r\n    beforeLoadBundle(param: LoaderObserverParam): void;\r\n\r\n    /**\r\n     * bundle开始加载之前\r\n     * @param {string} url 资源地址\r\n     * @param {cc.Asset} type 资源类型\r\n     * @param {number} time 资源加载时间\r\n     */\r\n    afterLoadBundle(param: LoaderObserverParam): void;\r\n}","/**\n * 本地存储\n * @version 1.0\n */\nexport class LocalStorageUtils {\n  /**\n   * 移除本地存储\n   * @param {string} key - 要移除的item的索引\n   */\n  public static removeItem(key: string) {\n    localStorage.removeItem(key);\n  }\n\n  /**\n   * 存储Object数据\n   * @param {string} key - 索引\n   * @param {object} value - 内容\n   */\n  public static setObject(key: string, value: any) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n\n  /**\n   * 获取Object数据\n   * @param {string} key - 索引\n   * @returns {object} - 内容\n   */\n  public static getObject(key: string): any {\n    let obj = localStorage.getItem(key);\n    if (obj == \"\") {\n      return null;\n    }\n    return JSON.parse(obj);\n  }\n\n  /**\n   * 存储Bool数据\n   * @param {string} key - 索引\n   * @param {boolean} value - 内容\n   */\n  public static setBool(key: string, value: boolean) {\n    localStorage.setItem(key, value.toString());\n  }\n\n  /**\n   * 获取Bool数据\n   * @param {string} key - 索引\n   * @returns {boolean} - 内容\n   */\n  public static getBool(key: string): boolean {\n    return localStorage.getItem(key) == \"true\" ? true : false;\n  }\n\n  /**\n   * 存储Int数据\n   * @param {string} key - 索引\n   * @param {number} value - 内容\n   */\n  public static setInt(key: string, value: number) {\n    localStorage.setItem(key, value.toString());\n  }\n\n  /**\n   * 获取Int数据\n   * @param {string} key - 索引\n   * @returns {number} - 内容\n   */\n  public static getInt(key: string): number {\n    return Number(localStorage.getItem(key));\n  }\n\n  /**\n   * 存储String数据\n   * @param {string} key - 索引\n   * @param {string} value - 内容\n   */\n  public static setString(key: string, value: string) {\n    localStorage.setItem(key, value);\n  }\n\n  /**\n   * 获取String数据\n   * @param {string} key - 索引\n   * @returns {string} - 内容\n   */\n  public static getString(key: string): string {\n    return localStorage.getItem(key);\n  }\n}\n","import { kit } from \"../../kit\";\nimport ASystem from \"../interface/ASystem\";\n\n/**\n * 日志系统\n * 设计目标主要是作为程序运行的日志，可以输出是控制台或者app本地，当遇到出现问题且没有报错的时候，排查问题的依据\n */\nexport default class LogSystem extends ASystem {\n    private static _instance: LogSystem;\n\n    public isDebug: boolean = true;\n    private gameName: string = \"\";\n    private gameVersion: string = \"\";\n    private outAdapter: Function;\n    private isPrintTime: boolean = false;\n\n    public static get instance(): LogSystem {\n        if (LogSystem._instance == null) {\n            LogSystem._instance = new LogSystem();\n        }\n        return LogSystem._instance;\n    }\n\n    /**\n     * 初始化日志系统\n     * @param {(message: string) => void} [outAdapter] 日志信息输出适配器，输出的字符串已json格式化\n     * @param {string} [gameName] 游戏名称\n     * @param {string} [gameVersion] 游戏版本\n     * @returns {Promise<any>}\n     * @memberof LogSystem\n     */\n    public init(outAdapter?: (message: string) => void, gameName?: string, gameVersion?: string, isPrintTime: boolean = false): Promise<void> {\n        return new Promise((res, rea) => {\n            this.gameName = gameName || \"\";\n            this.gameVersion = gameVersion || \"\";\n            this.outAdapter = outAdapter;\n            this.isPrintTime = isPrintTime;\n            res();\n        })\n    }\n\n    public release(): void {\n        this.outAdapter = null;\n        LogSystem._instance = null;\n    }\n\n    private print(type: string, messages: any): void {\n        // TODO 正式环境关闭复杂日志显示\n        let gameName: string = this.gameName ? \"[\" + this.gameName + \"]\" : '';\n        let gameVersion: string = this.gameName ? \"[\" + this.gameVersion + \"]\" : '';\n        console[type](new Date().toLocaleString() + \" \" + type + \" \" + gameName + \" \" + gameVersion + \"\\t\", messages);\n        if (this && this.outAdapter) {\n            this.outAdapter(new Date().toLocaleString() + type + \" \" + gameName + \" \" + gameVersion + \"\\t\", messages);\n        }\n    }\n\n    private obj2String(messages: any): string {\n        let str = \"\";\n        messages.forEach((element) => {\n            if (typeof messages == \"object\") {\n                str += JSON.stringify(element);\n            } else {\n                str += element;\n            }\n        })\n        return str;\n    }\n\n    public static error(messages): void {\n        kit.system.log.print(\"error\", messages);\n    }\n\n    public static warn(messages): void {\n        kit.system.log.print(\"warn\", messages);\n    }\n\n    /**\n     * 仅debug模式输出log\n     * @static\n     * @param {*} messages\n     * @memberof LogSystem\n     */\n    public static log(messages): void {\n        if (kit.system.log.isDebug) {\n            kit.system.log.print(\"log\", messages);\n        }\n    }\n\n    public static info(messages): void {\n        kit.system.log.print(\"info\", messages);\n    }\n}\n\n// /** 日志序列化组件，存于本地的日志缓存逻辑模块 */\n// export class LogSerializer {\n//     private static _instance: LogSerializer;\n\n//     public static get instanceOrigin(): LogSerializer {\n//         return LogSerializer._instance;\n//     }\n//     public static get instance(): LogSerializer {\n//         if (LogSerializer._instance == null) {\n//             LogSerializer._instance = new LogSerializer();\n//         }\n//         return LogSerializer._instance;\n//     }\n\n//     /** 日志缓存最大条数，超过条数后，最开始的日志将会被抹除 */\n//     public maxLogCount: number = 500;\n//     /** 日志清理结点，当然日志量达到最maxLogCount的一定倍率时，清空到maxLogCount */\n//     public logClearRate: number = 1.8;\n//     /** 日志数组 */\n//     private m_logArray: string[] = [];\n//     /** 日志文件路径 */\n//     private m_logFilePath: string = \"\";\n//     /** 工作状态 */\n//     private m_working: boolean = false;\n//     /**开始记录日志 */\n//     public static getLogFilePath() {\n//         if (cc.sys.isBrowser) {\n//             return \"\";\n//         }\n//         return OSPathManager.cocosPath + \"ccc_runtime_log.txt\"\n//     }\n//     public begin() {\n\n//         if (cc.sys.isBrowser) return;\n//         if (!cc.sys.isNative) {\n//             console.log(`LogSerializer error call begin in not native env.`)\n//             return;\n//         }\n\n//         if (this.m_working) {\n//             console.log(`LogSerializer call begin, but already working.`)\n//             return;\n//         }\n\n//         this.m_working = true;\n\n//         if (!this.m_logArray) {\n//             this.m_logArray = [];\n//         }\n\n//         this.m_logFilePath = LogSerializer.getLogFilePath();\n\n\n//         if (this.m_logFilePath) {\n//             console.log(`LogSerializer begin logfilepath is ${this.m_logFilePath}`)\n//             if (jsb.fileUtils.isFileExist(this.m_logFilePath)) {\n//                 // 认为，已经存储的日志一定是更旧的，因为当前代码处理运行时\n//                 let existLogs: string = jsb.fileUtils.getStringFromFile(this.m_logFilePath);\n//                 if (existLogs) {\n\n//                     // console.log(`LogSerializer begin append content ${existLogs}`)\n//                     this.m_logArray = existLogs.split(\"\\n\").concat(this.m_logArray);\n//                 }\n//             }\n//         }\n//     }\n//     /** 停止记录日志 */\n//     public end() {\n//         if (cc.sys.isBrowser) return;\n//         if (!cc.sys.isNative) {\n//             console.log(`LogSerializer error call end in not native env.`)\n//             return;\n//         }\n\n//         if (!this.m_working) {\n//             // 未调用 begin的情况\n//             this.begin();\n//         }\n\n//         this.flush();\n\n//         this.m_logArray = null;\n//         this.m_working = false;\n//     }\n\n//     public flush() {\n//         if (this.m_logFilePath) {\n//             let target_arr = this.m_logArray;\n//             if (target_arr.length > 0) {\n//                 if (this.m_logArray.length > this.maxLogCount) {\n//                     target_arr = this.m_logArray.slice(this.m_logArray.length - this.maxLogCount, this.m_logArray.length);\n//                 }\n//                 // console.log(`LogSerializer end write to ${this.m_logFilePath} with content ${target_arr.join(\"\\n\")}`)\n//                 jsb.fileUtils.writeStringToFile(target_arr.join(\"\\n\"), this.m_logFilePath);\n//                 // this.m_logArray.splice(0, this.m_logArray.length);\n//             }\n//         }\n//     }\n//     /** 输出一条log */\n//     public log(headStr: string, bodyStr?: string | any): void {\n//         if(!this.m_logArray) {\n//             console.log(`LogSerializer log already released.`)\n//             return;\n//         }\n//         let log_content: string = headStr + \" \" + safeStringify(bodyStr);\n//         // console.log(`LogSerializer add log ${log_content}`)\n//         this.m_logArray.push(log_content);\n//         if (this.m_logArray.length >= this.maxLogCount * this.logClearRate) {\n//             this.m_logArray.splice(0, this.m_logArray.length - this.maxLogCount);\n//         }\n\n//         this.flush();\n//     }\n\n//     public getOutAdapter(): Function {\n//         // 获取输出适配器时，开启日志打印模块\n//         this.begin();\n//         return this.log.bind(this);\n//     }\n\n//     public static reportLocalLogToServer() {\n//         let logFilePath: string = LogSerializer.getLogFilePath();\n//         if (cc.sys.isBrowser) {\n//             console.log(`LogSerializer reportLocalLogToServer error not native`);\n//             return;\n//         }\n//         if (jsb.fileUtils && jsb.fileUtils.isFileExist(logFilePath)) {\n//             let existLogs: string = jsb.fileUtils.getStringFromFile(logFilePath);\n//             if (existLogs) {\n//                 // test open send\n//                 SendLog.forceSend = true;\n//                 SendLog.sendBIPoint(LOG_TYPE_ENUM.RUNTIME_LOG, existLogs);\n//             }\n//         }\n//         else {\n//             console.log(`LogSerializer reportLocalLogToServer error log file not exist ${logFilePath}`)\n//         }\n//     }\n// }","/** 消息体基类 */\nexport class MessageBase {\n    messageApi: string;\n    param: any;\n    showTips: boolean = true; // 请求发生错误是否弹窗\n}","import Telegram from \"./Telegram\";\nimport IEntity from \"../entity/IEntity\";\nimport EntityManager from \"../entity/EntityManager\";\n\n/**\n * 实体消息派发器\n * @author \n */\nexport class MessageDispatcher {\n    private static _instance: MessageDispatcher;\n    private SEND_MSG_IMMEDIATELY: number = 0;\n    private NO_ADDITIONAL_INFO: number = 0;\n    private PriorityQ: TreeSet<Telegram>;\n    private showList: Telegram[];\n\n    public constructor() {\n        this.PriorityQ = new TreeSet<Telegram>((a, b) => { return a - b });\n        this.showList = new Array<Telegram>();\n    }\n\n    public static get instance(): MessageDispatcher {\n        if (this._instance == null) {\n            this._instance = new MessageDispatcher();\n        }\n        return this._instance;\n    }\n\n    /**\n     * 设置用作延迟消息的容器由于自动分类和避免的好处重复的。\n     * 消息按他们的调度时间进行排序。\n     */\n\n\n    /**\n     * 这种方法是通过向窗口发送消息或dispatchdelayedmessages利用。\n     * 此方法调用接收的消息处理成员函数实体，空，与新创建的电报\n     */\n    public Discharge(pReceiver: IEntity, telegram: Telegram): void {\n        this.showList.push(telegram);\n        if (!pReceiver.stateMachine.HandleMessage(telegram)) {\n            // console.log(\"消息被处理,Receiver：\" + EntityManager.instance.GetEntityFromID(telegram.Receiver).property.name);\n        }\n    }\n\n    public get showListData(): Telegram[] {\n        return this.showList;\n    }\n\n    /**\n     * send a message to another agent. Receiving agent is referenced by ID.\n     * 发送消息到另一个代理。接收代理是由身份证引用。\n     */\n    public DispatchMessage(sender: string, receiver: string, msg: number, info: any = null, delay: number = 0): void {\n        //        View.instance.addText(BACKGROUND_RED | FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE);\n        let pSender: IEntity = EntityManager.instance.getEntityFromID(sender);\n        let pReceiver: IEntity = EntityManager.instance.getEntityFromID(receiver);\n        if (pReceiver == null) {\n            console.warn(\"\\nWarning! No Receiver with ID of \" + receiver + \" found\");\n            return;\n        }\n        // create the telegram\n        let telegram: Telegram = new Telegram(0, sender, receiver, msg, info);\n        // if there is no delay, route telegram immediately\n        if (delay <= 0.0) {\n            this.Discharge(pReceiver, telegram);\n        } else {\n            telegram.DispatchTime = Date.now();\n            this.PriorityQ.add(telegram);\n        }\n    }\n\n    /**\n     * 发送任何延迟的消息。这种方法被称为每一次通过\n     * 主游戏循环。\n     */\n    public DispatchDelayedMessages(): void {\n        while ((!this.PriorityQ.isEmpty) && (this.PriorityQ.first.DispatchTime <= Date.now()) && (this.PriorityQ.first.DispatchTime > 0)) {\n            let telegram: Telegram = this.PriorityQ.first;\n            let pReceiver: IEntity = EntityManager.instance.getEntityFromID(telegram.Receiver);\n\n            this.Discharge(pReceiver, telegram);\n            this.PriorityQ.remove(this.PriorityQ.first);\n        }\n    }\n\n    public DispatchSimpleMessage(sender: IEntity, receiver: IEntity): void {\n        let pSender: IEntity = sender;\n        let pReceiver: IEntity = receiver;\n        if (pReceiver == null) {\n            console.warn(\"\\nWarning! No Receiver with ID of \" + receiver + \" found\");\n            return;\n        }\n        let telegram: Telegram = new Telegram(0, pSender.sid, receiver.sid, 0, null);\n        this.Discharge(pReceiver, telegram);\n\n    }\n}\n\n// 简单版TreeSet\nexport class TreeSet<K> extends Set {\n    public first: K;\n\n    private sortFun: Function;\n\n    constructor(sort: Function) {\n        super();\n        this.sortFun = sort;\n    }\n\n    public add(data: K): any {\n        return super.add(data);\n    }\n\n    public remove(data: K): boolean {\n        return this.delete(data);\n    }\n\n    public get isEmpty(): boolean {\n        return this.size === 0;\n    }\n\n}","/**\n * \n */\nexport class MessageType {\n\tpublic constructor() {\n\t}\n}\n","import { MessageBase } from \"./MessageBase\";\nimport NetHelper from \"./NetHelper\";\nconst {ccclass} = cc._decorator;\n\n/**\n * model基类\n */\n@ccclass\nexport default class ModelBase {\n\n    private cbMap: Map<string, (msg) => void> = new Map();\n\n    /** 子类重写 */\n    public init() {\n\n    }\n\n    public sendMessage (message: MessageBase) {\n        this.regiestReponse(message);\n        NetHelper.sendMessage(message);\n    }\n\n    public sendMessageWithOutToken (message: MessageBase) {\n        this.regiestReponse(message);\n        NetHelper.sendMessageWithOutToken(message);\n    }\n\n    public registerCallBack(messageBase: MessageBase, callBack: (msg) => void) {\n        this.cbMap.set(messageBase.messageApi, callBack);\n    }\n\n    private regiestReponse (message: MessageBase) {\n        NetHelper.registCb(message.messageApi, this.responseMessage.bind(this));\n    }\n\n    public responseMessage(api: string, msg: any) {\n        let cb = this.cbMap.get(api);\n        if (cb) {\n            cb(msg);\n        }\n    }\n\n    public clear () {\n        this.cbMap = new Map();\n    }\n}\n","import { LocalStorageUtils } from \"../utils/LocalStorageUtils\";\nimport ModelBase from \"./ModelBase\";\nimport NativeInfo from \"./NativeInfo\";\nimport NetHelper from \"./NetHelper\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ModelManager {\n    private static _instance: ModelManager = null;\n    public static get instance() {\n        if (!ModelManager._instance) {\n            ModelManager._instance = new ModelManager();\n        }\n        return ModelManager._instance;\n    }\n\n    /** token */\n    private userToken: string;\n    public set UserToken(value: string) {\n        this.userToken = value;\n    }\n    public get UserToken(): string {\n        return this.userToken;\n    }\n\n    // 手机信息\n    private generateInfo: any;\n    public get phoneInfo(): any {\n        return this.generateInfo;\n    }\n    // 时间戳\n    private _timestamp: number;\n    public get timestamp() {\n        return this._timestamp;\n    }\n\n    private _modelList: Map<any, any> = new Map();\n\n    public init() {\n        NetHelper.init();\n        this.generateInfo = NativeInfo.generateInfo();\n        this._timestamp = NativeInfo.currentTimeStamp();\n        this.userToken = LocalStorageUtils.getObject(\"USER_TOKEN\") || \"\";\n\n    }\n\n    public registerModel(model: { new(): ModelBase }): void {\n        let key = model;\n        if (this._modelList.get(key)) {\n        } else {\n            let m = new model();\n            m.init();\n            this._modelList.set(key, m);\n        }\n    }\n\n    /**\n     * 获取model对象\n     */\n    public getModel<T extends ModelBase>(model: new () => T): T {\n        let key = model;\n\n        if (!this._modelList.has(key)) {\n            this.registerModel(model);\n        }\n        return this._modelList.get(key);\n    }\n\n    public removeAllModel() {\n        for (let key in this._modelList) {\n            let model: ModelBase = this._modelList[key];\n            model.clear();\n            this._modelList.delete(key);\n        }\n        this._modelList.clear();\n    }\n\n    /** 清理所有model */\n    public clearAllModel(): void {\n        let keyList = Array.from(this._modelList.keys());\n        for (let key of keyList) {\n            let model: ModelBase = this._modelList.get(key);\n            if (model) {\n                model.clear();\n            }\n        }\n    }\n\n    /** 重新初始化所有model */\n    public reInitAllModel(): void {\n        let keyList = Array.from(this._modelList.keys());\n        for (let key of keyList) {\n            let model: ModelBase = this._modelList.get(key);\n            if (model) {\n                model.init();\n            }\n        }\n    }\n}\n","import LogSystem from \"../system/log/LogSystem\";\n\n/**\n * 性能监控工具\n * @version 1.0\n */\nexport class MonitorUtils {\n  private static showData: any = {};\n  private static elem: HTMLElement = null;\n\n  public static init(): void {\n    this.fps();\n    this.elem = document.createElement(\"monitor\");\n    this.elem.setAttribute(\"width\", \"200\");\n    this.elem.setAttribute(\"height\", \"400\");\n    this.elem.style.fontSize = \"10px\";\n    document.body.appendChild(this.elem);\n    setInterval(() => {\n      this.performance();\n      this.elem.innerHTML = this.getInfo();\n    }, 1000);\n  }\n\n  /** 当前页面FPS */\n  private static fps(): void {\n    const times = []; // 存储当前的时间数组\n    let fps: number = 0;\n    function refreshLoop() {\n      window.requestAnimationFrame(() => {\n        const now = (performance || Date).now();\n        while (times.length > 0 && times[0] <= now - 1000) {\n          times.shift(); // 去掉1秒外的时间\n        }\n        times.push(now);\n        fps = times.length;\n        refreshLoop();\n        MonitorUtils.showData[\"FPS\"] = fps;\n      });\n    }\n    refreshLoop();\n  }\n\n  /**\n   * performance 信息简单计算出网页性能数据\n   */\n  private static performance(): void {\n    let performance =\n      window[\"performance\"] || window[\"msPerformance\"] || window[\"webkitPerformance\"];\n\n    if (!performance) {\n      // 当前浏览器不支持\n      // LogSystem.ins.warn(\"你的浏览器不支持 performance 接口\");\n      return;\n    }\n    let m = performance.memory;\n    this.showData[\"内存大小限制\"] = (m.jsHeapSizeLimit / 1048576).toFixed(2) + \"MB\";\n    this.showData[\"可使用内存\"] = (m.totalJSHeapSize / 1048576).toFixed(2) + \"MB\";\n    this.showData[\"占用内存\"] = (m.usedJSHeapSize / 1048576).toFixed(2) + \"MB\";\n\n    let t = performance.timing;\n    this.showData[\"白屏耗时\"] = t.responseStart - t.navigationStart + \"ms\";\n    this.showData[\"DNS查询耗时\"] = t.domainLookupEnd - t.domainLookupStart + \"ms\";\n    this.showData[\"HTTP请求耗时\"] = t.responseEnd - t.requestStart + \"ms\";\n    this.showData[\"TCP链接耗时\"] = t.connectEnd - t.connectStart + \"ms\";\n    this.showData[\"load事件耗时\"] = t.loadEventEnd - t.loadEventStart + \"ms\";\n    this.showData[\"onload回调函数执行的时间\"] = t.loadEventEnd - t.navigationStart + \"ms\";\n\n    let dataStr: string = \"\";\n    for (let key in this.showData) {\n      dataStr += key + \": \" + this.showData[key] + \"\\n\";\n    }\n    // LogSystem.ins.info(\"Performance: \\n\" + dataStr);\n  }\n\n  private static getInfo(): string {\n    let dataStr: string = \"\";\n    for (let key in this.showData) {\n      dataStr += key + \": \" + this.showData[key] + \"</br>\";\n    }\n    return dataStr;\n  }\n}\n","import PlatformSystem from \"../framework/platform/PlatformSystem\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class NativeInfo {\n\n    private static moduleName = PlatformSystem.instance.isAndroid ? 'NativeInterface' : 'CocosHelper';\n\n    public static generateInfo(): GenerateInfo | any {\n        if (PlatformSystem.instance.isBrowser) {\n            return {\n                device_uuid: \"lingoChineseAi\"\n            }\n        }\n        let adapter = PlatformSystem.instance.adapter;\n        let result = adapter.callFunctionResult(\"generateCommNode\", \"\", NativeInfo.moduleName);\n        return result;\n    }\n\n    public static currentTimeStamp(): number {\n        if (PlatformSystem.instance.isBrowser) {\n            return (new Date()).getTime();\n        }\n        let adapter = PlatformSystem.instance.adapter;\n        let result = adapter.callFunctionResult(\"currentTimeStamp\", \"\", NativeInfo.moduleName);\n        return result;\n    }\n\n    public static getNetworkStatus(): string {\n        if (PlatformSystem.instance.isBrowser) {\n            return NetworkType.NETWORK_WIFI;\n        }\n        let adapter = PlatformSystem.instance.adapter;\n        let result = adapter.callFunctionResult(\"getNetworkStatus\", \"\", NativeInfo.moduleName);\n        return result;\n    }\n}\n\nexport class GenerateInfo {\n    public net_type: string;\n    public device_uuid: string;\n    public app_channel: string;\n    public device_brand: string;\n    public width: string;\n    public height: string;\n    public package_name: string;\n    public loc_latlng: string;\n    public eTz: string;\n    public os_ver: string;\n    public app_ver: string;\n    public os_type: string;\n    public device_model: string;\n}\nexport enum NetworkType {\n    NETWORK_WIFI = \"NETWORK_WIFI\",\n    NETWORK_5G = \"NETWORK_5G\",\n    NETWORK_4G = \"NETWORK_4G\",\n    NETWORK_3G = \"NETWORK_3G\",\n    NETWORK_2G = \"NETWORK_2G\",\n    NETWORK_UNKNOWN = \"NETWORK_UNKNOWN\",\n    NETWORK_NO = \"NETWORK_NO\" // 无网络\n}","import Events from \"../events/events\";\nimport PopupManager from \"../manager/popupManager.ts/PopupManager\";\nimport { commonTipsOptions } from \"../structure/ClientModuleInterface\";\nimport EventSystem from \"../system/event/EventSystem\";\nimport HttpSystem from \"../system/net/http/HttpSystem\";\nimport { MessageBase } from \"./MessageBase\";\nimport ModelManager from \"./ModelManager\";\nimport NativeInfo, { NetworkType } from \"./NativeInfo\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class NetHelper {\n\n    private static cbMap: Map<string, (api: string, msg: MessageBase) => void> = new Map();\n    private static currentMessage: MessageBase;\n\n    public static init() {\n        HttpSystem.instance.init(this.onError);\n    }\n\n    public static registCb (message: string, callBack: (api, msg) => void) {\n        NetHelper.cbMap.set(message, callBack);\n    }\n\n    public static sendMessage(message: MessageBase) {\n        NetHelper.currentMessage = message;\n        let url = this.formatUrl(message.messageApi);\n        let header = { \"timestamp\": ModelManager.instance.timestamp, \"phoneInfo\": ModelManager.instance.phoneInfo, \"Authorization\": `Bearer ${ModelManager.instance.UserToken}` };\n        //let header =  `{\"timestamp\": ${ModelManager.instance.timestamp}, \"phoneInfo\": ${ModelManager.instance.phoneInfo}, \"Authorization\": \"Bearer ${ModelManager.instance.UserToken}\"}`\n        HttpSystem.instance.httpPost(url, message.param, null, JSON.stringify(header))\n            .then(msg => {\n                cc.log(\"请求返回\", msg);\n                if (!msg || msg.code != 200) {\n                    NetHelper.onError(\"请求错误\", msg, msg);\n                }\n                NetHelper.dispatcher(message.messageApi, msg);\n            })\n    }\n\n    public static sendMessageWithOutToken(message: MessageBase) {\n        let url = this.formatUrl(message.messageApi);\n        let header = { \"timestamp\": ModelManager.instance.timestamp, \"phoneInfo\": ModelManager.instance.phoneInfo };\n        NetHelper.currentMessage = message;\n        NetHelper.currentMessage[\"noHeader\"] = true;\n        //let header = `{\"timestamp\": ${ModelManager.instance.timestamp}, \"phoneInfo\": ${ModelManager.instance.phoneInfo}}`\n        HttpSystem.instance.httpPost(url, message.param, null, JSON.stringify(header))\n            .then(msg => {\n                if (!msg || msg.code != 200) {\n                    NetHelper.onError(\"请求错误\", msg, msg);\n                }\n                NetHelper.dispatcher(message.messageApi, msg);\n            })\n    }\n\n    public static dispatcher(api: string, msg: any) {\n        let cb = NetHelper.cbMap.get(api);\n        if (cb) { \n            cb(api, msg);\n            NetHelper.cbMap.delete(api);\n         }\n    }\n\n    public static onError(states, message, response) {\n        console.log(\"nethelper onError  -------\");\n        if (!response) {\n            return\n        }\n        cc.log(response);\n\n        let netWork = NativeInfo.getNetworkStatus();\n        // 无网络\n        if (netWork == NetworkType.NETWORK_NO) {\n            // --TODO 无网络弹窗\n            let params:commonTipsOptions = {\n                tipsConfig: \"NO_NETWORK\",\n                confirmCallback:()=>{\n                    if (NetHelper.currentMessage[\"noHeader\"]) {\n                        NetHelper.sendMessageWithOutToken(NetHelper.currentMessage)\n                        return;\n                    } \n                    NetHelper.sendMessage(NetHelper.currentMessage)\n                },\n                cancelCallback:()=>{\n                    EventSystem.emit(\"back\");\n                }\n            }\n            EventSystem.emit(Events.SHOW_COMMON_TIPS_POP, params);\n            return;\n        }\n        if (response && response.code == 10009) {\n            // ————TODO token失效 重新登陆\n\n            return;\n        }\n\n        if (NetHelper.currentMessage.showTips) {\n            let params:commonTipsOptions = {\n                tipsConfig: \"NO_NETWORK\",\n                confirmCallback:()=>{\n                    if (NetHelper.currentMessage[\"noHeader\"]) {\n                        NetHelper.sendMessageWithOutToken(NetHelper.currentMessage)\n                        return;\n                    } \n                },\n                cancelCallback:()=>{\n                    EventSystem.emit(\"back\");\n                }\n            }\n            EventSystem.emit(Events.SHOW_COMMON_TIPS_POP, params);\n        }\n\n        cc.warn(\"网络请求错误\", message, response)\n    }\n\n    public static formatUrl(api: string): string {\n        return `${Test_HostUrl}${api}`;\n    }\n}\n\n\nexport const Test_HostUrl = \"https://test235-cnapi.lingo-ace.com\";\n","/**\n * 数值计算工具\n * @version 1.0\n */\nexport class NumberUtils {\n  /**\n   * random 适用于整数\n   * @param {Number} lower\n   * @param {Number} upper\n   * @return {number}\n   */\n  public static random(lower: number, upper: number): number {\n    var range: number = upper - lower + 1;\n    return Math.floor(Math.random() * range) + lower;\n  }\n\n  /**\n   * randomf 适用于浮点数\n   * @param {Number} lower\n   * @param {Number} upper\n   * @return {number}\n   */\n  public static randomf(lower: number, upper: number): number {\n    return Math.random() * (upper - lower) + lower;\n  }\n  /**\n   * 减法\n   * @param {number} arg1\n   * @param {number} arg2\n   * @returns {number}\n   */\n  public static floatSub(arg1: number, arg2: number): number {\n    var r1, r2, m, n;\n    try {\n      r1 = arg1.toString().split(\".\")[1].length;\n    } catch (e) {\n      r1 = 0;\n    }\n    try {\n      r2 = arg2.toString().split(\".\")[1].length;\n    } catch (e) {\n      r2 = 0;\n    }\n    m = Math.pow(10, Math.max(r1, r2));\n    //动态控制精度长度\n    n = r1 >= r2 ? r1 : r2;\n    var result = (arg1 * m - arg2 * m) / m;\n    var tmp = result.toFixed(n);\n    return parseFloat(tmp);\n  }\n\n  /**\n   * 乘法\n   * @param {number} arg1\n   * @param {number} arg2\n   * @returns {number}\n   */\n  public static floatMul(arg1: number, arg2: number): number {\n    var m = 0,\n      s1 = arg1.toString(),\n      s2 = arg2.toString();\n    try {\n      m += s1.split(\".\")[1].length;\n    } catch (e) {}\n    try {\n      m += s2.split(\".\")[1].length;\n    } catch (e) {}\n    return (Number(s1.replace(\".\", \"\")) * Number(s2.replace(\".\", \"\"))) / Math.pow(10, m);\n  }\n\n  /**\n   * 除法\n   * @param {number} arg1\n   * @param {number} arg2\n   * @returns {number}\n   */\n  public static floatDiv(arg1: number, arg2: number): number {\n    var t1 = 0,\n      t2 = 0,\n      r1,\n      r2;\n    try {\n      t1 = arg1.toString().split(\".\")[1].length;\n    } catch (e) {}\n    try {\n      t2 = arg2.toString().split(\".\")[1].length;\n    } catch (e) {}\n    r1 = Number(arg1.toString().replace(\".\", \"\"));\n\n    r2 = Number(arg2.toString().replace(\".\", \"\"));\n    return (r1 / r2) * Math.pow(10, t2 - t1);\n  }\n\n  /**\n   * 大于1000转成1k，精确到小数点后一位\n   * @param {number} arg1\n   * @returns {string}\n   */\n  public static floatTok(arg1: number): string {\n    if (arg1 < 1000) {\n      return arg1.toString();\n    } else {\n      // 整数位 向下取整\n      var t1 = Math.floor(arg1 / 1000);\n      // 小数位 向下取整\n      var t2 = Math.floor((arg1 % 1000) / 100);\n      if (t2 > 0) {\n        return t1 + \".\" + t2 + \"k\";\n      }\n      return t1 + \"k\";\n    }\n  }\n\n  /**\n   * 两点间向量长度与最大向量长度百分比系数\n   * @param arg1 两点间x轴长度\n   * @param arg2 两点间y轴长度\n   * @param arg3 最小系数\n   * @param arg4 最大向量长度\n   */\n  public static floatSqrt(arg1: number, arg2: number, arg3: number, arg4: number): number {\n    var len: number = Math.sqrt(arg1 * arg1 + arg2 * arg2);\n    var mul: number = arg3 + arg4 / len;\n    return mul;\n  }\n}\n","export class ParseTemplateUtils{\n    public static parseSrt(srtText: string) {\n        let data: any[] =[]\n        function ToSeconds(t) {\n            var s = 0.0;\n            if (t) {\n              var p = t.split(\":\");\n              for (let i = 0; i < p.length; i++) {\n                s = s * 60 + parseFloat(p[i].replace(\",\", \".\"));\n              }\n            }\n            return s;\n        }\n        let json = srtText\n        json.split(/\\n\\s\\n/)\n        .filter(item => item != \"\")\n        .map((item, index) => {\n        let textItem = item.split(/\\n/);\n        data.push({\n            index: index,\n            sort: textItem[0],\n            text: textItem[2],\n            translate: textItem[3],\n            startTime: ToSeconds(textItem[1].split(\" --> \")[0]),\n            endTime:  ToSeconds(textItem[1].split(\" --> \")[1]),\n            timeLine: textItem[1],\n            isShow: false,\n          })\n        });\n        return data\n    }\n}","import AndroidAdapter from \"./AndroidAdapter\";\nimport IosAdapter from \"./IosAdapter\";\nimport WebAdapter from \"./WebAdapter\";\nimport IPlatform from \"./IPlatform\";\nimport ASystem from \"../../system/interface/ASystem\";\nimport DebuggerAdapter from \"./DebuggerAdapter\";\n\n/**\n * 平台适配系统\n * @export\n * @class PlatformSystem\n * @extends {ASystem}\n */\nexport default class PlatformSystem extends ASystem {\n    private static _instance: PlatformSystem;\n\n    public adapter: IPlatform;\n\n    public get isBrowser(): boolean {\n        return cc.sys.isBrowser;\n    }\n\n    public get isWXBrowser(): boolean {\n        return this.isBrowser && cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT;\n    }\n\n    public get isSafariBrowser(): boolean {\n        return this.isBrowser && cc.sys.browserType === cc.sys.BROWSER_TYPE_SAFARI;\n    }\n\n    public get isNative(): boolean {\n        return cc.sys.isNative;\n    }\n\n    public get isDebug(): boolean {\n        return this.adapter instanceof DebuggerAdapter;\n    }\n\n    /**\n     * 是否是微信小游戏\n     */\n    public get isWeChat(): boolean {\n        return cc.sys.platform === cc.sys.WECHAT_GAME;\n    }\n\n    public get isAndroid(): boolean {\n        return cc.sys.os === cc.sys.OS_ANDROID;\n    }\n\n    public get isIOS(): boolean {\n        return cc.sys.os === cc.sys.OS_IOS;\n    }\n\n    public async init(...args: any[]): Promise<any> {\n        if (this.isWeChat) {\n            // this.adapter = new WXLittleGameAdapter();\n        }\n        else if (this.isBrowser) {\n            if (window.location.href.indexOf('localhost:') > -1) {\n                this.adapter = new DebuggerAdapter();\n            } else {\n                this.adapter = new WebAdapter();\n            }\n        }\n        else if (this.isNative) {\n            if (this.isAndroid) {\n                this.adapter = new AndroidAdapter();\n            } else if (this.isIOS) {\n                this.adapter = new IosAdapter();\n            }\n        }\n        return Promise.resolve();\n    }\n\n    public release(): void {\n        this.adapter = null;\n        PlatformSystem._instance = null;\n    }\n\n    public static get instance(): PlatformSystem {\n        if (PlatformSystem._instance == null) {\n            PlatformSystem._instance = new PlatformSystem();\n        }\n        return PlatformSystem._instance;\n    }\n}","/**\n * 缓存池\n * @version 1.0\n */\n\nimport LogSystem from \"../system/log/LogSystem\";\n\nexport class PoolUtils {\n  /**\n   * 缓存池数组\n   */\n  private static poolArray: any = {};\n  /**\n   * 类缓存数组\n   */\n  private static classArray: Array<any> = [];\n\n  /**\n   * 初始化缓存池\n   * @param type 类型\n   * @param className 类名\n   * @param num 初始化数量\n   */\n  public static initPool(type: string, className: any, num: number): void {\n    if (this.poolArray[type] == null) {\n      this.poolArray[type] = new Array();\n    }\n    this.classArray[type] = className;\n    for (let i = 0; i < num; i++) {\n      let object = new className();\n      this.poolArray[type].push(object);\n    }\n    LogSystem.log(\"初始化\" + type + \"数量：\" + this.poolArray[type].length);\n  }\n  /**\n   * 获取缓存池对象\n   * @param type 类型\n   */\n  public static getPool(type: string): any {\n    if (this.poolArray[type].length > 0) {\n      let object = this.poolArray[type].shift();\n      // LogSystem.ins.log(\"获取\" + type + \"缓存池对象，剩余数量：\" + this.poolArray[type].length);\n      return object;\n    } else {\n      // LogSystem.ins.log(type + \"缓存池对象剩余不足，剩余数量：\" + this.poolArray[type].length);\n      return new this.classArray[type]();\n    }\n  }\n  /**\n   * 放入缓存池对象\n   * @param type 类型\n   * @param object 需要缓存的对象\n   */\n  public static putPool(type: string, object: any): void {\n    if (object) {\n      // object.reset();\n      this.poolArray[type].push(object);\n      // LogSystem.ins.log(\"放入\" + type + \"缓存池对象，剩余数量：\" + this.poolArray[type].length);\n    }\n  }\n\n  /**\n   * 清理单类型\n   * @param type 类型\n   */\n  public static clear(type: string): void {\n    while (this.poolArray[type] && this.poolArray[type].length > 0) {\n      let object = this.poolArray[type].shift();\n      object.parent = null;\n      // object.destroy();\n    }\n    // LogSystem.ins.log(\"清理后\" + type + \"数量：\" + this.poolArray[type].length);\n  }\n\n  /**\n   * 清理所有\n   */\n  public static clearAll(): void {\n    if (this.poolArray) {\n      for (const key in this.poolArray) {\n        if (this.poolArray.hasOwnProperty(key)) {\n          let pool = this.poolArray[key];\n          while (pool && pool.length > 0) {\n            let object = pool.shift();\n            object.parent = null;\n            // object.destroy();\n          }\n        }\n      }\n    }\n    this.poolArray = {};\n    this.classArray = [];\n  }\n}\n","const { ccclass, property } = cc._decorator;\n\n/**\n * 弹窗基类\n * @see PopupBase.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/components/popups/PopupBase.ts\n * @see PopupManager.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/core/PopupManager.ts\n * @version 20210409\n */\n@ccclass\nexport default class PopupBase<Options = any> extends cc.Component {\n\n    @property({ type: cc.Node, tooltip: CC_DEV && '背景遮罩' })\n    public background: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: CC_DEV && '弹窗主体' })\n    public main: cc.Node = null;\n\n    /** 展示/隐藏动画的时长 */\n    public animDuration: number = 0.3;\n\n    /** 用于拦截点击的节点 */\n    protected blocker: cc.Node = null;\n\n    /** 弹窗选项 */\n    protected options: Options = null;\n\n    /**\n     * 展示弹窗\n     * @param options 弹窗选项\n     * @param duration 动画时长\n     */\n    public show(options?: Options, duration: number = this.animDuration) {\n        return new Promise<void>(res => {\n            // 储存选项\n            this.options = options;\n            // 初始化节点\n            const background = this.background;\n            const main = this.main;\n            this.node.active = true;\n            background.active = true;\n            background.opacity = 0;\n            main.active = true;\n            main.scale = 0.5;\n            main.opacity = 0;\n            // 初始化\n            this.init(this.options);\n            // 更新样式\n            this.updateDisplay(this.options);\n            // 播放背景遮罩动画\n            cc.tween(background)\n                .to(duration * 0.8, { opacity: 200 })\n                .start();\n            // 播放弹窗主体动画\n            cc.tween(main)\n                .to(duration, { scale: 1, opacity: 255 }, { easing: 'backOut' })\n                .call(() => {\n                    // 弹窗已完全展示\n                    this.onShow && this.onShow();\n                    // Done\n                    res();\n                })\n                .start();\n        });\n    }\n\n    /**\n     * 隐藏弹窗\n     * @param suspended 是否被挂起\n     * @param duration 动画时长\n     */\n    public hide(suspended: boolean = false, duration: number = this.animDuration) {\n        return new Promise<void>(res => {\n            const node = this.node;\n            // 动画时长不为 0 时拦截点击事件（避免误操作）\n            if (duration !== 0) {\n                let blocker = this.blocker;\n                if (!blocker) {\n                    blocker = this.blocker = new cc.Node('blocker');\n                    blocker.addComponent(cc.BlockInputEvents);\n                    blocker.setParent(node);\n                    blocker.setContentSize(node.getContentSize());\n                }\n                blocker.active = true;\n            }\n            // 播放背景遮罩动画\n            cc.tween(this.background)\n                .delay(duration * 0.2)\n                .to(duration * 0.8, { opacity: 0 })\n                .start();\n            // 播放弹窗主体动画\n            cc.tween(this.main)\n                .to(duration, { scale: 0.5, opacity: 0 }, { easing: 'backIn' })\n                .call(() => {\n                    // 关闭拦截\n                    this.blocker && (this.blocker.active = false);\n                    // 关闭节点\n                    node.active = false;\n                    // 弹窗已完全隐藏（动画完毕）\n                    this.onHide && this.onHide(suspended);\n                    // Done\n                    res();\n                    // 弹窗完成回调\n                    this.finishCallback && this.finishCallback(suspended);\n                })\n                .start();\n        });\n    }\n\n    /**\n     * 初始化（派生类请重写此函数以实现自定义逻辑）\n     */\n    protected init(options: Options) { }\n\n    /**\n     * 更新样式（派生类请重写此函数以实现自定义样式）\n     * @param options 弹窗选项\n     */\n    protected updateDisplay(options: Options) { }\n\n    /**\n     * 弹窗已完全展示（派生类请重写此函数以实现自定义逻辑）\n     */\n    protected onShow() { }\n\n    /**\n     * 弹窗已完全隐藏（派生类请重写此函数以实现自定义逻辑）\n     * @param suspended 是否被挂起\n     */\n    protected onHide(suspended: boolean) { }\n\n    /**\n     * 弹窗流程结束回调（注意：该回调为 PopupManager 专用，重写 hide 函数时记得调用该回调）\n     */\n    protected finishCallback: (suspended: boolean) => void = null;\n\n    /**\n     * 设置弹窗完成回调（该回调为 PopupManager 专用）\n     * @param callback 回调\n     */\n    public setFinishCallback(callback: (suspended: boolean) => void) {\n        this.finishCallback = callback;\n    }\n\n}\n","import PopupBase from \"./PopupBase\";\r\n\r\n/** 弹窗缓存模式 */\r\nexport enum PopupCacheMode {\r\n    /** 一次性的（立即销毁节点，预制体资源随即释放） */\r\n    Once = 1,\r\n    /** 正常的（立即销毁节点，但是缓存预制体资源） */\r\n    Normal,\r\n    /** 频繁的（只关闭节点，且缓存预制体资源） */\r\n    Frequent\r\n}\r\n\r\n/** 弹窗请求结果 */\r\nexport enum PopupShowResult {\r\n    /** 展示成功（已关闭） */\r\n    Done = 1,\r\n    /** 展示失败（加载失败） */\r\n    Failed,\r\n    /** 等待中（已加入等待队列） */\r\n    Waiting\r\n}\r\n\r\n/**\r\n * 弹窗管理器\r\n * @see PopupManager.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/core/PopupManager.ts\r\n * @see PopupBase.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/components/popups/PopupBase.ts\r\n * @version 20210524\r\n */\r\nexport default class PopupManager {\r\n\r\n    /** 预制体缓存 */\r\n    public static get prefabCache() { return this._prefabCache; }\r\n    private static _prefabCache: Map<string, cc.Prefab> = new Map<string, cc.Prefab>();\r\n\r\n    /** 节点缓存 */\r\n    public static get nodeCache() { return this._nodeCache; }\r\n    private static _nodeCache: Map<string, cc.Node> = new Map<string, cc.Node>();\r\n\r\n    /** 当前弹窗请求 */\r\n    public static get current() { return this._current; }\r\n    private static _current: PopupRequest = null;\r\n\r\n    /** 等待队列 */\r\n    public static get queue() { return this._queue; }\r\n    private static _queue: PopupRequest[] = [];\r\n\r\n    /** 被挂起的弹窗队列 */\r\n    public static get suspended() { return this._suspended; }\r\n    private static _suspended: PopupRequest[] = [];\r\n\r\n    /** 锁定状态 */\r\n    private static locked: boolean = false;\r\n\r\n    /** 用于存放弹窗节点的容器节点（不设置则默认为当前 Canvas） */\r\n    public static container: cc.Node = null;\r\n\r\n    /** 连续展示弹窗的时间间隔（秒） */\r\n    public static interval: number = 0.05;\r\n\r\n    /** 弹窗缓存模式 */\r\n    public static get CacheMode() { return PopupCacheMode; }\r\n\r\n    /** 弹窗请求结果 */\r\n    public static get ShowResult() { return PopupShowResult; }\r\n\r\n    public static cacheMode = PopupCacheMode;\r\n    public static showResult = PopupShowResult;\r\n    public static Base = PopupBase;\r\n    /**\r\n     * 弹窗动态加载开始回调\r\n     * @example\r\n     * PopupManager.loadStartCallback = () => {\r\n     *     LoadingTip.show();\r\n     * };\r\n     */\r\n    public static loadStartCallback: () => void = null;\r\n\r\n    /**\r\n     * 弹窗动态加载结束回调\r\n     * @example\r\n     * PopupManager.loadFinishCallback = () => {\r\n     *     LoadingTip.hide();\r\n     * };\r\n     */\r\n    public static loadFinishCallback: () => void = null;\r\n\r\n    /**\r\n     * 展示弹窗，如果当前已有弹窗在展示中则加入等待队列\r\n     * @param path 弹窗预制体相对路径（如：prefabs/MyPopup）\r\n     * @param options 弹窗选项（将传递给弹窗的组件）\r\n     * @param params 弹窗展示参数\r\n     * @example\r\n     * const options = {\r\n     *     title: 'Hello',\r\n     *     content: 'This is a popup!'\r\n     * };\r\n     * const params = {\r\n     *     mode: PopupCacheMode.Normal\r\n     * };\r\n     * PopupManager.show('prefabs/MyPopup', options, params);\r\n     */\r\n    public static show<Options>(targetNode: cc.Node, options?: Options, params?: PopupParams): Promise<PopupShowResult> {\r\n        let path: string = targetNode.uuid;\r\n        if (!targetNode.active) {\r\n            targetNode.active = true;\r\n        }\r\n        if (!this._nodeCache.has(path)) {\r\n            this._nodeCache.set(path, targetNode);\r\n        }\r\n        return new Promise(async (res) => {\r\n            // 解析处理参数\r\n            params = this.parseParams(params);\r\n            // 当前已有弹窗在展示中则加入等待队列\r\n            if (this._current || this.locked) {\r\n                // 是否立即强制展示\r\n                if (params && params.immediately) {\r\n                    this.locked = false;\r\n                    // 挂起当前弹窗\r\n                    await this.suspend();\r\n                } else {\r\n                    // 将请求推入等待队列\r\n                    this.push(targetNode, options, params);\r\n                    res(PopupShowResult.Waiting);\r\n                    return;\r\n                }\r\n            }\r\n            // 保存为当前弹窗，阻止新的弹窗请求\r\n            this._current = {\r\n                path:targetNode,\r\n                options,\r\n                params\r\n            };\r\n            // 先在缓存中获取弹窗节点\r\n            let node = this.getNodeFromCache(path);\r\n            // 缓存中没有，动态加载预制体资源\r\n            if (!cc.isValid(node)) {\r\n                // 开始回调\r\n                this.loadStartCallback && this.loadStartCallback();\r\n                // 等待加载\r\n                const prefab = await this.load(path);\r\n                // 完成回调\r\n                this.loadFinishCallback && this.loadFinishCallback();\r\n                // 加载失败（一般是路径错误导致的）\r\n                if (!cc.isValid(prefab)) {\r\n                    cc.warn('[PopupManager]', '弹窗加载失败', path);\r\n                    this._current = null;\r\n                    res(PopupShowResult.Failed);\r\n                    return;\r\n                }\r\n                // 实例化节点\r\n                node = cc.instantiate(prefab);\r\n            }\r\n            // 获取继承自 PopupBase 的弹窗组件\r\n            const popup = node.getComponent(PopupBase);\r\n            if (!popup) {\r\n                cc.warn('[PopupManager]', '未找到弹窗组件', path);\r\n                this._current = null;\r\n                res(PopupShowResult.Failed);\r\n                return;\r\n            }\r\n            // 保存组件引用\r\n            this._current.popup = popup;\r\n            // 保存节点引用\r\n            this._current.node = node;\r\n            // 添加到场景中\r\n            node.setParent(this.container || cc.Canvas.instance.node);\r\n            // 显示在最上层\r\n            node.setSiblingIndex(cc.macro.MAX_ZINDEX);\r\n            // 设置完成回调\r\n            const finishCallback = async (suspended: boolean) => {\r\n                if (suspended) {\r\n                    return;\r\n                }\r\n                // 是否需要锁定\r\n                this.locked = (this._suspended.length > 0 || this._queue.length > 0);\r\n                // 回收\r\n                this.recycle(path, node, params.mode);\r\n                this._current = null;\r\n                res(PopupShowResult.Done);\r\n                // 延迟一会儿\r\n                await new Promise((_res) => {\r\n                    cc.Canvas.instance.scheduleOnce(_res, this.interval);\r\n                });\r\n                // 下一个弹窗\r\n                this.next();\r\n            }\r\n            popup.setFinishCallback(finishCallback);\r\n            // 展示\r\n            popup.show(options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 隐藏当前弹窗\r\n     */\r\n    public static hide() {\r\n        if (this._current.popup) {\r\n            this._current.popup.hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从缓存中获取节点\r\n     * @param path 弹窗路径\r\n     */\r\n    private static getNodeFromCache(path: string): cc.Node {\r\n        // 从节点缓存中获取\r\n        const nodeCache = this._nodeCache;\r\n        if (nodeCache.has(path)) {\r\n            const node = nodeCache.get(path);\r\n            if (cc.isValid(node)) {\r\n                return node;\r\n            }\r\n            // 删除无效引用\r\n            nodeCache.delete(path);\r\n        }\r\n        // 从预制体缓存中获取\r\n        const prefabCache = this._prefabCache;\r\n        if (prefabCache.has(path)) {\r\n            const prefab = prefabCache.get(path);\r\n            if (cc.isValid(prefab)) {\r\n                return cc.instantiate(prefab);\r\n            }\r\n            // 删除无效引用\r\n            prefabCache.delete(path);\r\n        }\r\n        // 无\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 展示挂起或等待队列中的下一个弹窗\r\n     */\r\n    private static next() {\r\n        if (this._current ||\r\n            (this._suspended.length === 0 && this._queue.length === 0)) {\r\n            return;\r\n        }\r\n        // 取出一个请求\r\n        let request: PopupRequest = null;\r\n        if (this._suspended.length > 0) {\r\n            // 挂起队列\r\n            request = this._suspended.shift();\r\n        } else {\r\n            // 等待队列\r\n            request = this._queue.shift();\r\n        }\r\n        // 解除锁定\r\n        this.locked = false;\r\n        // 已有实例\r\n        if (cc.isValid(request.popup)) {\r\n            // 设为当前弹窗\r\n            this._current = request;\r\n            // 直接展示\r\n            request.popup.show(request.options);\r\n            return;\r\n        }\r\n        // 加载并展示\r\n        this.show(request.path, request.options, request.params);\r\n    }\r\n\r\n    /**\r\n     * 添加一个弹窗请求到等待队列中，如果当前没有展示中的弹窗则直接展示该弹窗。\r\n     * @param path 弹窗预制体相对路径（如：prefabs/MyPopup）\r\n     * @param options 弹窗选项\r\n     * @param params 弹窗展示参数\r\n     */\r\n    private static push<Options>(path: cc.Node, options?: Options, params?: PopupParams) {\r\n        // 直接展示\r\n        if (!this._current && !this.locked) {\r\n            this.show(path, options, params);\r\n            return;\r\n        }\r\n        // 加入队列\r\n        this._queue.push({ path, options, params });\r\n        // 按照优先级从小到大排序\r\n        this._queue.sort((a, b) => (a.params.priority - b.params.priority));\r\n    }\r\n\r\n    /**\r\n     * 挂起当前展示中的弹窗\r\n     */\r\n    private static async suspend() {\r\n        if (!this._current) {\r\n            return;\r\n        }\r\n        const request = this._current;\r\n        // 将当前弹窗推入挂起队列\r\n        this._suspended.push(request);\r\n        // 关闭当前弹窗（挂起）\r\n        await request.popup.hide(true);\r\n        // 置空当前\r\n        this._current = null;\r\n    }\r\n\r\n    /**\r\n     * 回收弹窗\r\n     * @param path 弹窗路径\r\n     * @param node 弹窗节点\r\n     * @param mode 缓存模式\r\n     */\r\n    private static recycle(path: string, node: cc.Node, mode: PopupCacheMode) {\r\n        switch (mode) {\r\n            // 一次性\r\n            case PopupCacheMode.Once:\r\n                node.destroy();\r\n                this._nodeCache.delete(path);\r\n                this.release(path);\r\n                break;\r\n            // 正常\r\n            case PopupCacheMode.Normal:\r\n                node.destroy();\r\n                this._nodeCache.delete(path);\r\n                break;\r\n            // 频繁\r\n            case PopupCacheMode.Frequent:\r\n                node.removeFromParent(false);\r\n                this._nodeCache.set(path, node);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载并缓存弹窗预制体资源\r\n     * @param path 弹窗路径\r\n     */\r\n    public static load(path: string): Promise<cc.Prefab> {\r\n        return new Promise((res) => {\r\n            const prefabMap = this._prefabCache;\r\n            // 先看下缓存里有没有，避免重复加载\r\n            if (prefabMap.has(path)) {\r\n                const prefab = prefabMap.get(path);\r\n                // 缓存是否有效\r\n                if (cc.isValid(prefab)) {\r\n                    res(prefab);\r\n                    return;\r\n                } else {\r\n                    // 删除无效引用\r\n                    prefabMap.delete(path);\r\n                }\r\n            }\r\n            // 动态加载\r\n            cc.resources.load(path, (error: Error, prefab: cc.Prefab) => {\r\n                if (error) {\r\n                    res(null);\r\n                    return;\r\n                }\r\n                // 缓存预制体\r\n                prefabMap.set(path, prefab);\r\n                // 增加引用计数\r\n                prefab.addRef();\r\n                res(prefab);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 尝试释放弹窗资源（注意：弹窗内部动态加载的资源请自行释放）\r\n     * @param path 弹窗路径\r\n     */\r\n    public static release(path: string) {\r\n        // 移除节点\r\n        const nodeCache = this._nodeCache;\r\n        let node = nodeCache.get(path);\r\n        if (node) {\r\n            nodeCache.delete(path);\r\n            if (cc.isValid(node)) {\r\n                node.destroy();\r\n            }\r\n            node = null;\r\n        }\r\n        // 移除预制体\r\n        const prefabCache = this._prefabCache;\r\n        let prefab = prefabCache.get(path);\r\n        if (prefab) {\r\n            prefabCache.delete(path);\r\n            prefab.decRef();\r\n            prefab = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 解析参数\r\n     * @param params 参数\r\n     */\r\n    private static parseParams(params: PopupParams) {\r\n        if (params == undefined) {\r\n            return new PopupParams();\r\n        }\r\n        // 是否为对象\r\n        if (Object.prototype.toString.call(params) !== '[object Object]') {\r\n            cc.warn('[PopupManager]', '弹窗参数无效，使用默认参数');\r\n            return new PopupParams();\r\n        }\r\n        // 缓存模式\r\n        if (params.mode == undefined) {\r\n            params.mode = PopupCacheMode.Normal;\r\n        }\r\n        // 优先级\r\n        if (params.priority == undefined) {\r\n            params.priority = 0;\r\n        }\r\n        // 立刻展示\r\n        if (params.immediately == undefined) {\r\n            params.immediately = false;\r\n        }\r\n        return params;\r\n    }\r\n\r\n}\r\n\r\n/** 弹窗展示参数 */\r\nexport class PopupParams {\r\n    /** 缓存模式 */\r\n    public mode?: PopupCacheMode = PopupCacheMode.Normal;\r\n    /** 优先级（优先级大的优先展示） */\r\n    public priority?: number = 0;\r\n    /** 立刻展示（将会挂起当前展示中的弹窗） */\r\n    public immediately?: boolean = false;\r\n}\r\n\r\n/** 弹窗展示请求 */\r\nexport interface PopupRequest {\r\n    /** 弹窗预制体相对路径 */\r\n    path: cc.Node;\r\n    /** 弹窗选项 */\r\n    options: any;\r\n    /** 缓存模式 */\r\n    params: PopupParams,\r\n    /** 弹窗组件 */\r\n    popup?: PopupBase,\r\n    /** 弹窗节点 */\r\n    node?: cc.Node\r\n}\r\n","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class PrefabLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"PrefabLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","import BaseLoader from \"./base/BaseLoader\";\r\nimport { AtlasLoader, AudioLoader, DefaultLoader, ImageLoader, JsonLoader, PrefabLoader, SpineLoader, TextLoader } from \"./base/loader-index\";\r\nimport { LoaderObserver, LoaderObserverParam } from \"./LoaderObserver\";\r\n\r\n/**\r\n * 远程spine数据配置\r\n */\r\nexport class RemoteSpineData {\r\n    public json: string;\r\n    public atlas: string;\r\n    public images: string[];\r\n}\r\n\r\nexport default class ResLoader {\r\n\r\n    // 加载器map集合\r\n    private static _defaultMap: Map<{prototype: cc.Asset}, BaseLoader>;\r\n    // 默认loader\r\n    private static _defaultLoader: DefaultLoader = null;\r\n    // 是否初始化\r\n    private static _init: boolean = false;\r\n    // 加载器观察者列表\r\n    private static _observerList: LoaderObserver[] = [];\r\n\r\n    /** 初始化加载器 */\r\n    public static init (): void {\r\n        if (!ResLoader._init) {\r\n            ResLoader._defaultMap = new Map();\r\n            ResLoader._defaultMap.set(cc.SpriteFrame, new ImageLoader());\r\n            ResLoader._defaultMap.set(cc.SpriteAtlas, new AtlasLoader());\r\n            ResLoader._defaultMap.set(cc.AudioClip, new AudioLoader());\r\n            ResLoader._defaultMap.set(cc.JsonAsset, new JsonLoader());\r\n            ResLoader._defaultMap.set(cc.TextAsset, new TextLoader());\r\n            ResLoader._defaultMap.set(cc.Prefab, new PrefabLoader());\r\n            ResLoader._defaultMap.set(sp.SkeletonData, new SpineLoader());\r\n            // 默认加载器\r\n            ResLoader._defaultLoader = new DefaultLoader();\r\n        }\r\n        ResLoader._init = true;\r\n    }\r\n\r\n    /**\r\n     * 注册观察者\r\n     * @param {LoaderObserver} observer 自定义观察者\r\n     */\r\n    public static addObserver (observer: LoaderObserver): void {\r\n        ResLoader._observerList.push(observer);\r\n    }\r\n\r\n    /**\r\n     * 移除观察者\r\n     * @param {LoaderObserver} observer 自定义观察者 \r\n     * @returns {boolean} 是否移除成功\r\n     */\r\n    public static removeObserver (observer: LoaderObserver): boolean {\r\n        for (let i = ResLoader._observerList.length - 1; i >= 0; i--) {\r\n            let obs = ResLoader._observerList[i];\r\n            if (obs === observer) {\r\n                ResLoader._observerList.splice(i, 1);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 通用资源加载接口（包括本地资源、网络资源和远程资源）\r\n     * @param {string} path 资源路径，可以是本地资源、网络资源和远程资源\r\n     * @param {cc.Asset | Record<string, any>} options 资源类型 | 远程资源可选参数\r\n     * @param {(err, res) => void} onComplete 加载完成回调\r\n     * @param {cc.AssetManager.Bundle | string} bundle 资源所属bundle，可选。\r\n     * @param {(finish: number, total: number, item: cc.AssetManager.RequestItem) => void} onProgress 加载进度\r\n     */\r\n    public static loadRes (\r\n        path: string, \r\n        options: typeof cc.Asset | Record<string, any>, \r\n        onComplete: (err, res) => void, \r\n        bundle?: cc.AssetManager.Bundle | string, \r\n        onProgress?: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void): void {\r\n        // 初始化resloader\r\n        ResLoader.init();\r\n        let curBundle: cc.AssetManager.Bundle = null;\r\n        let tempType = null;\r\n        if (typeof options !== \"object\") {\r\n            tempType = options;\r\n            if (bundle && typeof bundle === \"string\" && bundle !== \"\") {\r\n                curBundle = cc.assetManager.getBundle(bundle);\r\n            } else if (bundle && typeof bundle !== \"string\") {\r\n                curBundle = bundle as cc.AssetManager.Bundle;\r\n            } else {\r\n                curBundle = cc.resources as cc.AssetManager.Bundle;\r\n            }\r\n            if (curBundle) {\r\n                let as = curBundle.get(path, tempType);\r\n                if (as) {\r\n                    ResLoader.__beforeLoadRes(new LoaderObserverParam(path, tempType, curBundle, 0, null));\r\n                    onComplete(null, as);\r\n                    ResLoader.__afterLoadRes(new LoaderObserverParam(path, tempType, curBundle, 0, null));\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        let param = new LoaderObserverParam(path, tempType, curBundle, 0, null);\r\n        ResLoader.__beforeLoadRes(param);\r\n        let loader = ResLoader._defaultMap.get(tempType);\r\n        if (!loader) {\r\n            if (typeof options !== \"object\") {\r\n                cc.log(`assets type: ${tempType} is not exists, default loader insteaded!`);\r\n            }\r\n            loader = ResLoader._defaultLoader;\r\n        }\r\n        let startTime = new Date().getTime();\r\n        loader.loadRes(path, options, (_err, _res) => {\r\n            if (onComplete) {\r\n                param.time = new Date().getTime() - startTime; // 计算下载时间\r\n                ResLoader.__afterLoadRes(param);\r\n                onComplete(_err, _res);\r\n            }\r\n        }, curBundle, onProgress);\r\n    }\r\n\r\n    private static __beforeLoadRes (param: LoaderObserverParam): void {\r\n        for (let obs of ResLoader._observerList) {\r\n            obs.beforeLoadRes(param);\r\n        }\r\n    }\r\n\r\n    private static __afterLoadRes (param: LoaderObserverParam): void {\r\n        for (let obs of ResLoader._observerList) {\r\n            obs.afterLoadRes(param);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载目录\r\n     * @param {string} dir 资源目录\r\n     * @param {cc.Asset} type 资源类型\r\n     * @param {(finish: number, total: number, item: cc.AssetManager.RequestItem) => void} onProgress 加载进度回调\r\n     * @param {(error: Error, assets: Array<T>) => void} onComplete 加载完成回调\r\n     * @param {cc.AssetManager.Bundle | string} bundle 资源所属bundle，可选。 \r\n     */\r\n    public static loadDir<T extends cc.Asset> (dir: string, type: typeof cc.Asset, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, onComplete: (error: Error, assets: Array<T>) => void, bundle?: cc.AssetManager.Bundle | string): void {\r\n        let curBundle: cc.AssetManager.Bundle = null;\r\n        if (bundle && typeof bundle === \"string\" && bundle !== \"\") {\r\n            curBundle = cc.assetManager.getBundle(bundle);\r\n        } else if (bundle && typeof bundle !== \"string\") {\r\n            curBundle = bundle as cc.AssetManager.Bundle;\r\n        } else {\r\n            curBundle = cc.resources as cc.AssetManager.Bundle;\r\n        }\r\n        if (!curBundle) {\r\n            onComplete(new Error(`bundle ${bundle} is not exists!`), null);\r\n            return;\r\n        }\r\n        curBundle.loadDir(dir, type, onProgress, onComplete);\r\n    }\r\n\r\n    /**\r\n     * 加载bundle\r\n     * @param {string} nameOrUrl bundle名称或地址\r\n     * @param {Record<string, any>} options 下载bundle的可选参数\r\n     * @param {(err: Error, bundle: cc.AssetManager.Bundle) => void} onComplete 加载完成回调\r\n     */\r\n    public static loadBundle (nameOrUrl: string, options: Record<string, any>, onComplete: (err: Error, bundle: cc.AssetManager.Bundle) => void): void {\r\n        let param = new LoaderObserverParam(nameOrUrl, null, null, 0, null);\r\n        let startTime = new Date().getTime();\r\n        ResLoader.__beforeLoadBundle(param);\r\n        cc.assetManager.loadBundle(nameOrUrl, options, (_err, _bundle) => {\r\n            param.time = new Date().getTime() - startTime; // 加载时间处理\r\n            ResLoader.__afterLoadBundle(param);\r\n            if (onComplete) {\r\n                onComplete(_err, _bundle);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static __beforeLoadBundle (param: LoaderObserverParam): void {\r\n        for (let obs of ResLoader._observerList) {\r\n            obs.beforeLoadBundle(param);\r\n        }\r\n    }\r\n\r\n    private static __afterLoadBundle (param: LoaderObserverParam): void {\r\n        for (let obs of ResLoader._observerList) {\r\n            obs.afterLoadBundle(param);\r\n        }\r\n    }\r\n}","import ResLoader from \"../framework/load/ResLoader\";\nimport LogSystem from \"../system/log/LogSystem\";\n\n/**\n * 资源加载类型， Global 不会被释放bundle\n */\nexport enum ResourceType {\n    default,\n    Global, \n    Normal\n}\n\nclass Asset {\n    public bundle: cc.AssetManager.Bundle;\n    private assetMap: Map<string, cc.Asset>;\n    private resType: ResourceType;\n\n    constructor(resType) {\n        this.assetMap = new Map();\n        this.resType = resType;\n    }\n\n    public loadBundle(bundleName): Promise<any> {\n        return new Promise((reslove, reject) => {\n            ResLoader.loadBundle(bundleName, null, (e, bundle: cc.AssetManager.Bundle) => {\n                if (e) {\n                    reject(e);\n                    return;\n                }\n                this.bundle = bundle;\n                reslove(bundle);\n            })\n        }).catch(e => cc.log(e))\n    }\n\n    public loadRes(path: string, type: typeof cc.Asset, finishCb: (e, asset) => void) {\n        if (this.assetMap.has(path)) {\n            let asset = this.assetMap.get(path);\n            if (finishCb) {\n                finishCb(null, asset);\n            }\n            return;\n        }\n        ResLoader.loadRes(path, type, (e, res: cc.Asset) => {\n            this.assetMap.set(path, res);\n            // res.addRef();\n\n            if (finishCb) {\n                finishCb(null, this.assetMap.get(path));\n                return;\n            }\n        }, this.bundle);\n    }\n\n    public release(releaseComponents?: boolean): string {\n        if (this.bundle.name == 'components' && !releaseComponents) {\n            cc.log('components 不释放');\n            return;\n        }\n        this.assetMap.forEach((res, key) => {\n            // cc.log(`释放${res.name}`);\n            // res.decRef();\n            cc.log(`释放${res.name}`);\n            cc.assetManager.releaseAsset(res)\n            this.bundle.release(key);\n        });\n        this.assetMap.clear();\n        if (this.resType == ResourceType.Global) {\n            return \"\";\n        }\n        cc.log(`释放bundle${this.bundle.name}`);\n        cc.assetManager.removeBundle(this.bundle);\n        return this.bundle.name;\n    }\n\n    public releaseWithOutBundle(releaseComponents?: boolean): string {\n        this.assetMap.forEach((res, key) => {\n            // cc.log(`释放${res.name}`);\n            // res.decRef();\n            cc.log(`释放${res.name}`);\n            cc.assetManager.releaseAsset(res)\n            this.bundle.release(key);\n        });\n        this.assetMap.clear();\n        if (this.resType == ResourceType.Global) {\n            return \"\";\n        }\n        return this.bundle.name;\n    }\n}\n\nexport default class ResourcesManager {\n    private static _instance: ResourcesManager;\n\n    private assetsMap: Map<string, Asset>;\n\n    public static get instance(): ResourcesManager {\n        if (!ResourcesManager._instance) {\n            ResourcesManager._instance = new ResourcesManager();\n        }\n        return ResourcesManager._instance;\n    }\n\n    constructor() {\n        this.assetsMap = new Map();\n    }\n\n    /**\n     * 加载单个资源\n     * @param {string} bundleName\n     * @param {string} resPath \n     * @param {kit.manager.Resources.type} resType 加载类型 \n     * @param {typeof cc.Asset} assetType \n     * @param {(error, res) => void} finishCb  加载完成回调\n     * @returns \n     */\n    public loadRes(bundleName: string, resPath: string, resType: ResourceType, assetType: typeof cc.Asset, finishCb: (error, res) => void): Promise<any> {\n        return new Promise(async (resolve, rej) => {\n            if (bundleName == \"\" || resPath == \"\") {\n                LogSystem.error(`ResourcesManager loadRes bundleName or resPath null`);\n                rej();\n                return;\n            }\n\n            if (this.assetsMap.has(bundleName)) {\n                let asset = this.assetsMap.get(bundleName);\n                asset.loadRes(resPath, assetType, (e, res) => {\n\n                    if (finishCb) {\n                        finishCb(e, res);\n                    }\n                    if (e) {\n                        rej(e);\n                    } else {\n                        resolve(res);\n                    }\n\n                })\n                return;\n            }\n\n            let assetClip = new Asset(resType);\n            await assetClip.loadBundle(bundleName);\n            assetClip.loadRes(resPath, assetType, (e, asset) => {\n                this.assetsMap.set(bundleName, assetClip);\n                if (finishCb) {\n                    finishCb(e, asset);\n                }\n                if (e) {\n                    rej(e);\n                } else {\n                    resolve(asset);\n                }\n\n            });\n\n        }).catch(e => () => {\n            if (finishCb) {\n                finishCb(e, null);\n            }\n        })\n    }\n\n    /**\n     * 加载bundle list\n     * @param nameList \n     * @returns \n     */\n    public loadBundleList (nameList: string[]): Promise<cc.AssetManager.Bundle[] | void> {\n        let list: Promise<any>[] = [];\n        for (let key in nameList) {\n            list.push(\n                this.loadBundle(nameList[key])\n            )\n        }\n        return Promise.all(list).catch((e) => cc.log(e));\n    }\n\n    /** 加载单个bundle */\n    public loadBundle(bundleName: string): Promise<cc.AssetManager.Bundle | void> {\n        return new Promise<cc.AssetManager.Bundle>(async (res, rej) => {\n            if (this.assetsMap.has(bundleName)) {\n                let bundle = this.assetsMap.get(bundleName).bundle;\n                res(bundle);\n                return;\n            }\n            let assetClip = new Asset(ResourceType.Normal);\n            this.assetsMap.set(bundleName, assetClip);\n\n            await assetClip.loadBundle(bundleName);\n            res(assetClip.bundle);\n        }).catch(e => {\n            cc.log(e);\n        })\n    }\n\n    /**\n     * 释放资源\n     * @param {?string | string[]} bundleName 传入null或者“”释放加载过的所有资源， 传入bundleName string 释放对应bundleName以及加载的资源，传入bundleName list释放对应的资源和bundle\n     * @param {?boolean} releaseComponents 释放需要释放Component里的资源 默认不释放， ❗️游戏内禁止释放\n     * @returns \n     */\n    public releaseAsset(bundleName?: string | string[], releaseComponents?: boolean) {\n        cc.log(\"释放资源\", bundleName);\n        if (bundleName && typeof bundleName == \"string\" && bundleName != \"\") {\n            let element = this.assetsMap.get(bundleName);\n            let releaseKey = element.release(releaseComponents);\n            if (releaseKey != '') {\n                this.assetsMap.delete(releaseKey);\n            }\n            return;\n        }\n        // 多个释放\n        if (bundleName && typeof bundleName == \"object\") {\n            bundleName.forEach((item) => {\n                let element = this.assetsMap.get(item);\n                let releaseKey = element.release(releaseComponents);\n                if (releaseKey != '') {\n                    this.assetsMap.delete(releaseKey);\n                }\n            })\n            return;\n        }\n        this.assetsMap.forEach(element => {\n            let releaseKey = element.release(releaseComponents);\n            if (releaseKey != '') {\n                this.assetsMap.delete(releaseKey);\n            }\n        });\n\n    }\n\n    public releaseRes(bundle?: cc.AssetManager.Bundle) {\n        if (bundle) {\n            let element = this.assetsMap.get(bundle.name);\n            if (!element) {\n                cc.assetManager.removeBundle(bundle);\n                return;\n            }\n            let releaseKey = element.releaseWithOutBundle();\n            if (releaseKey != '') {\n                this.assetsMap.delete(releaseKey);\n            }\n            cc.log(this.assetsMap);\n            cc.assetManager.removeBundle(bundle);\n        }\n    }\n\n}\n","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class SpineLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"TextLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","import PlatformSystem from \"../../framework/platform/PlatformSystem\";\nimport { StringUtils } from \"../../utils/StringUtils\";\nimport ASystem from \"../interface/ASystem\";\nimport HttpSystem from \"../net/http/HttpSystem\";\n\n/**\n * 埋点\n */\nexport default class SpotSystem extends ASystem {\n\n    /** 埋点 */\n    private static readonly LOG_EVENT: string = \"la_logEvent\";\n    /** 初始化埋点sdk */\n    private static readonly LOG_INIT: string = \"la_logInitWithApiKey\";\n    /** 设置用户id */\n    private static readonly LOG_SET_USER_ID: string = \"la_logUserId\";\n    /** app key */\n    private static readonly APP_KEY: string = \"3437b23f038afa01e3c220886da2deda\";\n    /** 埋点url */\n    private static readonly HTTP_HOST: string = \"https://api2.amplitude.com/batch\";\n    /** ios sdk类名 */\n    private static readonly NAME_SPACE_IOS: string = \"LaLogUtli\";\n    /** android sdk类名 */\n    private static readonly NAME_SPACE_ANDROID: string = \"amplitude/LaLogUtli\";\n\n    private static packagePath: string = PlatformSystem.instance.isAndroid ? SpotSystem.NAME_SPACE_ANDROID : SpotSystem.NAME_SPACE_IOS;\n    private static _instance: SpotSystem;\n\n    private baseInfo: any;\n\n    public static get instance(): SpotSystem {\n        if (SpotSystem._instance == null) {\n            SpotSystem._instance = new SpotSystem();\n        }\n        return SpotSystem._instance;\n    }\n\n    /**\n     * @param baseInfo 公参\n     */\n    public init(baseInfo: any): Promise<void> {\n        return new Promise((res, rej) => {\n            this.baseInfo = baseInfo;\n            // cc.log(`${SpotSystem.packagePath} ${SpotSystem.LOG_INIT}`)\n            // PlatformSystem.instance.adapter.callFunction(SpotSystem.LOG_INIT, SpotSystem.APP_KEY, SpotSystem.packagePath);\n            // PlatformSystem.instance.adapter.callFunction(SpotSystem.LOG_SET_USER_ID, '', SpotSystem.packagePath);\n            res();\n        })\n    }\n\n    /**\n     * 埋点\n     * @param name 名称\n     * @param params 参数\n     */\n    public send(name: string, ...args): void {\n        // if (PlatformSystem.instance.isNative) {\n        //     this.sendSdk(name, ...args);\n        // } else if (PlatformSystem.instance.isBrowser) {\n        //     this.sendHttp(name, ...args);\n        // }\n        this.sendHttp(name, ...args);   // 原生sdk有问题，切换到http埋点\n    }\n\n    /**\n     * 原生sdk埋点\n     * @param name 名称\n     * @param params 参数\n     */\n    public sendSdk(name: string, ...args): void {\n        let str: string = name;\n        if (args) {\n            str = StringUtils.format(name, ...args);\n        }\n        cc.log(`spot: ${str}`)\n        PlatformSystem.instance.adapter.callFunction(SpotSystem.LOG_EVENT, str, SpotSystem.packagePath);\n    }\n\n    /**\n     * http api 埋点\n     * @param name 名称\n     * @param params 参数\n     * @see https://analytics.amplitude.com/demo/connections/project/168342/sources/setup/HTTP_API?source=connections+page%3A+sources\n     */\n    public sendHttp(name: string, ...args): void {\n        let str: string = name;\n        if (args) {\n            str = StringUtils.format(name, ...args);\n        }\n        let obj: any = {\n            \"api_key\": SpotSystem.APP_KEY,\n            \"events\": [\n                {\n                    \"event_type\": str,\n                    \"time\": Date.now(),\n                    ...this.baseInfo\n                }\n            ]\n        }\n        cc.log(`spot: ${JSON.stringify(obj)}`)\n        HttpSystem.instance.httpPost(SpotSystem.HTTP_HOST, obj);\n\n    }\n\n    public release(): void {\n\n    }\n}","import IEntity from \"./entity/IEntity\";\nimport IState from \"./state/IState\";\nimport Telegram from './message/Telegram';\n\n/**\n * 状态机,翻译自游戏编程精粹7，c++版本\n * @class StateMachine\n */\nexport default class StateMachine<T extends IEntity> {\n    private m_pOwner: T;\n    private m_pCurrentState: IState<T>;\n    private m_pPreviousState: IState<T>;\n    private m_pGlobalState: any;\n\n    public constructor(owner: T) {\n        this.m_pOwner = owner;\n        this.m_pCurrentState = null;\n        this.m_pPreviousState = null;\n        this.m_pGlobalState = {};\n    }\n\n    public release(): void {\n        this.m_pCurrentState && this.m_pCurrentState.exit();\n        if (this.m_pGlobalState) {\n            for (let key in this.m_pGlobalState) {\n                this.m_pGlobalState[key].exit();\n                delete this.m_pGlobalState[key]\n            }\n            this.m_pGlobalState = null;\n        }\n    }\n\n    public AddGlobalState(state: any, data?: any): void {\n        let newState: IState<T> = new state()\n        newState.entity = this.m_pOwner;\n        this.m_pGlobalState[state] = newState;\n        // enter 放在后面\n        newState.enter(data);\n    }\n\n    public RemoveGlobalState(state: any): void {\n        if (this.m_pGlobalState[state]) {\n            this.m_pGlobalState[state].exit();\n            delete this.m_pGlobalState[state];\n        }\n    }\n\n    public Update(dt: number): void {\n        if (this.m_pGlobalState !== null) {\n            for (let key in this.m_pGlobalState) {\n                this.m_pGlobalState[key].execute(dt);\n            }\n        }\n        if (this.m_pCurrentState !== null) {\n            this.m_pCurrentState.execute(dt);\n        }\n    }\n\n    /**\n     * 自定义改变状态过程\n     * @param onTransition 自定义过场函数\n     * @example\n     *    this.stateMachine.Transition((currentState: IState<Main>) => {\n     *        let newState: IState<Main> = new stateClass();\n     *        newState.entity = this;\n     *        newState.enter(data).then(() => {\n     *            currentState.exit();\n     *        })\n     *        return newState;\n     *    });\n     */\n    public Transition(onTransition: (currentState: IState<T>) => IState<T>): void {\n        this.m_pPreviousState = this.m_pCurrentState;\n        let newState: IState<T> = onTransition(this.m_pPreviousState);\n        this.m_pCurrentState = newState;\n    }\n\n    public ChangeState(pNewState: any, data?: any): void {\n        this.m_pPreviousState = this.m_pCurrentState;\n        this.m_pPreviousState && this.m_pPreviousState.exit(this.m_pOwner);\n        this.m_pCurrentState = new pNewState();\n        this.m_pCurrentState.entity = this.m_pOwner;\n        this.m_pCurrentState.enter(data);\n    }\n\n    public HandleMessage(msg: Telegram): boolean {\n        if (this.m_pCurrentState && this.m_pCurrentState.onMessage(this.m_pOwner, msg)) {\n            return true;\n        }\n        if (this.m_pGlobalState) {\n            this.m_pGlobalState.forEach((element: IState<T>) => {\n                element.onMessage(this.m_pOwner, msg);\n            })\n        }\n        return false;\n    }\n\n    public RevertPreviousState(): void {\n        this.ChangeState(this.m_pPreviousState);\n    }\n\n    public isInState(state: any | IState<T>): boolean {\n        return this.m_pCurrentState instanceof state;\n    }\n\n    public exitCurrentState(data?: any): void {\n        this.CurrentState && this.CurrentState.exit(data);\n        this.m_pCurrentState.entity = null;\n        this.m_pPreviousState = null;\n        this.m_pCurrentState = null;\n    }\n\n    public get CurrentState(): IState<T> {\n        return this.m_pCurrentState;\n    }\n\n    public get GlobalState(): IState<T>[] {\n        return this.m_pGlobalState;\n    }\n\n    public get PreviousState(): IState<T> {\n        return this.m_pPreviousState;\n    }\n}\n","/**\n * 字符串工具\n * @version 1.0\n */\nexport class StringUtils {\n  public static format(sourceStr: string, ...args): string {\n    if (args.length === 0) {\n      return sourceStr;\n    }\n    let str = sourceStr;\n    for (let i = 0; i < args.length; i++) {\n      str = str.replace(new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\"), args[i]);\n    }\n    return str;\n  }\n  /**\n   * 替换字符\n   * @param fromIndex 开始替换的索引，以0开始\n   * @param len 替换的长度\n   * @param sourceStr 源字符串\n   * @param replaceCode 替换成字符串码\n   * @returns string\n   */\n  public static replaceStr(\n    fromIndex: number,\n    len: number,\n    sourceStr: string,\n    replaceCode: string = \"*\"\n  ): string {\n    var tempStr = \"\";\n    var tempLen = sourceStr.length;\n    for (var index = 0; index < tempLen; ++index) {\n      if (index >= fromIndex && index < fromIndex + len) {\n        tempStr += replaceCode;\n      } else {\n        tempStr += sourceStr.charAt(index);\n      }\n    }\n    return tempStr;\n  }\n\n  /**\n   * 字符串长度\n   * @param str 字符串\n   * @returns number\n   */\n  public static strLength(str: string): number {\n    if (str === void 0) {\n      return 0;\n    }\n    var len = 0;\n    for (var i = 0; i < str.length; i++) {\n      if ((str.charCodeAt(i) & 0xff00) != 0) {\n        len++;\n      }\n      len++;\n    }\n    return len;\n  }\n\n  /**\n   * 判断空串\n   */\n  public static isEmpty(obj: any): boolean {\n    if (typeof obj == \"undefined\" || obj == null || obj == \"\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * 超出部分显示省略号\n   * @param {string} text 原始文本\n   * @param {number} max 最大长度\n   * @param {string} [moreText=\"...\"] 省略号或指定字符\n   */\n  public static moreText(text: string, max: number, moreText: string = \"...\"): string {\n    if (text.length > max) {\n      return text.substring(0, max - 2) + \"...\";\n    } else {\n      return text;\n    }\n  }\n}\n","/**\n *\n * @author \n */\nexport default class Telegram {\n    /**\n     * these telegrams will be stored in a priority queue. Therefore the >\n     * operator needs to be overloaded so that the PQ can sort the telegrams\n     * by time priority. Note how the times must be smaller than\n     * SmallestDelay apart before two Telegrams are considered unique.\n     */\n    private SmallestDelay: number = 0.25;\n    /**\n     * 发送消息的实体(entity)的id\n     */\n    public Sender: string;\n    /**\n     * 处理消息的实体(entity)的id\n     */\n    public Receiver: string;\n    /**\n     * 一个enum类型的消息类型，实体(entity)根据不同的消息类型进行不同的处理\n     */\n    public Msg: number;\n    /**\n     * 消息可以立即发送或延迟指定的金额时间。\n     * 如果一个延迟是必要的，这个字段是加盖的时间应发送消息。\n     */\n    public DispatchTime: number;\n\n    // 消息附带的额外信息，这个可以根据需求自定义，也可以为null\n    public ExtraInfo: any;\n\n    public time: number;\n\n    public constructor(time: number, sender: string, receiver: string, msg: number, info: any = null) {\n        this.Sender = sender;\n        this.Receiver = receiver;\n        this.Msg = msg;\n        this.DispatchTime = time;\n        this.time = Date.now();\n        this.ExtraInfo = info;\n    }\n\n    public get sortSerial(): number {\n        return this.DispatchTime;\n    }\n}\n","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class TextLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"TextLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","import { NumberUtils } from \"./NumberUtils\";\n\n/**\n * 时间工具\n * @version 1.0\n */\nexport class TimeUtils {\n  /**\n   * 根据指定格式格式化时间\n   * dateToFormate(new Date(), \"yyyy-MM-dd hh:mm:ss\");\n   * @param Date data对象\n   * @param fmt 时间格式，如 yyyy-MM-dd hh:mm:ss\n   * @returns {string}\n   */\n  public static dateToFormate(date: Date, fmt: string): string {\n    let o: any = {\n      \"M+\": date.getMonth() + 1, // 月份\n      \"d+\": date.getDate(), // 日\n      \"h+\": date.getHours(), // 小时\n      \"m+\": date.getMinutes(), // 分\n      \"s+\": date.getSeconds(), // 秒\n      \"q+\": Math.floor((date.getMonth() + 3) / 3), // 季度\n      S: date.getMilliseconds() // 毫秒\n    };\n    if (/(y+)/.test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n    }\n    for (let k in o) {\n      if (new RegExp(\"(\" + k + \")\").test(fmt)) {\n        fmt = fmt.replace(\n          RegExp.$1,\n          RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length)\n        );\n      }\n    }\n    return fmt;\n  }\n\n  /**\n   * 将一个秒数转换为：小时:分钟:秒,譬如：12：23：45\n   * @param number time 时间戳\n   * @returns {string}\n   */\n  public static toDate(time: number): string {\n    let result: string = \"\";\n    if (time <= 0) { return \"00:00:00\"; }\n    let hour = 0;\n    if (time >= 3600) {\n      hour = Math.floor(NumberUtils.floatDiv(time, 3600));\n      time %= 3600;\n    }\n    let minute = 0;\n    if (time >= 60) {\n      minute = Math.floor(NumberUtils.floatDiv(time, 60));\n      time %= 60;\n    }\n    let second = Math.floor(time);\n    if (hour < 10) { result += \"0\" + hour; }\n    else { result += hour.toFixed(); }\n    result += \":\";\n    if (minute < 10) { result += \"0\" + minute; }\n    else { result += minute.toFixed(); }\n    result += \":\";\n    if (second < 10) { result += \"0\" + second; }\n    else { result += second.toFixed(); }\n    return result;\n  }\n\n}\n","import ASystem from \"../interface/ASystem\";\n\n/**\n * 时间系统\n */\nexport default class TimerSystem extends ASystem {\n\n    private static _instance: TimerSystem;\n    private static INTERVAL: number = 1 / 60;\n\n    private _pool: TimerHandler[] = new Array<TimerHandler>();\n    private _handlers: any = {};\n    private _currTimer: number = 0;\n    private _currFrame: number = 0;\n    private _count: number = 0;\n    private _index: number = 0;\n    private _startTime: number = 0;\n\n    public static get instance(): TimerSystem {\n        if (TimerSystem._instance == null) {\n            TimerSystem._instance = new TimerSystem();\n        }\n        return TimerSystem._instance;\n    }\n\n    public init(): Promise<void> {\n        return new Promise((res, rej) => {\n            this._startTime = Date.now();\n            this._currTimer = Date.now();\n            cc.director.getScheduler().enableForTarget(this)\n            cc.director.getScheduler().schedule(this.onEnterFrame, this, TimerSystem.INTERVAL);\n            res();\n        })\n    }\n\n\n    public onEnterFrame(elapsed?: any): void {\n        this._currFrame++;\n        this._currTimer = Date.now();\n        let k: any;\n        for (k in this._handlers) {\n            if (k !== \"undefined\") {\n                let handler: TimerHandler = this._handlers[k];\n                let t: number = handler.userFrame ? this._currFrame : this._currTimer;\n                if (t >= handler.exeTime) {\n                    let method: Function = handler.method;\n                    let args: any[] = handler.args || [elapsed];\n                    if (handler.repeat) {\n                        while (t >= handler.exeTime && k in this._handlers) {\n                            handler.exeTime += handler.delay;\n                            method.apply(handler.thisObj, args);\n\n                        }\n                    } else {\n                        method.apply(handler.thisObj, args);\n                        this.clearTimer(k);\n                    }\n                }\n            } else {\n                console.log(k);\n            }\n        }\n    }\n\n    private create(useFrame: boolean, repeat: boolean, delay: number, method: Function, thisObj: any = null, args: any[] = null, cover: boolean = true): any {\n        let key: any;\n        if (cover) {\n            // 先删除相同函数的计时\n            this.clearTimer(method);\n            key = method;\n        } else {\n            key = this._index++;\n        }\n\n        // 如果执行时间小于1，直接执行\n        if (delay < 1) {\n            method.apply(null, args)\n            return -1;\n        }\n        let handler: TimerHandler = this._pool.length > 0 ? this._pool.pop() : new TimerHandler();\n        handler.userFrame = useFrame;\n        handler.repeat = repeat;\n        handler.delay = delay;\n        handler.method = method;\n        handler.thisObj = thisObj;\n\n        handler.args = args;\n        handler.exeTime = delay + (useFrame ? this._currFrame : this._currTimer);\n        this._handlers[key] = handler;\n        this._count++;\n        return key;\n    }\n\n    /**定时执行一次\n     * @params    delay  延迟时间(单位毫秒)\n     * @params    method 结束时的回调方法\n     * @params    args   回调参数\n     * @params    cover  是否覆盖(true:同方法多次计时，后者覆盖前者。false:同方法多次计时，不相互覆盖)\n     * @return  cover=true时返回回调函数本身，cover=false时，返回唯一ID，均用来作为clearTimer的参数\n     */\n    public doOnce(delay: number, method: Function, thisObj: any = null, args: any[] = null, cover: boolean = true): any {\n        return this.create(false, false, delay, method, thisObj, args, cover);\n    }\n\n    /**定时重复执行\n     * @params    delay  延迟时间(单位毫秒)\n     * @params    method 结束时的回调方法\n     * @params    args   回调参数\n     * @params    cover  是否覆盖(true:同方法多次计时，后者覆盖前者。false:同方法多次计时，不相互覆盖)\n     * @return  cover=true时返回回调函数本身，cover=false时，返回唯一ID，均用来作为clearTimer的参数\n     */\n    public doLoop(delay: number, method: Function, thisObj: any = null, args: any[] = null, cover: boolean = true): any {\n        return this.create(false, true, delay, method, thisObj, args, cover);\n    }\n\n    /**定时执行一次(基于帧率)\n     * @params    delay  延迟时间(单位为帧)\n     * @params    method 结束时的回调方法\n     * @params    args   回调参数\n     * @params    cover  是否覆盖(true:同方法多次计时，后者覆盖前者。false:同方法多次计时，不相互覆盖)\n     * @return  cover=true时返回回调函数本身，cover=false时，返回唯一ID，均用来作为clearTimer的参数\n     */\n    public doFrameOnce(delay: number, method: Function, thisObj: any = null, args: any[] = null, cover: boolean = true): any {\n        return this.create(true, false, delay, method, thisObj, args, cover);\n    }\n\n    /**定时重复执行(基于帧率)\n     * @params    delay  延迟时间(单位为帧)\n     * @params    method 结束时的回调方法\n     * @params    args   回调参数\n     * @params    cover  是否覆盖(true:同方法多次计时，后者覆盖前者。false:同方法多次计时，不相互覆盖)\n     * @return  cover=true时返回回调函数本身，否则返回唯一ID，均用来作为clearTimer的参数\n     */\n    public doFrameLoop(delay: number, method: Function, thisObj: any = null, args: any[] = null, cover: boolean = true): any {\n        return this.create(true, true, delay, method, thisObj, args, cover);\n    }\n\n    /** 定时器执行数量 */\n    public get count(): number {\n        return this._count;\n    }\n\n    /**清理定时器\n     * @params    method 创建时的cover=true时method为回调函数本身，否则method为返回的唯一ID\n     */\n    public clearTimer(method: any): void {\n        let handler: TimerHandler = this._handlers[method];\n        if (handler != null) {\n            delete this._handlers[method];\n            handler.clear();\n            this._pool.push(handler);\n            this._count--;\n        }\n    }\n\n    /**\n     * 方法是否在定时器的队列中\n     */\n    public running(method: any): boolean {\n        if (this._handlers[method] != null) {\n            return true;\n        }\n        return false;\n    }\n\n    public release(): void {\n        for (let handler in this._handlers) {\n            this.clearTimer(this._handlers[handler]);\n        }\n    }\n\n}\n\nclass TimerHandler {\n    /** 执行间隔 */\n    public delay: number = 0;\n    /** 是否重复执行 */\n    public repeat: boolean;\n    /** 是否用帧率 */\n    public userFrame: boolean;\n    /** 执行时间 */\n    public exeTime: number = 0;\n    /** 处理方法 */\n    public method: Function;\n    /** 参数 */\n    public args: any[];\n    /** this对象 */\n    public thisObj: any;\n\n    /** 清理 */\n    public clear(): void {\n        this.method = null;\n        this.args = null;\n        this.thisObj = null;\n    }\n}","import ResLoader from \"../framework/load/ResLoader\";\nimport { kit } from \"../kit\";\nimport LogSystem from \"../system/log/LogSystem\";\n\n/**\n * 解析UI节点工具\n */\nexport default class UIUtils {\n\n    /***\n     * 生成子节点的唯一标识快捷访问\n     * @param node\n     * @param map\n     */\n    public static createSubNodeMap(node: cc.Node, map: Map<string, cc.Node>) {\n        let children = node.children;\n        if (!children) {\n            return;\n        }\n        for (let t = 0, len = children.length; t < len; ++t) {\n            let subChild = children[t];\n            map.set(subChild.name, subChild);\n            UIUtils.createSubNodeMap(subChild, map);\n        }\n    }\n\n    /**\n     * 返回当前节点所有节点,一唯一标识存在\n     * @param node 父节点\n     * @return {Object} 所有子节点的映射map\n     */\n    public static seekAllSubView(node: cc.Node): UIContainer {\n        let map = new Map<string, cc.Node>();\n        UIUtils.createSubNodeMap(node, map);\n        return new UIContainer(map);\n    }\n}\n\nexport class UIContainer {\n    /** 所有节点集合 */\n    private _uiNodesMap: Map<string, cc.Node>;\n\n    // 点击音效\n    private _clickSound = \"commonRes/sound/btn_click\";\n    // 默认bundle\n    private _bundleName = 'components';\n\n    public constructor(nodesMap: Map<string, cc.Node>) {\n        this._uiNodesMap = nodesMap;\n        this.preloadClickEffect();\n    }\n    /**\n     * 根据节点名字获取节点\n     * @param {string}name 节点名字\n     * @return {cc.Node}\n     */\n    public getNode(name: string): cc.Node {\n        return this._uiNodesMap.get(name);\n    }\n\n    /**\n     * 根据节点名字和组件类型获取组件对象\n     * @param {string}name 节点名字\n     * @param {{prototype: cc.Component}}com 组建类型\n     * @return {cc.Component}\n     */\n    public getComponent<T extends cc.Component>(name: string, com: { prototype: T }): T {\n        let node = this._uiNodesMap.get(name);\n        if (node) {\n            return node.getComponent(com);\n        }\n        return null;\n    }\n\n    /**\n     * 注册或发送点击事件，默认带点击音效\n     * @param {cc.Node | string} node 事件节点  \n     * @param {string | (event: any) => void} handler 事件名称 | 事件回调函数 \n     * @param {any} target 目标 \n     * @param {any} param 参数 \n     * @param {string} sound 声音，有默认 \n     * @param {string} bundleName bundle名称 默认components\n     */\n    public onClick<T extends (event: any) => void>(node: cc.Node | string, handler: T, target?: any, param?: any, sound?: string, bundleName?: string | cc.AssetManager.Bundle): void {\n        if (!node) {\n            LogSystem.warn(`onClick参数node不能为空：${node}`);\n            return;\n        }\n        let tempNode: cc.Node = null;\n        if (typeof node === \"string\") {\n            tempNode = this.getNode(node);\n        } else {\n            tempNode = node;\n        }\n        tempNode.on(cc.Node.EventType.TOUCH_START, (event) => {\n            let soundName = (typeof sound == \"string\") ? sound : this._clickSound;\n            let bundle = (typeof bundleName == \"string\") ? bundleName : this._bundleName;\n            kit.manager.Audio.playEffect(bundle, soundName);\n            if (handler) { handler.call(target, param); }\n\n        }, target);\n    }\n\n    /**\n     * 移除节点的点击事件\n     * @param {cc.Node | string} node 事件节点 \n     */\n    public offClick(node: cc.Node | string): void {\n        if (!node) {\n            LogSystem.warn(`offClick参数node不能为空：${node}`);\n            return;\n        }\n        let tempNode: cc.Node = null;\n        if (typeof node === \"string\") {\n            tempNode = this.getNode(node);\n        } else {\n            tempNode = node;\n        }\n        tempNode.off(cc.Node.EventType.TOUCH_START);\n    }\n\n    preloadClickEffect() {\n        ResLoader.loadRes(this._clickSound, cc.AudioClip, () => { }, this._bundleName);\n    }\n\n}\n","export default class UrlUtils {\n    /**\n     * 获取当前url页面后面的参数\n     * @param key:要获取参数键值\n     * @return 返回获取对应键的值，如果没有获取到键就返回一个''空字符串\n     */\n    static getQueryString(key: string): string {\n        let reg = new RegExp(key + '=([^&]*)(?:&)?');\n        let rs = window.location.search.substr(1).match(reg);\n        if (rs != null) return rs[1];\n        return null;\n    }\n\n    /**\n     * 获取json中的url\n     * @param {*} jsonObj\n     * @param {string[]} type\n     * @returns {string[]}\n     * @memberof UrlUtils\n     */\n    static getUrlArrayByFileType(jsonObj, type: string): string[] {\n        console.log(`getUrlArrayByFileType`)\n        if (!jsonObj) {\n            console.log('jsonObj is null , please check your json!!!')\n            return\n        }\n        let urls: string[] = []\n        let len = type.length\n        function traverseJson(obj) {\n            for (let o in obj) {\n                if (typeof (obj[o]) === 'object') {\n                    traverseJson(obj[o])\n                } else if (typeof (obj[o]) === 'string') {\n                    if (obj[o].slice(-len, obj[o].length) === type) {\n                        urls.push(obj[o])\n                    }\n                }\n            }\n        }\n        traverseJson(jsonObj)\n        if (urls.length > 1) {/** 去重 */\n            let list = [urls[0]]\n            urls.sort()\n            for (let i = 0; i < urls.length; i++) {\n                if (urls[i] !== list[list.length - 1]) {\n                    list.push(urls[i])\n                }\n            }\n            return list\n        }\n        return urls\n    }\n\n    static parseUrl(url: string): any {\n        let m = url.match(/^(([^:\\/?#]+:)?(?:\\/\\/((?:([^\\/?#:]*):([^\\/?#:]*)@)?([^\\/?#:]*)(?::([^\\/?#:]*))?)))?([^?#]*)(\\?[^#]*)?(#.*)?$/),\n            r = {\n                hash: m[10] || \"\",                   // #asd\n                host: m[3] || \"\",                    // localhost:257\n                hostname: m[6] || \"\",                // localhost\n                href: m[0] || \"\",                    // http://username:password@localhost:257/deploy/?asd=asd#asd\n                origin: m[1] || \"\",                  // http://username:password@localhost:257\n                pathname: m[8] || (m[1] ? \"/\" : \"\"), // /deploy/\n                port: m[7] || \"\",                    // 257\n                protocol: m[2] || \"\",                // http:\n                search: m[9] || \"\",                  // ?asd=asd\n                username: m[4] || \"\",                // username\n                password: m[5] || \"\"                 // password\n            };\n        if (r.protocol.length == 2) {\n            r.protocol = \"file:///\" + r.protocol.toUpperCase();\n            r.origin = r.protocol + \"//\" + r.host;\n        }\n        r.href = r.origin + r.pathname + r.search + r.hash;\n        return m && r;\n    }\n    // parseUrl(\"http://username:password@localhost:257/deploy/?asd=asd#asd\");\n\n    static getUrlPathName(url: string): string {\n        let ret: any = this.parseUrl(url);\n        if (ret && ret.pathname) {\n            return ret.pathname;\n        }\n        return \"\"\n    }\n\n}","import IPlatform from \"./IPlatform\";\n\nexport default class WebAdapter implements IPlatform {\n    public packageName: string = '';\n    public isPrintLog: boolean = true;\n    public onGameExit(): void {\n        // console.log(`onGameExit`)\n    }\n    public onGameReady(): void {\n        // console.log('onGameReady')\n        // GameInfo.instance.hasCalledOnGameReady = true;\n    }\n    public toast(message: string): void {\n        // console.error(message);\n    }\n\n    callFunction(funcName: string, parm: string): void {\n        throw new Error(\"Method not implemented.\");\n    }\n    callFunctionResult(funcName: string, parm: string, moduleName: string) {\n        return {};\n    }\n}\n","import ResLoader from \"../framework/load/ResLoader\";\nimport { kit } from \"../kit\";\nimport LogSystem from \"../system/log/LogSystem\";\n\n/** 音频类型枚举 */\nexport enum MusicType {\n    SOUND,  // 音效\n    MUSIC,  // 音乐\n    LOOP_SOUND     // 循环音效\n}\n\n/** 音频工具类 */\nexport default class AudioUtil {\n    /** 背景音乐缓存池 */\n    private static _musicPool: Map<string, __AudioSource> = new Map<string, __AudioSource>();\n    /** 音效缓存池 */\n    private static _soundPool: Map<string, __AudioSource[]> = new Map<string, __AudioSource[]>();\n    /** 循环音效 */\n    private static _loopSoundPool: Map<string, __AudioSource> = new Map<string, __AudioSource>();\n    /** 当前背景音乐 */\n    private static _curMusic: __AudioSource;\n    /** 当前音效 */\n    private static _curSound: string = \"\";\n    /** 上次播放音效时间 */\n    private static _lastSoundTime: number = 0;\n    /** 是否暂停所有音效 */\n    private static _pauseFlag: boolean = false;\n    /** 当前音频状态级别，数字越大越高 配合_pauseFlag判断 */\n    private static _level: number = 0;\n\n    private static getFixedPath(bundleName: string | cc.AssetManager.Bundle, path: string) {\n        let cachePath = '';\n        if (bundleName instanceof cc.AssetManager.Bundle) {\n            cachePath = bundleName.name\n        } else {\n            cachePath = bundleName\n        }\n        return `${cachePath}/${path}`\n    }\n    /**\n     * 播放音效\n     * @param {string} path 音效资源\n     */\n    public static playEffect(bundleName: string | cc.AssetManager.Bundle, path: string, finishCb?: () => void): void {\n        if (AudioUtil._pauseFlag) { return; }\n        let curTime = new Date().getTime();\n        if (path === AudioUtil._curSound) {\n            let tempTime = curTime - AudioUtil._lastSoundTime;\n            if (tempTime < 50) {\n                return;\n            }\n        }\n        AudioUtil._curSound = path;\n        AudioUtil._lastSoundTime = curTime;\n        let fixedPath = AudioUtil.getFixedPath(bundleName, path);\n        let source = AudioUtil.getEffectFromPool(fixedPath);\n        if (source) {\n            source.play(false, finishCb);\n        } else {\n            source = new __AudioSource(bundleName, path, MusicType.SOUND);\n            AudioUtil.addEffectToPool(fixedPath, source);\n            source.play(false, finishCb);\n        }\n    }\n\n    /** 暂停音效 */\n    public static stopEffect(): void {\n        AudioUtil._soundPool.forEach((value: __AudioSource[], key: string, map) => {\n            if (value) {\n                for (let source of value) {\n                    source.stop();\n                }\n            }\n        });\n    }\n\n    /** 播放循环音效 */\n    public static playLoopEffect(bundleName: string | cc.AssetManager.Bundle, path: string): void {\n        if (AudioUtil._pauseFlag) { return; }\n        let fixedPath = AudioUtil.getFixedPath(bundleName, path); \n        let source = AudioUtil._loopSoundPool.get(fixedPath);\n        if (!source) {\n            source = new __AudioSource(bundleName, path, MusicType.LOOP_SOUND);\n            AudioUtil._loopSoundPool.set(fixedPath, source);\n        }\n        source.play(true);\n    }\n\n    /** 暂停循环音效 */\n    public static stopLoopEffect(bundleName: string | cc.AssetManager.Bundle, path: string): void {\n        let fixedPath = AudioUtil.getFixedPath(bundleName, path); \n        let source = AudioUtil._loopSoundPool.get(fixedPath);\n        if (source) {\n            source.stop()\n        }\n    }\n\n    /**\n     * 播放音效\n     * @param {string} path 播放背景音乐\n     */\n    public static playMusic(bundleName: string | cc.AssetManager.Bundle, path: string): void {\n        if (AudioUtil._pauseFlag) { return; }\n        if (AudioUtil._curMusic) {\n            AudioUtil._curMusic.stop();\n        }\n        let fixedPath = AudioUtil.getFixedPath(bundleName, path);\n        let source = AudioUtil._musicPool.get(fixedPath);\n        if (source) {\n            source.play(true);\n        } else {\n            source = new __AudioSource(bundleName, path, MusicType.MUSIC);\n            AudioUtil._musicPool.set(fixedPath, source);\n            source.play(true);\n        }\n        AudioUtil._curMusic = source;\n    }\n\n    /** 暂停音效 */\n    public static stopMusic(): void {\n        if (AudioUtil._curMusic) {\n            AudioUtil._curMusic.stop();\n        }\n    }\n\n    public static passMusic(): void {\n        if (AudioUtil._curMusic) {\n            AudioUtil._curMusic.pause();\n        }\n    }\n\n    public static resumeMusic(): void {\n        if (AudioUtil._curMusic) {\n            AudioUtil._curMusic.resume();\n        }\n    }\n\n    /** 从音效对象池获取对象 */\n    public static getEffectFromPool(path: string): __AudioSource {\n        let list = AudioUtil._soundPool.get(path);\n        if (list) {\n            for (let source of list) {\n                if (!source.isPlaying()) {\n                    return source;\n                }\n            }\n        }\n        return null;\n    }\n\n    /** 像音效对象池添加对象 */\n    public static addEffectToPool(path: string, source: __AudioSource): void {\n        let list = AudioUtil._soundPool.get(path);\n        if (list) {\n            list.push(source);\n        } else {\n            list = [];\n            list.push(source);\n            AudioUtil._soundPool.set(path, list);\n        }\n    }\n\n    /**\n     * 设置暂停所有音效标志\n     * @param {boolean} flag 标志 true-暂停  false-恢复\n     * @param {number} level 设置状态级别，数字越大级别越高，高级别逻辑覆盖低级别，低级别不能覆盖高级别。\n     */\n    public static setPauseFlag(flag: boolean, level: number = 0): void {\n        AudioUtil._level = level;\n        AudioUtil._pauseFlag = flag;\n        if (flag) {\n            if (AudioUtil._curMusic) { AudioUtil._curMusic.pause(); }\n            AudioUtil.pauseLoopEffects();\n        } else {\n            if (AudioUtil._curMusic) { AudioUtil._curMusic.resume(); }\n            AudioUtil.resumeLoopEffects();\n        }\n    }\n\n    /** 暂停所有循环音效 */\n    public static pauseLoopEffects(): void {\n        AudioUtil._loopSoundPool.forEach((v: __AudioSource, key: string) => {\n            v.pause();\n        });\n    }\n\n    /** 恢复所有循环音效 */\n    public static resumeLoopEffects(): void {\n        AudioUtil._loopSoundPool.forEach((v: __AudioSource, key: string) => {\n            v.resume();\n        });\n    }\n\n    public static stopEffectByName(path: string) {\n        let list = AudioUtil._soundPool.get(path)\n        if (list) {\n            list.forEach((value) => {\n                value.stop()\n            })\n        }\n    }\n\n    /**\n     * 新版播放音效\n     * @param bundleName \n     * @param path \n     * @param isSingle 是否唯一\n     * @param isLoop 是否循环\n     * @returns \n     */\n    static async playEffectByName(bundleName: string | cc.AssetManager.Bundle, path: string, isSingle: boolean = true, isLoop: boolean = false) {\n        return new Promise<void>(resolve => {\n            if (AudioUtil._pauseFlag) {\n                resolve()\n                return\n            }\n\n            let curTime = new Date().getTime()\n            if (path === AudioUtil._curSound) {\n                let tempTime = curTime - AudioUtil._lastSoundTime\n                if (tempTime < 50) {\n                    resolve()\n                    return\n                }\n            }\n\n            let fixedPath = AudioUtil.getFixedPath(bundleName, path)\n\n            if (isSingle) {\n                AudioUtil.stopEffectByName(fixedPath)\n            }\n\n            AudioUtil._curSound = path;\n            AudioUtil._lastSoundTime = curTime;\n            \n            let source = null\n            if (isLoop) {\n                source = AudioUtil._loopSoundPool.get(fixedPath)\n            } else {\n                source = AudioUtil.getEffectFromPool(fixedPath)\n            }\n\n            if (source) {\n                source.play(isLoop, () => {\n                    resolve()\n                })\n            } else {\n                source = new __AudioSource(bundleName, path, MusicType.SOUND)\n                if (isLoop) {\n                    AudioUtil._loopSoundPool.set(fixedPath, source)\n                } else {\n                    AudioUtil.addEffectToPool(fixedPath, source)\n                }\n                source.play(isLoop, () => {\n                    resolve()\n                })\n            }\n        })\n    }\n\n    static destroyAudio(bundleName: string, path: string) {\n        let fixedPath = AudioUtil.getFixedPath(bundleName, path)\n        if (AudioUtil._soundPool.has(fixedPath)) {\n            AudioUtil.stopEffectByName(fixedPath)\n            let list = AudioUtil._soundPool.get(fixedPath)\n            list.forEach((element) => {\n                element.destroy()\n            })\n            AudioUtil._soundPool.delete(fixedPath)\n        }\n        if (AudioUtil._musicPool.has(fixedPath)) {\n            AudioUtil.stopMusic()\n            let clip = AudioUtil._musicPool.get(fixedPath)\n            clip.destroy()\n            AudioUtil._musicPool.delete(fixedPath)\n        }\n        if (AudioUtil._loopSoundPool.has(fixedPath)) {\n            AudioUtil.stopLoopEffect(bundleName, path)\n            let clip = AudioUtil._loopSoundPool.get(fixedPath)\n            clip.destroy()\n            AudioUtil._loopSoundPool.delete(fixedPath)\n        }\n    }\n}\n\nclass __AudioSource {\n    // 是否加载完成\n    private _loaded: boolean = false;\n    // 音频资源\n    private _audioSource: cc.AudioClip = null;\n    // bundle名称\n    private _bundleName: string | cc.AssetManager.Bundle;\n    // 音频路径\n    private _path: string = \"\";\n    // 音频类型\n    private _musicType: MusicType;\n    // 是否已被暂停\n    private _isStop: boolean;\n\n    private state = {} as any\n\n    public constructor(bundleName: string | cc.AssetManager.Bundle, path: string, type: MusicType) {\n        this._bundleName = bundleName;\n        this._path = path;\n        this._musicType = type;\n    }\n\n    /**\n     * 音频加载接口\n     * @param {() => void} cb 加载完成回调\n     */\n    private loadRes(cb: () => void): void {\n        if (!this._loaded) {\n            ResLoader.loadRes(this._path, cc.AudioClip, (err: any, res: cc.AudioClip) => {\n                if (err) {\n                    LogSystem.warn(`音频资源加载出错:${this._path}`);\n                } else {\n                    this._audioSource = res;\n                    this._loaded = true;\n                    if (cb) { cb(); }\n                }\n            }, this._bundleName);\n        }\n    }\n\n    public play(isLoop?: boolean, cb?: () => void): void {\n        this._isStop = false;\n        if (this._loaded) {\n            this.stop();\n            // this._audioSource.loop = isLoop;\n            // this._audioSource.play();\n            if (!isLoop) {\n                isLoop = false\n            }\n            this.state.isLoop = isLoop;\n            this.state.isPlaying = true;\n            if (this._musicType == MusicType.MUSIC) {\n                this.state.id = cc.audioEngine.playMusic(this._audioSource, isLoop);\n            } else {\n                this.state.id = cc.audioEngine.playEffect(this._audioSource, isLoop);\n            }\n            if (cb) {\n                let duration = this._audioSource.duration;\n                kit.system.timer.doOnce(duration * 1000, () => {\n                    cb();\n                }, this, null, false)\n            }\n        } else {\n            this.loadRes(() => {\n                if (!this._isStop) {\n                    this.play(isLoop, cb);\n                }\n            });\n        }\n    }\n\n    async playEffect(isLoop?: boolean) {\n        return new Promise<void>(resolve => {\n            this.play(isLoop, () => {\n                resolve()\n            })\n        })\n    }\n\n    public isPlaying(): boolean {\n        return this.state.isPlaying;\n    }\n\n    public stop(): void {\n        this._isStop = true;\n        if (this._loaded) {\n            // this._audioSource.stop();\n            if (this.state.id != null && this.state.id != undefined) {\n                if (this._musicType == MusicType.MUSIC) {\n                    cc.audioEngine.stopMusic();\n                } else {\n                    cc.audioEngine.stopEffect(this.state.id);\n                }\n            }\n        }\n    }\n\n    public pause(): void {\n        if (this._loaded) {\n            // this._audioSource.pause();\n            if (this.state.id) {\n                if (this._musicType == MusicType.MUSIC) {\n                    cc.audioEngine.pauseMusic();\n                } else {\n                    cc.audioEngine.pauseEffect(this.state.id);\n                }\n            }\n        }\n    }\n\n    public resume(): void {\n        if (this._loaded) {\n            // this._audioSource.resume();\n            if (this.state.id) {\n                if (this._musicType == MusicType.MUSIC) {\n                    cc.audioEngine.resumeMusic();\n                } else {\n                    cc.audioEngine.resumeEffect(this.state.id);\n                }\n            }\n        }\n    }\n\n    public destroy(): void {\n        this.stop();\n        if (this._audioSource) {\n            // console.log('release audio:' + this._audioSource.name)\n            cc.assetManager.releaseAsset(this._audioSource)\n            this._audioSource.destroy()\n            this._audioSource = null;\n        }\n    }\n}","import { kit } from \"../kit\";\n\n/**\n * 加载bundle\n * @param bundleName\n * @returns\n */\nexport function loadBundle(bundleName: string): Promise<any> {\n    return new Promise((res, rej) => {\n        console.time(bundleName);\n        cc.assetManager.loadBundle(bundleName, (error: Error, bundle: cc.AssetManager.Bundle) => {\n            console.timeEnd(bundleName);\n            if (error) {\n                rej(error);\n                return;\n            }\n            res(bundle);\n        })\n    })\n    kit.manager.resources.loadRes\n}\n\n/**\n * 加载bundle,并返回其中的scene\n * @param bundleName\n * @param sceneName\n * @returns scene\n */\nexport function loadBundleScene(bundleName: string, sceneName: string): Promise<any> {\n    return new Promise((res, rej) => {\n        loadBundle(bundleName).then(bundle => {\n            bundle.loadScene(sceneName, (error: Error, scene: any) => {\n                if (error) {\n                    rej(error);\n                    return;\n                }\n                res(scene)\n            })\n        }).catch(error => {\n            rej(error);\n        })\n    })\n}\n\n/**\n * 加载bundle\n * @param nameList \n * @returns bundle列表\n */\nexport function loadBundles(nameList: string[]): Promise<any> {\n    let list: Promise<any>[] = [];\n    for (let key in nameList) {\n        list.push(\n            loadBundle(nameList[key])\n        )\n    }\n    return Promise.all(list);\n}","export default class BundleUtil {\n    /**\n     * 加载bundle\n     * @param bundleName\n     * @returns\n     */\n    public static loadBundle(bundleName: string): Promise<any> {\n        return new Promise((res, rej) => {\n            // tslint:disable-next-line: no-console\n            console.time(bundleName);\n            cc.assetManager.loadBundle(bundleName, (error: Error, bundle: cc.AssetManager.Bundle) => {\n                // tslint:disable-next-line: no-console\n                console.timeEnd(bundleName);\n                if (error) {\n                    rej(error);\n                    return;\n                }\n                res(bundle);\n            })\n        })\n    }\n\n    /**\n     * 加载bundle,并返回其中的scene\n     * @param bundleName\n     * @param sceneName\n     * @returns scene\n     */\n    public static loadBundleScene(bundleName: string, sceneName: string): Promise<any> {\n        return new Promise((res, rej) => {\n            BundleUtil.loadBundle(bundleName).then(bundle => {\n                bundle.loadScene(sceneName, (error: Error, scene: any) => {\n                    if (error) {\n                        rej(error);\n                        return;\n                    }\n                    res(scene)\n                })\n            }).catch(error => {\n                rej(error);\n            })\n        })\n    }\n\n    /**\n     * 加载bundle\n     * @param nameList\n     * @returns bundle列表\n     */\n    public static loadBundles(nameList: string[]): Promise<any> {\n        let list: Promise<any>[] = [];\n        for (let key in nameList) {\n            list.push(\n                BundleUtil.loadBundle(nameList[key])\n            )\n        }\n        return Promise.all(list);\n    }\n}\n","/**\n * 生命周期-创建完毕\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_CREATED代替\n */\nexport const LIFE_CYCLE_CREATED: string = \"lifeCycleCreated\";\n/**\n * 生命周期-就绪\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_READY\n */\nexport const LIFE_CYCLE_READY: string = \"lifeCycleReady\";\n/**\n * 生命周期-完成\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_COMPLETE\n */\nexport const LIFE_CYCLE_COMPLETE: string = \"lifeCycleComplete\";\n/**\n * 生命周期-阻塞事件\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_BLOCK\n */\nexport const LIFE_CYCLE_BLOCK: string = \"lifeCycleBlock\";\n/**\n * 生命周期-取消阻塞事件\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_UNBLOCK\n */\nexport const LIFE_CYCLE_UNBLOCK: string = \"lifeCycleUnblock\";\n/**\n * 生命周期-给子模块传参\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_PARAMS\n */\nexport const LIFE_CYCLE_PARAMS: string = \"lifeCycleParams\";\n/**\n * 生命周期-返回(不弹出确认框直接退出，用于有失败概念的游戏使用)\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_BACK\n */\nexport const LIFE_CYCLE_BACK: string = \"lifeCycleBack\";\n/**\n * 跟读模块-子游戏TO跟读模块事件\n * @deprecated 废弃，推荐使用Events.FOLLOW_CLIENT_TO_MODULE\n */\nexport const FOLLOW_CLIENT_TO_MODULE: string = 'followClientToModule';\n/**\n * 跟读模块-子游戏TO跟读模块事件\n * @deprecated 废弃，推荐使用Events.FOLLOW_MODULE_TO_CLIENT\n */\nexport const FOLLOW_MODULE_TO_CLIENT: string = 'followModuleToClient';\n/**\n * 视频 框架-子游戏\n * @deprecated 废弃，推荐使用Events.VIDEO_CLIENT_TO_MODULE\n */\nexport const VIDEO_CLIENT_TO_MODULE: string = 'voidClient2Module';\n/**\n *  视频 子游戏-框架\n * @deprecated 废弃，推荐使用Events.VIDEO_MODULE_TO_CLIENT\n */\nexport const VIDEO_MODULE_TO_CLIENT: string = 'voidModule2Client';\n/**\n * 控制容器顶部按钮 (用于有自身有二级返回的游戏使用)\n * @deprecated 废弃，推荐使用Events.SET_TOP_BAR_ACTIVE\n */\nexport const SET_TOP_BAR_ACTIVE: string = \"setTopBarActive\";\n\n\nexport default class Events {\n    // 生命周期-创建完毕\n    public static readonly LIFE_CYCLE_CREATED: string = \"lifeCycleCreated\";\n    // 生命周期-就绪\n    public static readonly LIFE_CYCLE_READY: string = \"lifeCycleReady\";\n    // 生命周期-完成\n    public static readonly LIFE_CYCLE_COMPLETE: string = \"lifeCycleComplete\";\n    // 生命周期-阻塞事件\n    public static readonly LIFE_CYCLE_BLOCK: string = \"lifeCycleBlock\";\n    // 生命周期-取消阻塞事件\n    public static readonly LIFE_CYCLE_UNBLOCK: string = \"lifeCycleUnblock\";\n    // 给子模块传参\n    public static readonly LIFE_CYCLE_PARAMS: string = \"lifeCycleParams\";\n    // 生命周期-返回(不弹出确认框直接退出，用于有失败概念的游戏使用)\n    public static readonly LIFE_CYCLE_BACK: string = \"lifeCycleBack\";\n\n    // 跟读模块-子游戏TO跟读模块事件\n    public static readonly FOLLOW_CLIENT_TO_MODULE: string = 'followClientToModule';\n    // 跟读模块-子游戏TO跟读模块事件\n    public static readonly FOLLOW_MODULE_TO_CLIENT: string = 'followModuleToClient';\n\n    // 视频 框架-子游戏\n    public static readonly VIDEO_CLIENT_TO_MODULE: string = 'voidClient2Module';\n    // 视频 子游戏-框架\n    public static readonly VIDEO_MODULE_TO_CLIENT: string = 'voidModule2Client';\n\n    // 控制容器顶部按钮 (用于有自身有二级返回的游戏使用)\n    public static readonly SET_TOP_BAR_ACTIVE: string = \"setTopBarActive\";\n\n    // 展示通用弹窗\n    public static readonly SHOW_COMMON_TIPS_POP: string = \"showCommonTipsPop\";\n}","import ClickCmpt from \"./component/ClickCmpt\";\nimport Events from \"./events/events\";\nimport ResLoader from \"./framework/load/ResLoader\";\nimport PlatformSystem from \"./framework/platform/PlatformSystem\";\nimport PopupManager from \"./manager/popupManager.ts/PopupManager\";\nimport ResourcesManager, { ResourceType } from \"./manager/ResourcesManager\";\nimport { VideoEventTransType } from \"./structure/ClientModuleEnum\";\nimport { VideoClient2Module, VideoModule2Client } from \"./structure/ClientModuleInterface\";\nimport LinkedList from \"./structure/LinkedNode\";\nimport AudioManager from \"./system/audio/AudioManager\";\nimport ErrorSystem from \"./system/error/ErrorSystem\";\nimport EventSystem from \"./system/event/EventSystem\";\nimport IEntity from \"./system/fsm/entity/IEntity\";\nimport Telegram from \"./system/fsm/message/Telegram\";\nimport IState from \"./system/fsm/state/IState\";\nimport StateMachine from \"./system/fsm/StateMachine\";\nimport LogSystem from \"./system/log/LogSystem\";\nimport HttpSystem from \"./system/net/http/HttpSystem\";\nimport TimerSystem from \"./system/timer/TimerSystem\";\nimport { LocalStorageUtils } from \"./utils/LocalStorageUtils\";\nimport { TimeUtils } from \"./utils/TimeUtils\";\nimport UIUtils, { UIContainer } from \"./utils/UIUtils\";\nimport ModelManager from \"./model/ModelManager\";\nimport ModelBase from \"./model/ModelBase\";\nimport { MessageBase } from \"./model/MessageBase\";\nimport NativeInfo, { NetworkType } from \"./model/NativeInfo\";\nimport SpotSystem from \"./system/log/SpotSystem\";\n\n/**\n * cocos-kit\n * ```\n * 版本1：统一命名空间，兼容老版本\n * 版本2：可动态替换kit，大厅可以本地调试子bundle项目\n * ```\n */\nexport namespace kit {\n    export namespace util {\n        export const Time = TimeUtils;\n        export const Ui = UIUtils;\n        export const UiContainer = UIContainer;\n        export const LocalStorage = LocalStorageUtils;\n    }\n    export namespace system {\n        export const log: LogSystem = LogSystem.instance;\n        export const error: ErrorSystem = ErrorSystem.instance;\n        export const timer: TimerSystem = TimerSystem.instance;\n        export const platform: PlatformSystem = PlatformSystem.instance;\n        export const spot: SpotSystem = SpotSystem.instance;\n    }\n    export namespace manager {\n        export const resources: ResourcesManager = ResourcesManager.instance;\n        export namespace Resources {\n            export const Type = ResourceType;\n        }\n        export const Audio = AudioManager;\n        export const Event = EventSystem;\n        export const Http = HttpSystem;\n        export const Popup = PopupManager;\n    }\n\n    export namespace consts {\n        export const Event = Events;\n    }\n\n    export namespace structure {\n        export const LinkList = LinkedList;\n    }\n\n    export namespace video {\n        export const videoTransType = VideoEventTransType;\n        export interface Module2Client extends VideoModule2Client { };\n        export interface Client2Module extends VideoClient2Module { };\n    }\n\n    export namespace component {\n        export const Click = ClickCmpt;\n    }\n\n    export class Loader extends ResLoader { };\n\n    export namespace fsm {\n        export interface Entity extends IEntity { };\n        export interface State<T extends Entity> extends IState<T> { };\n        export const StateManager = StateMachine;\n        export const Telegrams = Telegram;\n    }\n\n    export namespace model {\n        export const modelManager: ModelManager = ModelManager.instance;\n        export class modelBase extends ModelBase { }\n        export class messageBase extends MessageBase { }\n        export class nativeInfo extends NativeInfo { }\n        export namespace netWork {\n            export const networkType = NetworkType;\n        }\n    }\n}","export * from \"./DefaultLoader\";\r\nexport * from \"./ImageLoader\";\r\nexport * from \"./JsonLoader\";\r\nexport * from \"./AudioLoader\";\r\nexport * from \"./AtlasLoader\";\r\nexport * from \"./TextLoader\";\r\nexport * from \"./PrefabLoader\";\r\nexport * from \"./SpineLoader\";","import { LIFE_CYCLE_PARAMS } from \"../kit/events/events\";\nimport PlatformSystem from \"../kit/framework/platform/PlatformSystem\";\nimport AudioManager from \"../kit/system/audio/AudioManager\";\nimport EventSystem from \"../kit/system/event/EventSystem\";\nimport TimerSystem from \"../kit/system/timer/TimerSystem\";\nimport { loadBundles } from \"../kit/utils/bundleUtils\";\n\nconst { ccclass, property } = cc._decorator;\n\nconst cdn_root = 'https://math-thinking.oss-cn-beijing.aliyuncs.com/qt/tools/book/ice-v1.2'\nconst book_id = 'v5'\nconst CONFIG = { id: 1, main: 'book_player', assets: [\n    // 'https://shi-xintao.github.io/bundleTest/EduRemark',\n    `${cdn_root}/internal-ice`,\n    `${cdn_root}/resources-ice`,\n    `${cdn_root}/main-ice`,\n    `${cdn_root}/${book_id}`,\n    'common', \n    'book_player', \n], params: {bundle:`${cdn_root}/${book_id}`,} }\n// const CONFIG = { id: 1, main: 'redSantaClaus', assets: ['common','templateGame','redSantaClaus'], params: { url: \"\" } }\n@ccclass\nexport default class main extends cc.Component {\n\n    @property(cc.Node)\n    contentNode: cc.Node = null;\n\n    private lessonNode: cc.Node = null;\n\n    onLoad() {\n        this.relayout()\n        cc.debug.setDisplayStats(false);\n        PlatformSystem.instance.init();\n        TimerSystem.instance.init();\n        AudioManager.init();\n\n        this.loadLocalProject();\n    }\n\n    private lock = false\n \n    public relayout() {\n        if (this.lock) {\n            return\n        }\n        this.lock = true\n        // 根据屏幕物理形状动态设置设计尺寸\n        let frameSize = cc.view.getFrameSize() // 屏幕尺寸\n        let designResolution = cc.Canvas.instance.designResolution\n        let designSize = cc.size(designResolution.width, designResolution.height)\n        cc.log(\"canvas designSize:\", designSize)\n        let frameAspectRatio = frameSize.width / frameSize.height\n        let designAspectRatio = designSize.width / designSize.height\n        let screenSize = { ...designSize } as cc.Size\n \n        if (frameAspectRatio < designAspectRatio) {\n            screenSize.height = Math.ceil(designSize.width / frameAspectRatio)\n        } else {\n            screenSize.width = Math.ceil(designSize.height * frameAspectRatio)\n        }\n        // 设置实际的设计尺寸(更改canvas的形状)\n        cc.Canvas.instance.designResolution = screenSize\n \n        this.lock = false\n    }\n\n    // 加载课程bundle\n    private loadLocalProject(): void {\n        let list: string[] = []\n        CONFIG.assets.forEach((url: string) => {\n            list.push(`${url}`)\n        });\n        console.log(\"list: \", list);\n\n        let bundle: cc.AssetManager.Bundle = null\n        loadBundles(list).then((res: cc.AssetManager.Bundle[]) => {\n            bundle = res.find((element: cc.AssetManager.Bundle) => {\n                return element.name === CONFIG.main\n            })\n            // 加载\n            bundle.load(`${CONFIG.main}`, cc.Prefab, (error: Error, prefab: cc.Prefab) => {\n                if (error) {\n                    cc.error(error);\n                    return;\n                }\n                this.lessonNode = cc.instantiate(prefab);\n                let comp = this.lessonNode.getComponent(\"BaseChapterComponent\");\n                comp && comp.initParams(CONFIG.params);\n                this.contentNode.addChild(this.lessonNode);\n\n                //后面回废弃\n                TimerSystem.instance.doFrameOnce(1, () => {\n                    EventSystem.emit(LIFE_CYCLE_PARAMS, CONFIG.params);\n                });\n            })\n\n        }).catch((error) => {\n            cc.error(error)\n        })\n    }\n}\n"],"file":"index.js"}