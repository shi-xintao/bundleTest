[1,0,0,[["cc.TextAsset",["_name","text"],1]],[[0,0,1,3]],[[0,"使用指南","# Game Kit\n## 模块划分\n功能分为两大模块，分别为：核心层、引擎层。通过git子模块功能嵌入子游戏项目。\n### 核心层\n通用的工具库，定位于基础功能，并且不依赖任何游戏引擎。开发使用纯ts代码书写。定位跨引擎使用的基础工具集\n### 引擎层\n通用的游戏逻辑，但是会依赖一些游戏引擎的API。引擎层可细分为：\n#### 业务逻辑\n纯游戏引擎代码的调用，不涉及UI的实现及调用，如ccc的jsb调用等。\n#### 引擎UI业务\n依赖具体游戏引擎UI实现的部分，如ccc的预制体等。\n## 功能划分及命名\n### util\nutil存放一些简单的工具集，单纯的ts或js逻辑。如时间格式化、字符格式化等\n### system\nsystem目录下存放一个类可以实现的功能。如日志系统等。\n### framework\n该目录下存放一个单独的功能框架，该功能由若干文件组合实现。如状态机。\n## 版本控制\n使用git分支开发，不同版本对应不同分支。\n### 版本号\n版本号采用3位数字控制，如1.0.2\n* 第一位表示，引擎大版本，如：架构改变，目录结构变化\n* 第二位表示，接口有变化，如：方法的入参有变化，方法的删除等\n* 第三位表示，方法的内部实现有改动，如：优化内部实现逻辑，新增方法等\n\n## 对比老工具集区别\n### 使用\nsh通过git子模块功能嵌入子游戏项目。详情参看[知识库](dingtalk://dingtalkclient/page/link?url=https%3A%2F%2Fnotes.dingtalk.com%2Fdoc%2FxMEGYdrNeDRZ1moQ%3ForgId%3D7845096%26ddtab%3Dtrue%26dd_progress%3Dfalse%26showmenu%3Dfalse)game-kit子模块使用\n### 模块划分\n拆分原ivy命名空间，及window.ivy入口。将功能分散，按需引入，减少不必要的引用，减少生成ivy-all.d.ts及ivy-all.min.js的过程。\n#### 原生交互接口\n合并env.ts与native.ts逻辑到PlatfromSystem中。\n#### loade\nutils的load加载逻辑移动到LoadeSystem中。\n#### http\n* ccc utils的net网络请求逻辑移动到HttpSystem中。\n* laya \n### 命名\nplayAudioAsync2，playAudioAsync3，playAudioBackGround，删除其中的utils.load、cc.loader.loadRes等加载功能代码交由其他模块负责，平台适配层仅实现平台相关功能。\n\n"]],0,0,[],[],[]]