{"version":3,"sources":["assets/bundles/guaguale/src/GuaMain.ts","assets/bundles/guaguale/src/Guagua.ts"],"names":["Hand_1","require","ChapterGameComponent_1","Guagua_1","_a","cc","_decorator","ccclass","property","GuaMain","_super","__extends","_this","apply","this","arguments","prefab","bgColor","color","bgFrame","cardFrames","texts","voices","bg","slot","list","offsetX","offsetY","currIndex","handPrefab","hand","poses","ready","moveDuration","span","timerTween","idleSecs","GuaMain_1","prototype","getPos","index","length","mid","Math","floor","pos","v2","offx","offy","x","y","onLoad","instance","find","node","_loop_1","i","ticket","instantiate","this_1","qua","getComponent","default","addChild","setBgFrame","setCardFrame","setCardText","onCompleted","bind","zIndex","width","push","scheduleOnce","launchTicket","handNode","active","onHandCompleted","tween","to","easing","delay","call","onReady","start","playMonster","currGua","isDragging","startGuide","Object","defineProperty","get","gua","startGuideTimer","stop","setTargetNode","mask_img","animIndex","count","playSwipeByAngle","hide","stopGuideTimer","console","log","reportRoundCompleted","by","func","then","__decorate","type","Prefab","displayName","SpriteFrame","String","AudioClip","exports","Guagua","mask","graphics","question","monster","percent","f","graphics2","percentProgress","isDebug","card","sound","mask_light","currResolve","grid","rectWidth","lines","currPos","Vec2","ZERO","lastPos","lineWidth","completed","text","Mask","lineCap","Graphics","LineCap","ROUND","lineJoin","LineJoin","sp","Skeleton","ProgressBar","Sprite","on","Node","EventType","TOUCH_START","onTouchBegan","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","genGrids","setCompleteListener","cb","col","ceil","row","height","j","rx","ry","rect","hit","isRectCrossLine","line","linePointX1","linePointY1","linePointX2","end","linePointY2","rectangleLeftTopX","rectangleLeftTopY","rectangleRightBottomX","rectangleRightBottomY","lineHeight","c","temp","temp1","hitRect","drawCircle","onClicked","event","currX","getLocationX","currY","getLocationY","convertToNodeSpaceAR","moveTo","getPercent","ret","i_1","ellipse","fillColor","fill","drawLine","lineTo","stroke","progress","onCompletedGua","opacity","complete_delay","deltaX","getDeltaX","deltaY","getDeltaY","frame","spriteFrame","txt","setAudioClip","name","loop","Promise","resolve","setAnimation","Component"],"mappings":"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","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport Hand from \"../../../common/hand/Hand\";\nimport ChapterGameComponent from \"../../../common/scripts/ChapterGameComponent\";\nimport Guagua from \"./Guagua\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GuaMain extends ChapterGameComponent {\n\n    @property({ type: cc.Prefab, displayName: '奖券模板' })\n    prefab: cc.Prefab = null;\n\n    @property({ displayName: '背景颜色' })\n    bgColor = cc.color(254, 226, 216); //bgColor = cc.color(254, 226, 216);\n\n    @property({ type: cc.SpriteFrame, displayName: '奖券底板' })\n    bgFrame: cc.SpriteFrame = null\n\n    @property({ type: [cc.SpriteFrame], displayName: '单词卡' })\n    cardFrames: cc.SpriteFrame[] = []\n    // LIFE-CYCLE CALLBACKS:\n    @property({ type: [cc.String], displayName: '单词文本' })\n    texts = []\n\n    @property({ type: [cc.AudioClip], displayName: '单词语音' })\n    voices: cc.AudioClip[] = []\n\n    private bg: cc.Node = null\n    private slot: cc.Node = null\n\n    list: Guagua[] = []\n    private offsetX = 20\n    private offsetY = 20\n\n    private currIndex = 0\n\n    static instance: GuaMain = null\n\n    @property({ displayName: 'hand', type: cc.Prefab })\n    handPrefab: cc.Prefab = null\n\n    hand: Hand = null\n\n    getPos(index: number) {\n        if (this.cardFrames.length % 2 == 1) {//奇数个\n            let mid = Math.floor(this.cardFrames.length / 2)\n            let pos = cc.v2(0, 0)\n            let offx = this.offsetX * (index - mid)\n            let offy = this.offsetY * (index - mid)\n            pos.x += offx\n            pos.y += offy\n            return pos\n        } else {\n            let mid = Math.floor(this.cardFrames.length / 2)\n            let pos = cc.v2(this.offsetX / 2, this.offsetY / 2)\n            let offx = this.offsetX * (index - mid)\n            let offy = this.offsetY * (index - mid)\n            pos.x += offx\n            pos.y += offy\n            return pos\n        }\n    }\n\n    poses: cc.Vec2[] = []\n\n    ready = false\n    onLoad() {\n        GuaMain.instance = this\n        this.bg = cc.find('bg', this.node)\n        this.slot = cc.find('slot', this.node)\n        this.bg.color = this.bgColor\n        for (let i = 0; i < this.cardFrames.length; i++) {\n            let ticket = cc.instantiate(this.prefab)\n            let qua = ticket.getComponent(Guagua)\n            qua.index = i\n            this.node.addChild(qua.node)\n            qua.setBgFrame(this.bgFrame)\n            qua.setCardFrame(this.cardFrames[i])\n            qua.setCardText(this.texts[i])\n            qua.onCompleted = this.onCompleted.bind(this)\n            qua.node.zIndex = 100 - i\n            let pos = this.getPos(i)\n            qua.node.x = this.node.width + 450\n            qua.node.y = pos.y\n            qua['main'] = this\n            this.poses.push(pos)\n            this.list.push(qua)\n            this.scheduleOnce(() => {\n                this.launchTicket(i, qua.node)\n            }, this.span * (this.cardFrames.length - i - 1))\n        }\n        let handNode = cc.instantiate(this.handPrefab)\n        handNode.active = false\n        this.node.addChild(handNode)\n        this.hand = handNode.getComponent(Hand)\n        this.hand.node.zIndex = 300\n        this.hand.onCompleted = this.onHandCompleted.bind(this)\n    }\n\n    private moveDuration = 0.7\n    private span = 0.2\n    launchTicket(index, node) {\n        cc.tween(node).to(this.moveDuration, { x: this.poses[index].x }, { easing: 'sineOut' }).delay(0.5).call(() => {\n            if (index == this.poses.length - 1) {\n                this.ready = true\n                this.onReady()\n            }\n        }).start()\n    }\n\n    onReady() {\n        // this.scheduleOnce(() => {\n\n        // }, 1)\n        this.playMonster(() => {\n            if (this.currGua.isDragging) {\n                return\n            }\n            this.startGuide()\n        })\n    }\n\n    get currGua(){\n        let gua = this.list[this.currIndex]\n        return gua\n    }\n\n    timerTween: cc.Tween = null\n    start() {\n    }\n\n    onHandCompleted() {\n        this.startGuideTimer()\n    }\n\n    private idleSecs = 6\n    startGuideTimer() {\n        if (this.timerTween != null) {\n            this.timerTween.stop()\n            this.timerTween = null\n        }\n        this.timerTween = cc.tween(this.node).delay(this.idleSecs).call(() => {\n            this.startGuide()\n        }).start()\n    }\n\n    startGuide() {\n        // this.hand.playSwipeByAngle(0, 'zuo-you', false)\n        let gua = this.list[this.currIndex]\n        this.hand.setTargetNode(gua.mask_img, this.node, 50)\n\n        let animIndex = 1\n        let count = 0\n        this.hand.onCompleted = () => {\n            if (animIndex == 0) {\n                animIndex = 1\n                this.hand.playSwipeByAngle(0, 'zuo-you', false)\n            } else if (animIndex == 1) {\n                if (count == 0) {\n                    count++\n                    this.hand.playSwipeByAngle(0, 'zuo-you', false)\n                } else {\n                    this.hand.hide()\n                    this.onHandCompleted()\n                }\n            }\n        }\n\n        this.hand.playSwipeByAngle(0, 'zuo-you', false)\n    }\n\n    stopGuideTimer() {\n        if (this.timerTween != null) {\n            this.timerTween.stop()\n            this.timerTween = null\n        }\n        this.hand.hide()\n    }\n\n    onCompleted(index: number) {\n        console.log('guagua index:' + index + \" onCompleted\")\n        let gua = this.list[index]\n        this.reportRoundCompleted(index, true)\n        cc.tween(gua.node).by(0.5, { x: -this.node.width }, { easing: 'sineOut' }).call(() => {\n            this.currIndex++\n            this.playMonster(() => {\n\n            })\n        }).start()\n    }\n\n    playMonster(func) {\n        let qua = this.list[this.currIndex]\n        qua.playMonster('yihuo', false).then(() => {\n            qua.playMonster('idle', true)\n            func()\n        })\n    }\n    // update (dt) {}\n}\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport GuaMain from \"./GuaMain\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Guagua extends cc.Component {\n    bg: cc.Node = null\n    mask: cc.Node = null\n    graphics: cc.Graphics = null\n    question: cc.Node = null\n    monster: sp.Skeleton = null\n    percent: { f: number, i: number } = { f: 0, i: 0 }\n    graphics2: cc.Graphics = null\n    mask_img: cc.Node = null\n    percentProgress: cc.ProgressBar = null\n    isDebug = false\n    card: cc.Sprite = null\n    sound: cc.AudioClip = null\n    index = 0\n    onCompleted: Function = null\n    mask_light: cc.Node = null\n    currResolve: Function = null\n\n    isDragging = false\n\n    onLoad() {\n        this.bg = cc.find('bg', this.node)\n        this.question = cc.find('question', this.bg)\n        this.mask = cc.find('mask', this.bg)\n        this.mask_light = cc.find('mask_light', this.bg)\n        this.mask_img = cc.find('mask_board', this.mask)\n        this.graphics = this.mask.getComponent(cc.Mask)['_graphics'] as cc.Graphics\n        this.graphics.lineWidth = this.lineWidth\n        this.graphics.lineCap = cc.Graphics.LineCap.ROUND\n        this.graphics.lineJoin = cc.Graphics.LineJoin.ROUND\n        this.graphics2 = cc.find('g', this.bg).getComponent(cc.Graphics)\n        this.monster = cc.find('monster', this.bg).getComponent(sp.Skeleton)\n        this.percentProgress = cc.find('progress', this.node).getComponent(cc.ProgressBar)\n        this.card = cc.find('card', this.question).getComponent(cc.Sprite)\n        this.bg.on(cc.Node.EventType.TOUCH_START, this.onTouchBegan, this)\n        this.bg.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this)\n        this.bg.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this)\n        this.bg.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this)\n\n        this.genGrids()\n\n        this.monster.setCompleteListener(() => {\n            if (this.currResolve) {\n                const cb = this.currResolve\n                this.currResolve = null\n                cb()\n            }\n        })\n    }\n\n    start() {\n        // this.percentProgress.progress = 1.0\n    }\n\n    private grid: { rect: cc.Rect, hit: boolean }[] = []\n    private rectWidth = 50\n    /**\n     * 用于计算完成百分比\n     */\n    genGrids() {\n        let col = Math.ceil(this.card.node.width / this.rectWidth)\n        let row = Math.ceil(this.card.node.height / this.rectWidth)\n        let offsetX = -this.card.node.width / 2\n        let offsetY = -this.card.node.height / 2\n        for (let i = 0; i < row; i++) {\n            for (let j = 0; j < col; j++) {\n                let rx = offsetX + (j * this.rectWidth) - this.rectWidth / 4\n                let ry = offsetY + (i * this.rectWidth) - this.rectWidth / 4\n                let rect = cc.rect(rx, ry, this.rectWidth, this.rectWidth)\n                this.grid.push({ rect: rect, hit: false })\n            }\n        }\n    }\n\n\n    static isRectCrossLine(rect: cc.Rect, line: { start: cc.Vec2, end: cc.Vec2 }) {\n        let linePointX1 = line.start.x\n        let linePointY1 = line.start.y\n        let linePointX2 = line.end.x\n        let linePointY2 = line.end.y\n        let rectangleLeftTopX = rect.x\n        let rectangleLeftTopY = rect.y + rect.height\n        let rectangleRightBottomX = rect.x + rect.width\n        let rectangleRightBottomY = rect.y\n        var lineHeight = linePointY1 - linePointY2;\n        var lineWidth = linePointX2 - linePointX1;  // 计算叉乘 \n        var c = linePointX1 * linePointY2 - linePointX2 * linePointY1;\n        if ((lineHeight * rectangleLeftTopX + lineWidth * rectangleLeftTopY + c >= 0 && lineHeight * rectangleRightBottomX + lineWidth * rectangleRightBottomY + c <= 0)\n            || (lineHeight * rectangleLeftTopX + lineWidth * rectangleLeftTopY + c <= 0 && lineHeight * rectangleRightBottomX + lineWidth * rectangleRightBottomY + c >= 0)\n            || (lineHeight * rectangleLeftTopX + lineWidth * rectangleRightBottomY + c >= 0 && lineHeight * rectangleRightBottomX + lineWidth * rectangleLeftTopY + c <= 0)\n            || (lineHeight * rectangleLeftTopX + lineWidth * rectangleRightBottomY + c <= 0 && lineHeight * rectangleRightBottomX + lineWidth * rectangleLeftTopY + c >= 0)) {\n\n            if (rectangleLeftTopX > rectangleRightBottomX) {\n                var temp = rectangleLeftTopX;\n                rectangleLeftTopX = rectangleRightBottomX;\n                rectangleRightBottomX = temp;\n            }\n            if (rectangleLeftTopY < rectangleRightBottomY) {\n                var temp1 = rectangleLeftTopY;\n                rectangleLeftTopY = rectangleRightBottomY;\n                rectangleRightBottomY = temp1;\n            }\n            if ((linePointX1 < rectangleLeftTopX && linePointX2 < rectangleLeftTopX)\n                || (linePointX1 > rectangleRightBottomX && linePointX2 > rectangleRightBottomX)\n                || (linePointY1 > rectangleLeftTopY && linePointY2 > rectangleLeftTopY)\n                || (linePointY1 < rectangleRightBottomY && linePointY2 < rectangleRightBottomY)) {\n                return false;\n            } else {\n                return true;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * 更新网格状态(百分比)\n     * @param line \n     */\n    hitRect(line: { start: cc.Vec2, end: cc.Vec2 }) {\n        for (let i = 0; i < this.grid.length; i++) {\n            const grid = this.grid[i];\n            if (Guagua.isRectCrossLine(grid.rect, line)) {\n                grid.hit = true\n                if (this.isDebug) {\n                    this.drawCircle(cc.v2(grid.rect.x + grid.rect.width / 2, grid.rect.y + grid.rect.width / 2))\n                }\n            }\n        }\n    }\n\n    private lines: { start: cc.Vec2, end: cc.Vec2 }[] = []\n\n    // update (dt) {}\n\n    onClicked() {\n        console.log('onclicked')\n    }\n\n    private currPos: cc.Vec2 = cc.Vec2.ZERO\n    private lastPos: cc.Vec2 = cc.Vec2.ZERO\n    private lineWidth = 60\n\n    private onTouchBegan(event: cc.Event.EventTouch) {\n        if (this.isDragging) {\n            return\n        }\n        if (!GuaMain.instance.ready) {\n            return\n        }\n        if (this.completed) {\n            return\n        }\n        this.isDragging = true\n        GuaMain.instance.stopGuideTimer()\n        let currX = event.getLocationX()\n        let currY = event.getLocationY()\n        // console.log('onTouchBegan ' + currX + ',' + currY)\n        let pos = this.mask.convertToNodeSpaceAR(cc.v2(currX, currY))\n        this.currPos.x = pos.x\n        this.currPos.y = pos.y\n        this.lastPos.x = pos.x\n        this.lastPos.y = pos.y\n        this.graphics.lineWidth = this.lineWidth\n        this.graphics.moveTo(pos.x, pos.y)\n    }\n\n    private getPercent() {\n        let ret = 0\n        for (let i = 0; i < this.grid.length; i++) {\n            const grid = this.grid[i];\n            if (grid.hit) {\n                ret++\n            }\n        }\n        // ret = Math.ceil(100 * ret / this.grid.length)\n        // if (ret > 100) {\n        //     ret = 100\n        // }\n        let f = ret / this.grid.length\n        let i = Math.ceil(100 * f)\n        if (i >= 90) {\n            f = 1.0\n            i = 100\n        }\n        return { f: f, i: i }\n    }\n\n    /**\n     * 调试用\n     * @param pos \n     */\n    private drawCircle(pos: cc.Vec2) {\n        console.log('drawCircle')\n        this.graphics2.ellipse(pos.x, pos.y, this.lineWidth / 4, this.lineWidth / 4)\n        this.graphics2.fillColor = cc.color(0, 0, 0, 255)\n        this.graphics2.fill()\n    }\n\n    private drawLine(pos: cc.Vec2) {\n        this.graphics.lineTo(pos.x, pos.y)\n        this.graphics.stroke()\n        this.graphics.moveTo(pos.x, pos.y)\n        let line = { start: cc.v2(this.lastPos.x, this.lastPos.y), end: cc.v2(pos.x, pos.y) }\n        this.lines.push(line)\n        this.lastPos.x = pos.x\n        this.lastPos.y = pos.y\n        this.hitRect(line)\n        this.percent = this.getPercent()\n        this.percentProgress.progress = this.percent.f\n\n        if (this.percent.i >= 90) {\n            if (this.completed == false) {\n                this.completed = true\n                this.onCompletedGua()\n            }\n        }\n\n    }\n\n    static complete_delay = 6\n    private completed = false\n    private onCompletedGua() {\n        this.mask_light.active = true\n        GuaMain.instance.stopGuideTimer()\n        this.playMonster('huangrandawu', false).then(() => {\n            this.playMonster('idle', true)\n\n        })\n        cc.tween(this.mask_img).to(0.5, { opacity: 0 }, { easing: 'sineOut' }).delay(Guagua.complete_delay).call(() => {\n            if (this.onCompleted) {\n                let cb = this.onCompleted\n                cb(this.index)\n            }\n        }).start()\n    }\n\n    private onTouchMove(event: cc.Event.EventTouch) {\n        if (!GuaMain.instance.ready) {\n            return\n        }\n        if (this.completed) {\n            return\n        }\n        let deltaX = event.getDeltaX()\n        let deltaY = event.getDeltaY()\n        this.currPos.x += deltaX\n        this.currPos.y += deltaY\n        this.drawLine(this.currPos)\n    }\n\n    private onTouchEnd(event: cc.Event.EventTouch) {\n        this.isDragging = false\n        if (this.completed) {\n            return\n        }\n        GuaMain.instance.startGuideTimer()\n    }\n\n    setBgFrame(frame: cc.SpriteFrame) {\n        if (frame) {\n            this.bg.getComponent(cc.Sprite).spriteFrame = frame\n        }\n    }\n\n    /**\n     * 设置卡片\n     * @param frame \n     */\n    setCardFrame(frame: cc.SpriteFrame) {\n        if (frame) {\n            this.card.spriteFrame = frame\n        }\n    }\n\n    text = ''\n    /**\n     * 设置文本\n     * @param txt \n     */\n    setCardText(txt) {\n        this.text = txt\n    }\n\n    /**\n     * 设置音频\n     * @param sound \n     */\n    setAudioClip(sound: cc.AudioClip) {\n        this.sound = sound\n    }\n\n\n\n    async playMonster(name, loop) {\n        return new Promise<void>(resolve => {\n            this.currResolve = resolve\n            this.monster.setAnimation(0, name, loop)\n        })\n    }\n}\n"],"file":"index.js"}