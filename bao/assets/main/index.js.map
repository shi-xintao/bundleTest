{"version":3,"sources":["assets/kit/system/interface/ASystem.ts","assets/kit/framework/platform/AndroidAdapter.ts","assets/kit/framework/load/base/AtlasLoader.ts","assets/kit/framework/load/base/AudioLoader.ts","assets/kit/system/audio/AudioManager.ts","assets/kit/framework/load/base/BaseLoader.ts","assets/kit/component/ClickCmpt.ts","assets/kit/structure/ClientModuleEnum.ts","assets/kit/structure/ClientTipsEnum.ts","assets/kit/manager/popupManager.ts/ConfirmPopup.ts","assets/kit/framework/platform/DebuggerAdapter.ts","assets/kit/framework/load/base/DefaultLoader.ts","assets/kit/utils/DelayUtils.ts","assets/kit/system/fsm/entity/EntityManager.ts","assets/kit/system/error/ErrorSystem.ts","assets/kit/system/event/EventEmitter.ts","assets/kit/system/event/EventSystem.ts","assets/kit/system/net/http/HttpState.ts","assets/kit/system/net/http/HttpSystem.ts","assets/kit/system/net/http/Http.ts","assets/kit/framework/load/base/ImageLoader.ts","assets/kit/framework/platform/IosAdapter.ts","assets/kit/framework/load/base/JsonLoader.ts","assets/kit/structure/LinkedNode.ts","assets/kit/framework/load/LoaderObserver.ts","assets/kit/utils/LocalStorageUtils.ts","assets/kit/system/log/LogSystem.ts","assets/kit/model/MessageBase.ts","assets/kit/system/fsm/message/MessageDispatcher.ts","assets/kit/system/fsm/message/MessageType.ts","assets/kit/model/ModelBase.ts","assets/kit/model/ModelManager.ts","assets/kit/utils/MonitorUtils.ts","assets/kit/model/NativeInfo.ts","assets/kit/model/NetHelper.ts","assets/kit/utils/NumberUtils.ts","assets/kit/utils/ParseTemplateUtils.ts","assets/kit/framework/platform/PlatformSystem.ts","assets/kit/utils/PoolUtils.ts","assets/kit/manager/popupManager.ts/PopupBase.ts","assets/kit/manager/popupManager.ts/PopupManager.ts","assets/kit/framework/load/base/PrefabLoader.ts","assets/kit/framework/load/ResLoader.ts","assets/kit/manager/ResourcesManager.ts","assets/kit/framework/load/base/SpineLoader.ts","assets/kit/system/log/SpotSystem.ts","assets/kit/system/fsm/StateMachine.ts","assets/kit/utils/StringUtils.ts","assets/kit/system/fsm/message/Telegram.ts","assets/kit/framework/load/base/TextLoader.ts","assets/kit/utils/TimeUtils.ts","assets/kit/system/timer/TimerSystem.ts","assets/kit/utils/UIUtils.ts","assets/kit/utils/UrlUtils.ts","assets/kit/framework/platform/WebAdapter.ts","assets/kit/utils/audioUtil.ts","assets/kit/utils/bundleUtils.ts","assets/kit/utils/bundleUtil.ts","assets/kit/events/events.ts","assets/bundles/testHitMonster/src/hitMonsterConfig.ts","assets/bundles/testHitMonster/src/hitMonsterMain.ts","assets/kit/kit.ts","assets/kit/framework/load/base/loader-index.ts","assets/scripts/main.ts"],"names":["ASystem","AndroidAdapter","this","packageName","isPrintLog","prototype","onGameExit","onGameReady","callFunction","cc","log","jsb","fileUtils","getWritablePath","toast","message","funcName","parm","moduleName","packagePath","reflection","callStaticMethod","callFunctionResult","result","BaseLoader_1","require","AtlasLoader","_super","__extends","loadNetRes","path","type","callback","assetManager","loadRemote","e","res","error","loadRemoteRes","Error","loadLocalRes","onProgress","bundle","load","resources","default","exports","AudioLoader","audioUtil_1","AudioManager","init","effectSwitch","sys","localStorage","getItem","EFFECT_TAG","musicSwitch","MUSIC_TAG","_effectFlag","_musicFlag","setEffectStatus","setMusicStatus","playEffect","bundleName","name","finishCb","playEffectByName","isSingle","isLoop","_a","sent","stopEffect","stopEffectByName","destroyAudio","playLoopEffect","stopLoopEffect","pauseLoopEffects","resumeLoopEffects","playMusic","_curMusic","_curBundle","stopMusic","passMusic","resumeMusic","flag","setItem","Object","defineProperty","get","BaseLoader","loadRes","options","onComplete","isNetRes","isRemoteRes","startsWith","ResLoader_1","AudioManager_1","LogSystem_1","_decorator","ccclass","property","ClickCmpt","_this","apply","arguments","clickSound","clickAudioEffect","clickEvents","onLoad","length","onCilckEventHandler","forEach","item","targeNode","target","tempCmpt","getComponent","onClick","handler","customEventData","node","param","clickEffect","sound","warn","on","Node","EventType","TOUCH_START","event","soundName","call","offClick","off","preloadClickEffect","AudioClip","__decorate","String","tooltip","Component","EventHandler","VideoEventTransType","TIPS_TYPE","PopupBase_1","ConfirmPopup","titleLabel","contentLabel","confirmBtn","registerEvent","onDestroy","unregisterEvent","TOUCH_END","onConfirmBtnClick","targetOff","updateDisplay","string","title","content","confirmCallback","hide","Label","DebuggerAdapter","DefaultLoader","Delay","k","v","key","time","DelayUtils","DelayUtils_1","CheckDelay","delay","delayMap","tick","Date","getTime","current","button","EntityManager","_length","_entityMap","_instance","release","registerEntity","newEntity","sid","getEntityFromID","id","removeEntity","entity","getAllEntity","getAvailableEntity","clazz","availableEntity","createEntity","ErrorSendInterval","RATE_DEFAULT","RATE_LOW","ErrorSystem","errorMap","isNative","outAdapter","Promise","rea","window","__errorHandler","errorMessage","file","line","exception","JSON","stringify","addEventListener","reason","stack","unhandledrejection","onerror","EventEmitter","getListeners","events","_getEvents","response","RegExp","hasOwnProperty","test","addListener","listener","isValidListener","TypeError","listeners","getListenersAsObject","listenerIsWrapped","indexOfListener","push","once","flattenListeners","flatListeners","i","Array","addOnceListener","defineEvent","defineEvents","removeListener","index","splice","addListeners","manipulateListeners","removeListeners","remove","value","single","multiple","removeEvent","_events","removeAllListeners","emitEvent","args","_i","listenersMap","slice","__spreadArrays","onceReturnValue","trigger","emit","_onceReturnValue","set","EventEmitter_1","EventSystem","_emitter","eventData","params","data","HttpStateMap","map","split","element","temp","getErrorInfoById","Http_1","HttpSystem","__awaiter","httpGet","url","header","console","resolve","reject","headerJson","Content-Type","json","parse","xhr","Http","onError","errInfo","openGet","getUrl","setRequestHeader","send","catch","httpPost","body","openPost","HttpState_1","ActiveXObject","timeout","open","method","GET","spliceUrl","POST","_onComplete","_onError","onreadystatechange","onReadyStateChange","bind","abort","getAllResponseHeaders","dataStr","substr","indexOf","readyState","ioError","status","self","instance","DONE","stringifyPrimitive","isFinite","obj","sep","eq","undefined","keys","ks","encodeURIComponent","isArray","join","s","UNSENT","OPENED","HEADERS_RECEIVED","LOADING","ImageLoader","tex","SpriteFrame","IosAdapter","JsonLoader","LinkedNode","previous","LinkedList","head","next","from","array","linkedList","shift","reduce","find","cb","currentNode","insert","newElement","newNode","previousNode","n","rawNextNode","deletedNode","LoaderObserverParam","LocalStorageUtils","removeItem","setObject","getObject","setBool","toString","getBool","setInt","getInt","Number","setString","getString","kit_1","ASystem_1","LogSystem","isDebug","gameName","gameVersion","isPrintTime","print","messages","toLocaleString","obj2String","str","kit","system","info","MessageBase","showTips","Telegram_1","EntityManager_1","MessageDispatcher","SEND_MSG_IMMEDIATELY","NO_ADDITIONAL_INFO","PriorityQ","TreeSet","a","b","showList","Discharge","pReceiver","telegram","stateMachine","HandleMessage","DispatchMessage","sender","receiver","msg","pSender","DispatchTime","now","add","DispatchDelayedMessages","isEmpty","first","Receiver","DispatchSimpleMessage","sort","sortFun","delete","size","Set","MessageType","NetHelper_1","ModelBase","cbMap","Map","sendMessage","regiestReponse","sendMessageWithOutToken","registerCallBack","messageBase","callBack","messageApi","registCb","responseMessage","api","clear","LocalStorageUtils_1","NativeInfo_1","ModelManager","_modelList","ModelManager_1","testToken","userToken","userId","countryName","testPhoneInfo","generateInfo","_timestamp","errorCb","setHostUrl","currentTimeStamp","userInfo","token","registerModel","model","m","getModel","has","removeAllModel","clearAllModel","keyList","keyList_1","reInitAllModel","keyList_2","MonitorUtils","fps","elem","document","createElement","setAttribute","style","fontSize","appendChild","setInterval","performance","innerHTML","getInfo","times","refreshLoop","requestAnimationFrame","showData","memory","jsHeapSizeLimit","toFixed","totalJSHeapSize","usedJSHeapSize","t","timing","responseStart","navigationStart","domainLookupEnd","domainLookupStart","responseEnd","requestStart","connectEnd","connectStart","loadEventEnd","loadEventStart","PlatformSystem_1","NativeInfo","isBrowser","adapter","getNetworkStatus","NetworkType","NETWORK_WIFI","isAndroid","GenerateInfo","HttpSystem_1","NetHelper","onErrorCb","_hostUrl","dispatcher","debugData","UserToken","currentMessage","netWork","NETWORK_NO","formatUrl","timestamp","phoneInfo","Authorization","then","code","tryAgain","states","NumberUtils","random","lower","upper","range","Math","floor","randomf","floatSub","arg1","arg2","r1","r2","pow","max","tmp","parseFloat","floatMul","s1","s2","replace","floatDiv","t1","t2","floatTok","floatSqrt","arg3","arg4","len","sqrt","mul","ParseTemplateUtils","parseSrt","srtText","ToSeconds","p","filter","textItem","text","translate","startTime","endTime","timeLine","isShow","AndroidAdapter_1","IosAdapter_1","WebAdapter_1","DebuggerAdapter_1","PlatformSystem","browserType","BROWSER_TYPE_WECHAT","BROWSER_TYPE_SAFARI","platform","WECHAT_GAME","os","OS_ANDROID","OS_IOS","isWeChat","location","href","isIOS","PoolUtils","initPool","className","num","poolArray","classArray","object","getPool","putPool","parent","clearAll","pool","PopupBase","background","main","animDuration","blocker","finishCallback","show","duration","active","opacity","scale","tween","to","start","easing","onShow","suspended","addComponent","BlockInputEvents","setParent","setContentSize","getContentSize","onHide","setFinishCallback","CC_DEV","PopupCacheMode","PopupShowResult","PopupManager","_prefabCache","_nodeCache","_current","_queue","_suspended","targetNode","uuid","parseParams","locked","immediately","suspend","Waiting","getNodeFromCache","isValid","loadStartCallback","prefab","loadFinishCallback","Failed","instantiate","popup","container","Canvas","setSiblingIndex","macro","MAX_ZINDEX","recycle","mode","Done","_res","scheduleOnce","interval","nodeCache","prefabCache","request","priority","Once","destroy","Normal","Frequent","removeFromParent","prefabMap","addRef","decRef","PopupParams","cacheMode","showResult","Base","PrefabLoader","loader_index_1","LoaderObserver_1","RemoteSpineData","ResLoader","_init","_defaultMap","SpriteAtlas","JsonAsset","TextAsset","TextLoader","Prefab","sp","SkeletonData","SpineLoader","_defaultLoader","addObserver","observer","_observerList","removeObserver","obs","curBundle","tempType","getBundle","as","__beforeLoadRes","__afterLoadRes","loader","_err","beforeLoadRes","afterLoadRes","loadDir","dir","loadBundle","nameOrUrl","__beforeLoadBundle","_bundle","__afterLoadBundle","beforeLoadBundle","afterLoadBundle","ResourceType","Asset","resType","assetMap","reslove","asset","releaseComponents","releaseAsset","Global","removeBundle","releaseWithOutBundle","ResourcesManager","assetsMap","resPath","assetType","rej","assetClip","loadBundleList","nameList","list","all","releaseKey","releaseRes","StringUtils_1","SpotSystem","baseInfo","app_key","APP_KEY","sendHttp","sendSdk","StringUtils","format","LOG_EVENT","api_key","__assign","event_type","HTTP_HOST","LOG_INIT","LOG_SET_USER_ID","NAME_SPACE_IOS","NAME_SPACE_ANDROID","StateMachine","owner","m_pOwner","m_pCurrentState","m_pPreviousState","m_pGlobalState","exit","AddGlobalState","state","newState","enter","RemoveGlobalState","Update","dt","execute","Transition","onTransition","ChangeState","pNewState","onMessage","RevertPreviousState","isInState","exitCurrentState","CurrentState","sourceStr","replaceStr","fromIndex","replaceCode","tempStr","tempLen","charAt","strLength","charCodeAt","moreText","substring","Telegram","SmallestDelay","Sender","Msg","ExtraInfo","NumberUtils_1","TimeUtils","dateToFormate","date","fmt","o","M+","getMonth","d+","getDate","h+","getHours","m+","getMinutes","s+","getSeconds","q+","S","getMilliseconds","$1","getFullYear","toDate","hour","minute","second","TimerSystem","_pool","_handlers","_currTimer","_currFrame","_count","_index","_startTime","director","getScheduler","enableForTarget","schedule","onEnterFrame","INTERVAL","elapsed","userFrame","exeTime","repeat","thisObj","clearTimer","create","useFrame","cover","pop","TimerHandler","doOnce","doLoop","doFrameOnce","doFrameLoop","running","UIUtils","createSubNodeMap","children","subChild","seekAllSubView","UIContainer","nodesMap","_clickSound","_bundleName","_uiNodesMap","getNode","com","tempNode","manager","Audio","UrlUtils","getQueryString","reg","rs","search","match","getUrlArrayByFileType","jsonObj","urls","traverseJson","parseUrl","r","hash","host","hostname","origin","pathname","port","protocol","username","password","toUpperCase","getUrlPathName","ret","WebAdapter","MusicType","AudioUtil","getFixedPath","cachePath","AssetManager","Bundle","_pauseFlag","curTime","_curSound","tempTime","_lastSoundTime","fixedPath","source","getEffectFromPool","play","__AudioSource","SOUND","addEffectToPool","_soundPool","value_1","stop","_loopSoundPool","LOOP_SOUND","_musicPool","MUSIC","pause","resume","list_1","isPlaying","setPauseFlag","level","_level","clip","_loaded","_audioSource","_path","_musicType","err","_isStop","audioEngine","timer","pauseMusic","pauseEffect","resumeEffect","timeEnd","loadBundleScene","sceneName","loadScene","scene","loadBundles","BundleUtil","LIFE_CYCLE_CREATED","LIFE_CYCLE_READY","LIFE_CYCLE_COMPLETE","LIFE_CYCLE_BLOCK","LIFE_CYCLE_UNBLOCK","LIFE_CYCLE_PARAMS","LIFE_CYCLE_BACK","FOLLOW_CLIENT_TO_MODULE","FOLLOW_MODULE_TO_CLIENT","VIDEO_CLIENT_TO_MODULE","VIDEO_MODULE_TO_CLIENT","SET_TOP_BAR_ACTIVE","Events","SHOW_COMMON_TIPS_POP","BOX_SPINE","PLAYER_SPINE","MONSTER_SPINE","HIT_MONSTER_MUSIC","hitMonsterMain","label","ClickCmpt_1","events_1","PopupManager_1","ResourcesManager_1","ClientModuleEnum_1","LinkedNode_1","ErrorSystem_1","EventSystem_1","StateMachine_1","TimerSystem_1","TimeUtils_1","UIUtils_1","ModelBase_1","MessageBase_1","SpotSystem_1","ClientTipsEnum_1","util","Time","Ui","UiContainer","LocalStorage","spot","Resources","Type","Event","Popup","consts","structure","LinkList","Tips","video","videoTransType","component","Click","Loader","fsm","StateManager","modelManager","modelBase","nativeInfo","networkType","__exportStar","bundleUtils_1","cdn_root","book_id","CONFIG","assets","contentNode","lessonNode","lock","relayout","debug","setDisplayStats","loadLocalProject","frameSize","view","getFrameSize","designResolution","designSize","width","height","frameAspectRatio","designAspectRatio","screenSize","ceil","comp","initParams","addChild"],"mappings":"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","sourcesContent":["export default abstract class ASystem {\n    public abstract init(...args): Promise<any>;\n    public abstract release(): void;\n}","\nimport IPlatform from \"./IPlatform\";\n\nexport default class AndroidAdapter implements IPlatform {\n    public packageName: string = \"org/cocos2dx/javascript/\";\n    public isPrintLog: boolean = true;\n    public onGameExit(): void {\n        // console.log(`Android adapter:onGameExit`)\n        // this.callNative(\"onGameExit\", \"()V\")\n    }\n    public onGameReady(): void {\n        // console.log(`Android adapter:onGameReeady`)\n        // GameInfo.instance.hasCalledOnGameReady = true;\n        // this.callNative(\"onGameReady\", \"()V\")\n        this.callFunction(\"hideSplash\", \"\", \"NativeInterface\");\n        cc.log(`getWritablePath():${jsb.fileUtils.getWritablePath()}`)\n    }\n\n    public toast(message: string): void {\n        // jsb.reflection.callStaticMethod(this.packageName, \"toast\", \"(Ljava/lang/String;)V\", message);\n\n        this.callFunction(\"toast\", message, \"NativeInterface\");\n    }\n\n    public callFunction(funcName: string, parm: string, moduleName: string): void {\n        let packagePath = this.packageName;\n        if (moduleName && moduleName != '') {\n            packagePath += moduleName;\n        }\n        jsb.reflection.callStaticMethod(packagePath, funcName, \"(Ljava/lang/String;)V\", parm);\n    }\n\n    callFunctionResult(funcName: string, parm: string, moduleName: string) {\n        let packagePath = this.packageName;\n        if (moduleName && moduleName != '') {\n            packagePath += moduleName;\n        }\n        let result = jsb.reflection.callStaticMethod(packagePath, funcName, \"(Ljava/lang/String;)Ljava/lang/String;\", parm);\n        return result;\n    }\n}","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class AtlasLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"AtlasLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class AudioLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res: cc.AudioClip) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"AudioLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","import AudioUtil from \"../../utils/audioUtil\";\r\n\r\n/**\r\n * 音频播放类\r\n */\r\nexport default class AudioManager {\r\n\r\n    /** 音乐音效状态缓存tag */\r\n    public static EFFECT_TAG = \"ChineseAi_EFFECT_TAG\";\r\n    public static MUSIC_TAG = \"ChineseAi_MUSIC_TAG\";\r\n\r\n    /** 是否播放音效和音乐标志位 */\r\n    private static _effectFlag: boolean = true;\r\n    private static _musicFlag: boolean = true;\r\n\r\n    private static _curMusic: string = \"\";\r\n    private static _curBundle: string | cc.AssetManager.Bundle;\r\n\r\n    public static init(): void {\r\n        let effectSwitch = cc.sys.localStorage.getItem(AudioManager.EFFECT_TAG) === \"false\";\r\n        let musicSwitch = cc.sys.localStorage.getItem(AudioManager.MUSIC_TAG) === \"false\";\r\n        AudioManager._effectFlag = !effectSwitch;\r\n        AudioManager._musicFlag = !musicSwitch;\r\n        this.setEffectStatus(AudioManager._effectFlag);\r\n        this.setMusicStatus(AudioManager._musicFlag);\r\n    }\r\n\r\n    /**\r\n     * 播放音效\r\n     * @param {string | cc.AssetManager.Bundle} bundleName\r\n     * @param {string} name 音效资源\r\n     * @param {function} finishCb\r\n     */\r\n    public static playEffect(bundleName: string | cc.AssetManager.Bundle, name: string, finishCb?: () => void): void {\r\n        if (!bundleName || bundleName === '') {\r\n            return;\r\n        }\r\n        if (AudioManager._effectFlag) {\r\n            AudioUtil.playEffect(bundleName, name, finishCb);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放音效(async await)\r\n     * @param bundleName \r\n     * @param name \r\n     * @param isSingle \r\n     * @param isLoop \r\n     * @returns \r\n     */\r\n    public static async playEffectByName(bundleName: string | cc.AssetManager.Bundle, name: string, isSingle: boolean = true, isLoop: boolean = false) {\r\n        if (!bundleName || bundleName === '') {\r\n            return\r\n        }\r\n        if (AudioManager._effectFlag) {\r\n            await AudioUtil.playEffectByName(bundleName, name, isSingle, isLoop)\r\n        }\r\n    }\r\n\r\n    /** 暂停音效 */\r\n    public static stopEffect(): void {\r\n        AudioUtil.stopEffect();\r\n    }\r\n\r\n    static stopEffectByName(name: string) {\r\n        AudioUtil.stopEffectByName(name)\r\n    }\r\n\r\n    static destroyAudio(bundleName: string, name: string) {\r\n        AudioUtil.destroyAudio(bundleName, name)\r\n    }\r\n\r\n    /** 播放循环音效 */\r\n    public static playLoopEffect(bundleName: string | cc.AssetManager.Bundle, name: string): void {\r\n        if (AudioManager._effectFlag) {\r\n            AudioUtil.playLoopEffect(bundleName, name);\r\n        }\r\n    }\r\n\r\n    /** 暂停循环音效 */\r\n    public static stopLoopEffect(bundleName, name: string): void {\r\n        AudioUtil.stopLoopEffect(bundleName, name);\r\n    }\r\n\r\n    /** 暂停所有循环音效 */\r\n    public static pauseLoopEffects(): void {\r\n        AudioUtil.pauseLoopEffects();\r\n    }\r\n\r\n    /** 恢复所有循环音效 */\r\n    public static resumeLoopEffects(): void {\r\n        if (AudioManager._effectFlag) {\r\n            AudioUtil.resumeLoopEffects();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放背景音乐\r\n     * @param {string} name 播放背景音乐\r\n     */\r\n    public static playMusic(bundleName: string | cc.AssetManager.Bundle, name: string): void {\r\n        if (!bundleName || bundleName === '') {\r\n            return;\r\n        }\r\n        AudioManager._curMusic = name;\r\n        AudioManager._curBundle = bundleName;\r\n        if (AudioManager._musicFlag) {\r\n            AudioUtil.playMusic(bundleName, name);\r\n        }\r\n    }\r\n\r\n    /** 暂停背景音乐 */\r\n    public static stopMusic(): void {\r\n        AudioUtil.stopMusic();\r\n    }\r\n\r\n    public static passMusic() {\r\n        AudioUtil.passMusic();\r\n    }\r\n\r\n    public static resumeMusic() {\r\n        AudioUtil.resumeMusic();\r\n    }\r\n\r\n    /** 设置背景音乐播放状态 */\r\n    public static setMusicStatus(flag: boolean): void {\r\n        AudioManager._musicFlag = flag;\r\n        cc.sys.localStorage.setItem(AudioManager.MUSIC_TAG, flag);\r\n        if (flag) {\r\n            AudioManager.playMusic(AudioManager._curBundle, AudioManager._curMusic);\r\n        } else {\r\n            AudioManager.stopMusic();\r\n        }\r\n    }\r\n\r\n    /** 设置音效播放状态 */\r\n    public static setEffectStatus(flag: boolean): void {\r\n        AudioManager._effectFlag = flag;\r\n        cc.sys.localStorage.setItem(AudioManager.EFFECT_TAG, flag);\r\n        cc.log(\"AudioManager.setEffectStatus.flag\" + flag);\r\n        if (flag) {\r\n            this.resumeLoopEffects();\r\n        } else {\r\n            this.pauseLoopEffects();\r\n        }\r\n    }\r\n\r\n    public static get effectFlag(): boolean {\r\n        return AudioManager._effectFlag;\r\n    }\r\n\r\n    public static get musicFlag(): boolean {\r\n        return AudioManager._musicFlag;\r\n    }\r\n}\r\n","/**\r\n * 资源加载基类，负责处理资源加载逻辑（本地/远程下载/网络动态资源）\r\n * @author Yue\r\n */\r\nexport default abstract class BaseLoader {\r\n    /**\r\n     * 资源统一加载接口\r\n     * @param {string} path 资源路径\r\n     * @param {cc.Asset} type 资源类型\r\n     * @param {(err, res) => void} onComplete 加载完成回调\r\n     * @param {cc.AssetManager.Bundle | string} bundle 资源所属bundle，可选。\r\n     * @param {(finish: number, total: number, item: cc.AssetManager.RequestItem) => void} onProgress 加载进度\r\n     */\r\n    public loadRes(path: string, options: typeof cc.Asset | Record<string, any>, onComplete: (err, res) => void, bundle?: cc.AssetManager.Bundle, onProgress?: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void): void {\r\n        if (this.isNetRes(path)) {\r\n            // 加载网络资源\r\n            this.loadNetRes(path, options, onComplete);\r\n        } else if (this.isRemoteRes(path)) {\r\n            // 加载远程待下载资源\r\n            this.loadRemoteRes(path, options, onComplete);\r\n        } else {\r\n            // 加载本地资源\r\n            this.loadLocalRes(path, options, onProgress, onComplete, bundle);\r\n        }\r\n    }\r\n\r\n    // 加载网络资源\r\n    public abstract loadNetRes(path: string, options: typeof cc.Asset | Record<string, any>, callback: (err, res) => void): void;\r\n    // 加载远程待下载资源\r\n    public abstract loadRemoteRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err, res) => void): void;\r\n    // 加载本地资源\r\n    public abstract loadLocalRes(path: string, type: typeof cc.Asset | Record<string, any>, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, onComplete: (err, res) => void, bundle?: cc.AssetManager.Bundle): void;\r\n\r\n    /**\r\n     * 判断是否是远程待下载资源\r\n     * @param {string} path 资源路径 \r\n     */\r\n    public isRemoteRes(path: string): boolean {\r\n        return false;\r\n    }\r\n\r\n    public isNetRes(path: string): boolean {\r\n        if (path.startsWith(\"http://\") || path.startsWith(\"https://\") || path.startsWith(\"zybhost://\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}","import ResLoader from \"../framework/load/ResLoader\";\nimport AudioManager from \"../system/audio/AudioManager\";\nimport LogSystem from \"../system/log/LogSystem\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ClickCmpt extends cc.Component {\n\n    // 点击音效\n    @property(cc.String)\n    clickSound: string = \"commonRes/sound/btn_click\";\n    // 默认bundle\n    @property(cc.String)\n    bundleName = 'components';\n\n\n    @property({ tooltip: \"启用点击反馈\" })\n    clickAudioEffect: boolean = true;\n    // 点击事件\n    @property({ type: [cc.Component.EventHandler], tooltip: \"点击事件列表\" })\n    clickEvents: cc.Component.EventHandler[] = [];\n\n    onLoad() {\n        if (this.clickEvents.length > 0) {\n            this.onCilckEventHandler();\n        }\n    }\n\n    onCilckEventHandler() {\n        this.clickEvents.forEach(item => {\n            let targeNode = item.target;\n            let tempCmpt = targeNode.getComponent(item[\"_componentName\"]);\n            this.onClick(targeNode, tempCmpt[item.handler], tempCmpt, item.customEventData, this.clickAudioEffect)\n        })\n    }\n\n    /**\n     * 注册或发送点击事件，默认带点击音效\n     * @param {cc.Node} node 事件节点  \n     * @param {string | (event: any) => void} handler 事件名称 | 事件回调函数 \n     * @param {any} target 目标 \n     * @param {any} param 参数 \n     * @param {boolean} clickEffect 点击反馈\n     * @param {string} sound 声音，有默认 \n     * @param {string} bundleName bundle名称 默认components\n     * \n     */\n    public onClick<T extends (event: any) => void>(node: cc.Node,\n        handler: T,\n        target?: any,\n        param?: any,\n        clickEffect?: boolean,\n        sound?: string,\n        bundleName?: string | cc.AssetManager.Bundle): void {\n        if (!node) {\n            LogSystem.warn(`onClick参数node不能为空：${node}`);\n            return;\n        }\n\n        node.on(cc.Node.EventType.TOUCH_START, (event) => {\n            let soundName = sound ? sound : this.clickSound;\n            let bundle = bundleName ? bundleName : this.bundleName;\n            // \b点击反馈\n            if (clickEffect) {\n                AudioManager.playEffect(bundle, soundName);\n\n            }\n            if (handler) { handler.call(target, param); }\n\n        }, target);\n\n\n    }\n\n    /**\n     * 移除节点的点击事件\n     * @param {cc.Node | string} node 事件节点 \n     */\n    public offClick(node: cc.Node): void {\n        if (!node) {\n            LogSystem.warn(`offClick参数node不能为空：${node}`);\n            return;\n        }\n\n        node.off(cc.Node.EventType.TOUCH_START);\n    }\n\n    public preloadClickEffect() {\n        ResLoader.loadRes(this.clickSound, cc.AudioClip, () => { }, this.bundleName);\n    }\n}","/**\n * 主要定义子游戏和框架交互的事件类型\n * C2M_** 框架到子游戏事件\n * M2C_** 子游戏到框架事件\n */\n\n// 视频与子游戏交互\nexport enum VideoEventTransType {\n    //  视频开始播放\n    C2M_VIDEO_PLAY_START,\n    //  刷新视频进度\n    C2M_UPDATE_PLAY_STATUS = 1,\n    //  视频播放完成\n    C2M_VIDEO_PLAY_COMPLETE,\n    //  播放视频\n    M2C_VIDEO_PLAY_START,\n    //  暂停视频\n    M2C_VIDEO_PLAY_PAUSE,\n    //  恢复播放视频\n    M2C_VIDEO_PLAY_RESUME,\n    //  视频跳转\n    M2C_VIDEO_PLAY_SEEKTO,\n    //  视频初始化\n    M2C_VIDEO_INIT,\n    //  视频卸载\n    M2C_VIDEO_DESTROY,\n}","/**\n * \n *  通用Tips枚举\n */\nexport enum TIPS_TYPE {\n    // 非WIFI\n    NOT_WIFI = \"NOT_WIFI\",\n    // 无网络\n    NO_NETWORK = \"NO_NETWORK\",\n    // 下载失败\n    DOWNLOAD_FAILED = \"DOWNLOAD_FAILED\",\n    // 接口请求失败\n    REQUEST_FAILED = \"REQUEST_FAILED\",\n    // 权限弹窗\n    PERMISS_ALERT = \"PERMISS_ALERT\",\n}","import PopupBase from \"./PopupBase\";\n\nconst { ccclass, property } = cc._decorator;\n\n/**\n * 确认弹窗（PopupBase 使用示例）\n */\n@ccclass\nexport default class ConfirmPopup extends PopupBase<ConfirmPopupOptions> {\n\n    @property(cc.Label)\n    private titleLabel: cc.Label = null;\n\n    @property(cc.Label)\n    private contentLabel: cc.Label = null;\n\n    @property(cc.Node)\n    private confirmBtn: cc.Node = null;\n\n    protected onLoad() {\n        this.registerEvent();\n    }\n\n    protected onDestroy() {\n        this.unregisterEvent();\n    }\n\n    private registerEvent() {\n        this.confirmBtn.on(cc.Node.EventType.TOUCH_END, this.onConfirmBtnClick, this);\n    }\n\n    private unregisterEvent() {\n        this.confirmBtn.targetOff(this);\n    }\n\n    protected init() {\n\n    }\n\n    protected updateDisplay(options: ConfirmPopupOptions): void {\n        this.titleLabel.string = options.title;\n        this.contentLabel.string = options.content;\n    }\n\n    protected onConfirmBtnClick() {\n        this.options.confirmCallback && this.options.confirmCallback();\n        this.hide();\n    }\n\n}\n\n/** 确认弹窗选项 */\nexport interface ConfirmPopupOptions {\n    title: string;\n    content: string;\n    confirmCallback: Function;\n}\n","\nimport IPlatform from \"./IPlatform\";\n\nexport default class DebuggerAdapter implements IPlatform {\n    packageName: string;\n    public isPrintLog: boolean = false;\n    public onGameExit(): void {\n        // console.log(`Android adapter:onGameExit`)\n        // this.callNative(\"onGameExit\", \"()V\")\n    }\n    public onGameReady(): void {\n        // console.log(`Android adapter:onGameReeady`)\n        // GameInfo.instance.hasCalledOnGameReady = true;\n        // this.callNative(\"onGameReady\", \"()V\")\n    }\n\n    public toast(message: string): void {\n        // this.callNative(\"toast\", \"(Ljava/lang/String;)V\", message)\n    }\n\n    callFunction(funcName: string): void {\n        // throw new Error(\"Method not implemented.\");\n    }\n\n    callFunctionResult(funcName: string, parm: string, moduleName: string) {\n        throw new Error(\"Method not implemented.\");\n    }\n}","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class DefaultLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, options: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, options, (e, res) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"AtlasLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}","/**\n * 延迟节点\n */\nexport class Delay {\n    public key: string;   // key\n    public time: number;   // 间隔多久\n    public current: number;   // 当前时间戳\n\n    constructor(k, v) {\n        this.key = k;\n        this.time = v;\n    }\n}\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class DelayUtils {\n    /**\n     * 延迟队列\n     */\n    private static delayMap: { [key: string]: Delay; } = {\n        \"button\": new Delay(\"button\", 1000)\n    };\n\n    /**\n     * 检测是否延迟\n     * @param key\n     * @returns true : 延迟 false : 不需要延迟\n     */\n    public static CheckDelay(key: string): boolean {\n\n        let delay = DelayUtils.delayMap[key];\n        if (!delay) { return true; }\n\n        let tick = (new Date()).getTime();\n\n        let time = tick - delay.current\n\n        if (time < delay.time) { return true; }\n\n        delay.current = tick;\n\n        return false;\n    }\n}\n","import IEntity from \"./IEntity\";\n\n/**\n * @author\n *\n */\nexport default class EntityManager {\n    private static _instance: EntityManager;\n    private _entityMap: Object;\n    private _length: number = 0;\n\n    public constructor() {\n        this._entityMap = {};\n    }\n\n    public static get instance(): EntityManager {\n        if (this._instance == null) {\n            this._instance = new EntityManager();\n        }\n        return this._instance;\n    }\n    public release(): void {\n        this._entityMap = null;\n        EntityManager._instance = null;\n    }\n\n    // this method stores a pointer to the entity in the std::vector\n    // m_Entities at the index position indicated by the entity's ID\n    // (makes for faster access)\n    public registerEntity(newEntity: IEntity): void {\n        this._entityMap[newEntity.sid] = newEntity;\n        // this.index++;\n    }\n\n    // returns a pointer to the entity with the ID given as a parameter\n    public getEntityFromID(id: string): IEntity {\n        return this._entityMap[id];\n    }\n\n    // this method removes the entity from the list\n    public removeEntity(entity: IEntity): void {\n        let key: any;\n        for (key in this._entityMap) {\n            if (this._entityMap[key] == entity) {\n                delete this._entityMap[key];\n            }\n        }\n    }\n\n    /**\n     * 获取所有智体\n     */\n    public getAllEntity(): Object {\n        return this._entityMap;\n    }\n\n    /**\n     * 获取一个可用的智体\n     */\n    public getAvailableEntity<T extends IEntity>(clazz: any): T {\n        let key: any;\n        let availableEntity: T\n        for (key in this._entityMap) {\n            let entity: T = this._entityMap[key];\n            // console.log(entity instanceof clazz);\n            if (entity instanceof clazz) {\n                if (entity != null) {\n                    // if (entity.isDestroy == true) {\n                        availableEntity = entity;\n                        return availableEntity;\n                    // }\n                }\n            }\n        }\n        availableEntity = this.createEntity<T>(clazz);\n        return availableEntity;\n    }\n\n    /**\n     * new一个智体\n     */\n    private createEntity<T extends IEntity>(clazz: new() => T): T {\n        let entity: T = new clazz();\n        // (entity as IEntity).isDestroy = false;\n        // (<IEntity>entity).entityType = EntityType.FISH;\n        this.registerEntity(entity);\n        this._length++;\n        return entity;\n    }\n\n    /**\n     * get length\n     */\n    public get length(): number {\n        return this._length\n    }\n}\n","\nexport class ErrorSendInterval {\n    public static readonly RATE_DEFAULT: number = 5;\n    public static readonly RATE_LOW: number = 10;\n}\n\n/**\n * 错误捕获系统\n * @export\n * @class ErrorSystem\n * # 注册错误监听\n * ```\n * ErrorSystem.instance.init(false,this.errorOutAdapter,ErrorSendInterval.RATE_LOW)\n * ```\n */\nexport default class ErrorSystem {\n    private static _instance: ErrorSystem;\n\n    private errorMap: any = {};\n    private outAdapter: Function;\n    private minInterval: number;\n\n    public static get instance(): ErrorSystem {\n        if (ErrorSystem._instance == null) {\n            ErrorSystem._instance = new ErrorSystem();\n        }\n        return ErrorSystem._instance;\n    }\n\n    /**\n     * 注册全局错误捕获\n     * @param {boolean} isNative 是否是native环境\n     * @param {(exception: string) => void} outAdapter 输出适配器\n     * @returns {Promise<any>}\n     * @memberof ErrorSyStem\n     */\n    public init(isNative: boolean, outAdapter?: (exception: string) => void): Promise<void> {\n        this.outAdapter = outAdapter;\n        return new Promise((res, rea) => {\n            if (isNative) {\n                // @ts-ignore\n                window.__errorHandler = (errorMessage, file, line, message, error) => {\n                    let exception: any = {};\n                    exception.errorMessage = errorMessage;\n                    exception.file = file;\n                    exception.line = line;\n                    exception.message = message;\n                    exception.error = error;\n                    // @ts-ignore\n                    if (window.exception != JSON.stringify(exception)) {\n                        // @ts-ignore\n                        window.exception = JSON.stringify(exception);\n                    }\n                    //TODO: 发送请求上报异常\n                    this.outAdapter(exception);\n                };\n                // @ts-ignore\n            } else {\n                //捕获promise错误\n                window.addEventListener('unhandledrejection', (event: PromiseRejectionEvent) => {\n                    let message: string = String(event.reason.stack)\n                    this.outAdapter({ \"unhandledrejection\": String(event.reason.stack) });\n                })\n                window.onerror = (errorMessage, file, line, message, error) => {\n                    let exception: any = {};\n                    exception.errorMessage = errorMessage;\n                    exception.file = file;\n                    exception.line = line;\n                    exception.message = message;\n                    exception.error = error;\n                    // @ts-ignore\n                    if (window.exception != JSON.stringify(exception)) {\n                        // @ts-ignore\n                        window.exception = JSON.stringify(exception);\n                    }\n                    //TODO: 发送请求上报异常\n                    this.outAdapter(exception);\n                };\n            }\n            res();\n        })\n    }\n\n    // private send(exception: any): void {\n    //     let str: string = JSON.stringify(exception);\n    //     if (this.errorMap[exception]) {\n    //         this.errorMap[exception] += 1;\n    //         if (this.errorMap[exception] >= this.minInterval) {\n    //             this.outAdapter(str);\n    //             this.errorMap[exception] = null;\n    //             delete this.errorMap[exception];\n    //         }\n    //     } else {\n    //         this.errorMap[exception] = 1;\n    //         this.outAdapter(str);\n    //     }\n    // }\n\n    public release(): void {\n        this.outAdapter = null;\n        this.errorMap = null;\n        ErrorSystem._instance = null;\n    }\n}","/**\n * @private\n * 用于管理事件的类\n * 可以扩展以在其他类中提供事件功能,参考NODEJS的EventEmitter模块实现,注释为机翻\n *\n * @class 事件管理器管理事件注册和发布\n * @see https://github.com/Olical/EventEmitter\n * @version 1.0\n */\nexport class EventEmitter {\n  private _events: any;\n  private _onceReturnValue: any;\n\n  /**\n   * 返回指定事件的侦听器数组。\n   * 如果需要，将初始化事件对象和侦听器数组。\n   * 如果使用正则表达式搜索，将返回一个对象。对象包含每个匹配事件的键。\n   * @example  /ba[rz]/ 则 返回一个对象包含 bar 和 baz.\n   * 但是，如果您已经用定义事件定义了它们，或者添加了一些侦听器\n   * 对象响应中的每个属性都是监听器函数的数组。\n   *\n   * @param {string|RegExp} 事件名称\n   * @return {Function[|Object]} 事件的所有侦听器函数.\n   */\n  public getListeners(event: string | RegExp): Function[] {\n    var events = this._getEvents();\n    var response: any;\n    var key: any;\n\n    // Return a concatenated array of all matching events if\n    // the selector is a regular expression.\n    if (event instanceof RegExp) {\n      response = {};\n      for (key in events) {\n        if (events.hasOwnProperty(key) && event.test(key)) {\n          response[key] = events[key];\n        }\n      }\n    } else {\n      response = events[event] || (events[event] = []);\n    }\n\n    return response;\n  }\n\n  /**\n   * 将侦听器函数添加到指定的事件。\n   * 重复添加将会被忽略\n   * 如果侦听器返回true，那么它将被调用后被删除\n   * 如果将正则表达式作为事件名传递，则监听器将被添加到匹配它的所有事件。\n   *\n   * @param {string|RegExp} event 事件名称\n   * @param {Function} listener 发出事件时调用的方法。\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public addListener(event: string | RegExp, listener: Function | object, target: any = null): EventEmitter {\n    if (!this.isValidListener(listener)) {\n      throw new TypeError(\"listener must be a function\");\n    }\n\n    var listeners = this.getListenersAsObject(<string>event);\n    var listenerIsWrapped = typeof listener === \"object\";\n    var key;\n\n    for (key in listeners) {\n      if (listeners.hasOwnProperty(key) && this.indexOfListener(listeners[key], listener, target) === -1) {\n        (<any>listeners[key]).push(\n          listenerIsWrapped\n            ? listener\n            : {\n              listener: listener,\n              once: false,\n              target: target\n            }\n        );\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * addListener方法的别名\n   * @param {string | RegExp} event\n   * @param {Function} listener\n   * @returns {EventEmitter}\n   */\n  public on(event: string | RegExp, listener: Function | object, target?: any): EventEmitter {\n    return this.addListener(event, listener, target);\n  }\n\n  /**\n   * 取一组听众对象和把它变成一个侦听器函数列表。\n   *\n   * @param {Object[]} 侦听原始监听器对象。\n   * @return {Function[]} 侦听器的功能。\n   */\n  public flattenListeners(listeners: { listener: Function }[]): Function[] {\n    var flatListeners = [];\n    var i;\n\n    for (i = 0; i < listeners.length; i += 1) {\n      flatListeners.push(listeners[i].listener);\n    }\n\n    return flatListeners;\n  }\n\n  /**\n   * Fetches the requested listeners via getListeners but will always return the results inside an object.\n   * This is mainly for internal use but others may find it useful.\n   *\n   * @param event {string|RegExp} Name of the event to return the listeners from.\n   * @return {Object} All listener functions for an event in object\n   */\n  public getListenersAsObject(event: string): { [event: string]: Function } {\n    var listeners = this.getListeners(event);\n    var response: any; //Array<string | RegExp>;\n\n    if (listeners instanceof Array) {\n      response = {};\n      response[event] = listeners;\n    }\n\n    return response || listeners;\n  }\n\n  /**\n   * Semi-alias of addListener. It will add a listener that will be\n   * automatically removed after it's first execution.\n   *\n   * @param event {string|RegExp} Name of the event to attach the listener to.\n   * @param listener {Function} Method to be called when the event is emitted.\n   * If the function returns true then it will be removed after calling.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public addOnceListener(event: string | RegExp, listener: Function): EventEmitter {\n    return this.addListener(event, <Object>{ listener: listener, once: true });\n  }\n\n  /**\n   * addOnceListener的别名\n   * @param {string | RegExp} event\n   * @param {Function} listener\n   * @returns {EventEmitter}\n   */\n  public once(event: string | RegExp, listener: Function): EventEmitter {\n    return this.addOnceListener(event, listener);\n  }\n\n  /**\n   * Defines an event name.\n   * This is required if you want to use a regex to add a listener to multiple events at once.\n   * If you don't do this then how do you expect it to know what event to add to?\n   * Should it just add to every possible match for a regex? No. That is scary and bad.\n   * You need to tell it what event names should be matched by a regex.\n   *\n   * @param {string} event Name of the event to create.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public defineEvent(event: string): EventEmitter {\n    this.getListeners(event);\n    return this;\n  }\n\n  /**\n   * Defines an event name.\n   * This is required if you want to use a regex to add a listener to multiple events at once.\n   * If you don't do this then how do you expect it to know what event to add to?\n   * Should it just add to every possible match for a regex? No. That is scary and bad.\n   * You need to tell it what event names should be matched by a regex.\n   *\n   * @param {string[]} events Name of the event to create.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public defineEvents(events: string[]): EventEmitter {\n    for (var i = 0; i < events.length; i += 1) {\n      this.defineEvent(events[i]);\n    }\n    return this;\n  }\n\n  /**\n   * 从指定的事件中移除侦听器函数。\n   * 当将正则表达式传递为事件名称时，它将从与它匹配的所有事件中移除侦听器。\n   *\n   * @param {String|RegExp} event Name of the event to remove the listener from.\n   * @param {Function} listener Method to remove from the event.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public removeListener(event: string | RegExp, listener: Function, target: any = null): EventEmitter {\n    var listeners = this.getListenersAsObject(<string>event);\n    var index;\n    var key;\n\n    for (key in listeners) {\n      if (listeners.hasOwnProperty(key)) {\n        index = this.indexOfListener(listeners[key], listener, target);\n\n        if (index !== -1) {\n          (<any>listeners[key]).splice(index, 1);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * removeListener的别名\n   * @param {string | RegExp} event\n   * @param {Function} listener\n   * @returns {EventEmitter}\n   */\n  public off(event: string | RegExp, listener: Function, target: any = null): EventEmitter {\n    return this.removeListener(event, listener, target);\n  }\n\n  /**\n   * Adds listeners in bulk using the manipulateListeners method.\n   * If you pass an object as the second argument you can add to multiple events at once.\n   * The object should contain key value pairs of events and listeners or listener arrays.\n   * You can also pass it an event name and an array of listeners to be added.\n   * You can also pass it a regular expression to add the array of listeners to all events that match it.\n   * Yeah, this function does quite a bit. That's probably a bad thing.\n   *\n   * @param {String|Object|RegExp} event An event name if you will pass an array of listeners next.\n   * An object if you wish to add to multiple events at once.\n   * @param {Function[]} [listeners] An optional array of listener functions to add.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public addListeners(event: string | RegExp, listeners: Function[]): EventEmitter {\n    return this.manipulateListeners(false, event, listeners);\n  }\n\n  /**\n   * Removes listeners in bulk using the manipulateListeners method.\n   * If you pass an object as the second argument you can remove from multiple events at once.\n   * The object should contain key value pairs of events and listeners or listener arrays.\n   * You can also pass it an event name and an array of listeners to be removed.\n   * You can also pass it a regular expression to remove the listeners from all events that match it.\n   *\n   * @param {String|Object|RegExp} event An event name if you will pass an array of listeners next.\n   * An object if you wish to remove from multiple events at once.\n   * @param {Function[]} [listeners] An optional array of listener functions to remove.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public removeListeners(event: string | RegExp, listeners: Function[]): EventEmitter {\n    return this.manipulateListeners(true, event, listeners);\n  }\n\n  /**\n   * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job.\n   * You should really use those instead, this is a little lower level.\n   * The first argument will determine if the listeners are removed (true) or added (false).\n   * If you pass an object as the second argument you can add/remove from multiple events at once.\n   * The object should contain key value pairs of events and listeners or listener arrays.\n   * You can also pass it an event name and an array of listeners to be added/removed.\n   * You can also pass it a regular expression to manipulate the listeners of all events that match it.\n   *\n   * @param {Boolean} remove True if you want to remove listeners, false if you want to add.\n   * @param {String|Object|RegExp} event An event name if you will pass an array of listeners next.\n   * An object if you wish to add/remove from multiple events at once.\n   * @param {Function[]} [listeners] An optional array of listener functions to add/remove.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public manipulateListeners(\n    remove: boolean,\n    event: string | Object | RegExp,\n    listeners: Function[]\n  ): EventEmitter {\n    var i;\n    var value;\n    var single = remove ? this.removeListener : this.addListener;\n    var multiple = remove ? this.removeListeners : this.addListeners;\n\n    // If event is an object then pass each of its properties to this method\n    if (typeof event === \"object\" && !(event instanceof RegExp)) {\n      for (i in event) {\n        if ((<object>event).hasOwnProperty(i) && (value = event[i])) {\n          // Pass the single listener straight through to the singular method\n          if (typeof value === \"function\") {\n            single.call(this, i, value);\n          } else {\n            // Otherwise pass back to the multiple function\n            multiple.call(this, i, value);\n          }\n        }\n      }\n    } else {\n      // So event must be a string\n      // And listeners must be an array of listeners\n      // Loop over it and pass each one to the multiple method\n      i = listeners.length;\n      while (i--) {\n        single.call(this, event, listeners[i]);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all listeners from a specified event.\n   * If you do not specify an event then all listeners will be removed.\n   * That means every event will be emptied.\n   * You can also pass a regex to remove all events that match it.\n   *\n   * @param {String|RegExp} [event] Optional name of the event to remove all listeners for.\n   * Will remove from every event if not passed.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public removeEvent(event?: string | RegExp): EventEmitter {\n    var type = typeof event;\n    var events = this._getEvents();\n    var key;\n\n    // Remove different things depending on the state of event\n    if (type === \"string\") {\n      // Remove all listeners for the specified event\n      delete events[<string>event];\n    } else if (event instanceof RegExp) {\n      // Remove all events matching the regex.\n      for (key in events) {\n        if (events.hasOwnProperty(key) && event.test(key)) {\n          delete events[key];\n        }\n      }\n    } else {\n      // Remove all listeners in all events\n      delete this._events;\n    }\n\n    return this;\n  }\n\n  /**\n   * Alias of removeEvent.\n   *\n   * Added to mirror the node API.\n   */\n  public removeAllListeners(event?: string | RegExp): EventEmitter {\n    return this.removeEvent(event);\n  }\n\n  /**\n   * 派发事件\n   * > 当发出时，将执行附加到该事件的每个侦听器。\n   * > 如果传递可选参数数组，那么这些参数将在执行后传递给每个侦听器。\n   * > 因为它使用apple，所以你的参数数组会像你单独写出来一样通过。\n   * > 还可以传递正则表达式，以将其发送给匹配它的所有事件。\n   *\n   * @param {String|RegExp} event 发出和执行侦听器的事件的名称。\n   * @param {Array} [args] 要传递给每个侦听器的可选参数数组。\n   * @return {EventEmitter} 当前示例\n   */\n  public emitEvent(event: string | RegExp, ...args: any[]): EventEmitter {\n    var listenersMap = this.getListenersAsObject(<string>event);\n    var listeners;\n    var listener;\n    var i;\n    var key;\n    var response;\n\n    for (key in listenersMap) {\n      if (listenersMap.hasOwnProperty(key)) {\n        listeners = (<any>listenersMap[key]).slice(0);\n\n        for (i = 0; i < listeners.length; i++) {\n          // If the listener returns true then it shall be removed from the event\n          // The function is executed either with a basic call or an apply if there is an args array\n          listener = listeners[i];\n\n          if (listener.once === true) {\n            this.removeListener(event, listener.listener);\n          }\n          response = listener.listener.apply(listener.target || this, ...args || []);\n\n          if (response === this.onceReturnValue) {\n            this.removeListener(event, listener.listener);\n          }\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * emitEvent的别名\n   * @param {string | RegExp} event\n   * @param args\n   * @returns {EventEmitter}\n   */\n  public trigger(event: string | RegExp, ...args: any[]): EventEmitter {\n    return this.emitEvent(event, ...args);\n  }\n\n  /**\n   * Subtly different from emitEvent in that it will pass its arguments on to the listeners,\n   * as opposed to taking a single array of arguments to pass on.\n   * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.\n   *\n   * @param {String|RegExp} event Name of the event to emit and execute listeners for.\n   * @param {... any[]} args Optional additional arguments to be passed to each listener.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public emit(event: string | RegExp, ...args: any[]): EventEmitter {\n    // var args = Array.prototype.slice.call(arguments, 1);\n    return this.emitEvent(event, args);\n  }\n\n  public get onceReturnValue() {\n    if (this.hasOwnProperty(\"_onceReturnValue\")) {\n      return this._onceReturnValue;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Sets the current value to check against when executing listeners. If a\n   * listeners return value matches the one set here then it will be removed\n   * after execution. This value defaults to true.\n   *\n   * @param {any} value The new value to check for when executing listeners.\n   * @return {EventEmitter} Current instance of EventEmitter for chaining.\n   */\n  public set onceReturnValue(value) {\n    this._onceReturnValue = value;\n    // return this;\n  }\n\n  private _getEvents() {\n    return this._events || (this._events = {});\n  }\n\n  private isValidListener(listener: object | Function): boolean {\n    if (typeof listener === \"function\" || listener instanceof RegExp) {\n      return true;\n    } else if (listener && typeof listener === \"object\") {\n      return this.isValidListener(<any>listener);\n    } else {\n      return false;\n    }\n  }\n\n  private indexOfListener(listeners: any, listener: any, target: any): number {\n    var i = listeners.length;\n    while (i--) {\n      if ((listeners[i].listener === listener) && (target == listeners[i].target)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n}\n","/**\n * @class 事件管理器\n * @version 1.0\n */\nimport { EventEmitter } from \"./EventEmitter\";\n\nexport default class EventSystem {\n  private static _emitter = new EventEmitter();\n\n  /**\n   * 绑定事件\n   * @param {String} event\n   * @param {Function} callback\n   * @example Event.on(events, this.onEvents.bind(this));\n   */\n  public static on(event: string, callback: any, target?: any): void {\n    this._emitter.on(event, callback, target);\n  }\n\n  /**\n   * 绑定事件\n   * @param {String} event\n   * @param {Function} callback\n   * @example Event.on(events, this.onEvents.bind(this));\n   */\n  public static once(event: string, callback: any, target?: any): void {\n    this._emitter.once(event, callback);\n  }\n\n  /**\n   * 销毁事件\n   * @param {String} event\n   * @param {Function} callback\n   * @example Event.off(events, this.onEvents.bind(this));\n   */\n  public static off(event: string, callback: any, target: any): void {\n    this._emitter.off(event, callback, target);\n  }\n\n  /**\n   * 派发事件\n   * @param {String} event\n   * @param {any} data\n   * @example Event.emit(event, data);\n   */\n  public static emit(event: string, eventData?: any): void {\n    let params: any = {};\n    params.event = event;\n    params.data = eventData;\n    this._emitter.emit(event, params);\n  }\n\n  /**\n   * 释放所有监听器\n   */\n  public static release(): void {\n    this._emitter.removeEvent();\n  }\n}\n","/**\n * HTTP状态码辅助类\n * * 1**\t信息，服务器收到请求，需要请求者继续执行操作\n * * 2**\t成功，操作被成功接收并处理\n * * 3**\t重定向，需要进一步的操作以完成请求\n * * 4**\t客户端错误，请求包含语法错误或无法完成请求\n * * 5**\t服务器错误，服务器在处理请求的过程中发生了错误\n */\nexport class HttpStateMap {\n  private static _instance: HttpStateMap;\n\n  public static readonly map =\n    \"100\\tContinue\\t继续。客户端应继续其请求\\n\" +\n    \"101\\tSwitching Protocols\\t切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议\\n\" +\n    \"0\\terror\\t详见：https://codeday.me/bug/20170705/34070.html\\n\" +\n    \"200\\tOK\\t请求成功。一般用于GET与POST请求\\n\" +\n    \"201\\tCreated\\t已创建。成功请求并创建了新的资源\\n\" +\n    \"202\\tAccepted\\t已接受。已经接受请求，但未处理完成\\n\" +\n    \"203\\tNon-Authoritative Information\\t非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本\\n\" +\n    \"204\\tNo Content\\t无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档\\n\" +\n    \"205\\tReset Content\\t重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域\\n\" +\n    \"206\\tPartial Content\\t部分内容。服务器成功处理了部分GET请求\\n\" +\n    \"300\\tMultiple Choices\\t多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择\\n\" +\n    \"301\\tMoved Permanently\\t永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替\\n\" +\n    \"302\\tFound\\t临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI\\n\" +\n    \"303\\tSee Other\\t查看其它地址。与301类似。使用GET和POST请求查看\\n\" +\n    \"304\\tNot Modified\\t未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源\\n\" +\n    \"305\\tUse Proxy\\t使用代理。所请求的资源必须通过代理访问\\n\" +\n    \"306\\tUnused\\t已经被废弃的HTTP状态码\\n\" +\n    \"307\\tTemporary Redirect\\t临时重定向。与302类似。使用GET请求重定向\\n\" +\n    \"400\\tBad Request\\t客户端请求的语法错误，服务器无法理解\\n\" +\n    \"401\\tUnauthorized\\t请求要求用户的身份认证\\n\" +\n    \"402\\tPayment Required\\t保留，将来使用\\n\" +\n    \"403\\tForbidden\\t服务器理解请求客户端的请求，但是拒绝执行此请求\\n\" +\n    '404\\tNot Found\\t服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置\"您所请求的资源无法找到\"的个性页面\\n' +\n    \"405\\tMethod Not Allowed\\t客户端请求中的方法被禁止\\n\" +\n    \"406\\tNot Acceptable\\t服务器无法根据客户端请求的内容特性完成请求\\n\" +\n    \"407\\tProxy Authentication Required\\t请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权\\n\" +\n    \"408\\tRequest Time-out\\t服务器等待客户端发送的请求时间过长，超时\\n\" +\n    \"409\\tConflict\\t服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突\\n\" +\n    \"410\\tGone\\t客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置\\n\" +\n    \"411\\tLength Required\\t服务器无法处理客户端发送的不带Content-Length的请求信息\\n\" +\n    \"412\\tPrecondition Failed\\t客户端请求信息的先决条件错误\\n\" +\n    \"413\\tRequest Entity Too Large\\t由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息\\n\" +\n    \"414\\tRequest-URI Too Large\\t请求的URI过长（URI通常为网址），服务器无法处理\\n\" +\n    \"415\\tUnsupported Media Type\\t服务器无法处理请求附带的媒体格式\\n\" +\n    \"416\\tRequested range not satisfiable\\t客户端请求的范围无效\\n\" +\n    \"417\\tExpectation Failed\\t服务器无法满足Expect的请求头信息\\n\" +\n    \"500\\tInternal Server Error\\t服务器内部错误，无法完成请求\\n\" +\n    \"501\\tNot Implemented\\t服务器不支持请求的功能，无法完成请求\\n\" +\n    \"502\\tBad Gateway\\t充当网关或代理的服务器，从远端服务器接收到了一个无效的请求\\n\" +\n    \"503\\tService Unavailable\\t由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中\\n\" +\n    \"504\\tGateway Time-out\\t充当网关或代理的服务器，未及时从远端服务器获取请求\\n\" +\n    \"505\\tHTTP Version not supported\\t服务器不支持请求的HTTP协议的版本，无法完成处理\";\n\n  private data: any;\n\n  public static get instance(): HttpStateMap {\n    if (HttpStateMap._instance == null) {\n      HttpStateMap._instance = new HttpStateMap();\n    }\n    return HttpStateMap._instance;\n  }\n\n  constructor() {\n    var line: Array<string> = HttpStateMap.map.split(\"\\n\");\n    this.data = {};\n    line.forEach(element => {\n      // var vo:HttpInfoVo=new HttpInfoVo();\n      var temp: Array<string> = element.split(\"\\t\");\n      this.data[temp[0]] = temp[1] + \"\\t\" + temp[2];\n    });\n  }\n\n  /**\n   * 通过http状态码，返回中英文信息\n   * @param id\n   */\n  public getErrorInfoById(id: number): void {\n    return this.data[id];\n  }\n}\n\n// export class HttpInfoVo{\n//     public id:number;\n//     public en:string;\n//     public cn:string;\n// }\n","import { Http } from \"./Http\";\n\n/**\n * # HTTP工具包\n * 封装http请求,兼容IE5 和 IE6。\n * ## 使用示例\n * * 快捷调用\n * ```\n * HttpSystem.httpGet(\"www.baidu.com\");\n * HttpSystem.httpPost(\"www.baidu.com\",{name:\"fb\",age:33});\n * ```\n * * 常规调用\n * ```\n * let req = new HttpSystem();\n * req.open(\"baidu.com\", \"get\", {cointype: 8, gameid: GlobalConfig.GAME_ID, group: 1});\n * req.onResult(resultHandler);\n * req.setRequestHeader({\"Content-Type\": \"application/x-www-form-urlencoded\", \"token\": token});\n * req.send();\n * ```\n * * 链式调用\n * ```\n * let req = new HttpSystem();\n * req.open(AppConfig.getInstance().shop_list_URL, \"get\", {cointype: 8, gameid: GlobalConfig.GAME_ID, group: 1}).onResult(resultHandler).setRequestHeader({\"Content-Type\": \"application/x-www-form-urlencoded\", \"token\": token}).send();\n * ```\n * \n * * Promise\n * ```\n * let result = await HttpSystem.httpGet(`/api/m-course?contentId=24`);\n * ```\n * ```\n * HttpSystem.httpPost(\"api/dosomething\",{name:1,age:20}).then(res=>{}).catch(e => false);\n * ```\n * ## HTTP请求方法\n\n * 方法    | 描述\n * --- | ---\n * GET | 请求指定的页面信息，并返回实体主体。\n * HEAD | 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头\n * POST | 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。\n * PUT  | 从客户端向服务器传送的数据取代指定的文档的内容。\n * DELETE | 请求服务器删除指定的页面。\n * CONNECT | HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\n * OPTIONS | 允许客户端查看服务器的性能。\n * TRACE | 回显服务器收到的请求，主要用于测试或诊断。\n *\n * @version 1.0\n */\nexport default class HttpSystem {\n    private static _instance: HttpSystem;\n    private outAdapter: Function;\n\n    public static get instance(): HttpSystem {\n        if (HttpSystem._instance == null) {\n            HttpSystem._instance = new HttpSystem();\n        }\n        return HttpSystem._instance;\n    }\n\n    /**\n     * @param {Function} outAdapter 发生错误的回调\n     * @memberof HttpSystem\n     */\n    public async init(outAdapter: Function): Promise<void> {\n        return new Promise((res) => {\n            this.outAdapter = outAdapter;\n            res();\n        })\n    }\n\n    public release(): void {\n        this.outAdapter = null;\n        HttpSystem._instance = null;\n    }\n    /**\n     * 发送get请求\n     * @param url 地址\n     * @param params url参数\n     */\n    public httpGet(url: string, params?: object, header?: string): Promise<any> {\n        console.log(`httpget:url = ${url}`)\n        return new Promise((resolve, reject) => {\n            let headerJson = { 'Content-Type': 'application/json; charset=utf-8' };\n            if (header && header != \"\") {\n                let json = JSON.parse(header);\n                for (let key in json) {\n                    headerJson[key] = json[key];\n                }\n            }\n            let xhr: Http = new Http();\n            xhr.onComplete(resolve);\n            xhr.onError((error, errInfo, response) => {\n                if (this.outAdapter) {\n                    this.outAdapter(`网络错误 ${error},${url}`, errInfo, response);\n                }\n                reject()\n            });\n            xhr.openGet(Http.getUrl(url, params));\n            xhr.setRequestHeader(headerJson);\n            xhr.send();\n        }).catch(reason => {\n            if (this.outAdapter) {\n                this.outAdapter(reason && reason.message || '网络错误' + url);\n            }\n        })\n    }\n\n    /**\n     * 发送一个post请求\n     * @param url 地址\n     * @param body 包体\n     * @param params url参数\n     */\n    public httpPost(url: string, body?: any, params?: object, header?: string,): Promise<any> {\n        console.log(`httpPost:url = ${Http.getUrl(url, params)}`)\n        return new Promise((resolve, reject) => {\n            let headerJson = { 'Content-Type': 'application/json; charset=utf-8' };\n            if (header && header != \"\") {\n                let json = JSON.parse(header);\n                for (let key in json) {\n                    headerJson[key] = json[key];\n                }\n            }\n\n            let xhr: Http = new Http();\n            xhr.onComplete(resolve);\n            xhr.onError((error, errInfo, response) => {\n                if (this.outAdapter) {\n                    this.outAdapter(`网络错误 ${error},${url}`, errInfo, response);\n                }\n                reject()\n            });\n            xhr.openPost(Http.getUrl(url, params));\n            xhr.setRequestHeader(headerJson);\n            xhr.send(body);\n        }).catch(reason => {\n            if (this.outAdapter) {\n                this.outAdapter(reason && reason.message || '网络错误' + url);\n            }\n        })\n    }\n}","import { HttpStateMap } from \"./HttpState\";\n\nexport class Http {\n    public static readonly GET: string = \"get\";\n    public static readonly POST: string = \"post\";\n\n    private static readonly UNSENT: number = 0; // Client has been created. open() not called yet.\n    private static readonly OPENED: number = 1; // open() has been called.\n    private static readonly HEADERS_RECEIVED: number = 2; // send() has been called, and headers and status are available.\n    private static readonly LOADING: number = 3; // Downloading; responseText holds partial data.\n    private static readonly DONE: number = 4; // The operation is complete.\n\n\n    private xhr: XMLHttpRequest;\n    private _onComplete: Function;\n    private _onError: Function;\n    private method: string;\n    private target: any;\n    private data: any;\n    private url: string;\n\n    public constructor() {\n        try {\n            if (window[\"XMLHttpRequest\"]) {\n                this.xhr = new window[\"XMLHttpRequest\"]();\n            } else {\n                // @ts-ignore\n                this.xhr = new ActiveXObject(\"MSXML2.XMLHTTP\");\n            }\n            this.xhr.timeout = 3000;\n        } catch (e) {\n            console.error(\"Http create error\", e);\n        }\n    }\n\n    /**\n     * 打开连接\n     * @param {string} url 文件在服务器上的位置\n     * @param {string} method 请求的类型，GET 或 POST,默认GET\n     * @param data 数据，对象或字符\n     * @returns {Http}\n     */\n    public open(url: string, method: string = Http.GET, data?: any): Http {\n        this.method = method || \"get\";\n        if (this.method == \"get\" && data) {\n            url = this.spliceUrl(url, data);\n        }\n        this.url = url;\n        this.data = data;\n        this.xhr.open(method, url, true);\n        return this;\n    }\n\n    /**\n     * get方法\n     * @param {string} url 文件在服务器上的位置\n     * @param data 对象或字符\n     * @returns {Http}\n     */\n    public openGet(url: string, data?: any): Http {\n        this.open(url, Http.GET, data);\n        return this;\n    }\n\n    /**\n     * post方法\n     * @param {string} url 文件在服务器上的位置\n     * @param data 对象或字符\n     * @returns {Http}\n     */\n    public openPost(url: string, data?: any): Http {\n        this.open(url, Http.POST, data)\n        return this;\n    }\n\n    /**\n     * 返回的结果，包括错误\n     * @param {Function} callback\n     * @param target this指针\n     * @returns {Http}\n     */\n    public onComplete(callback: Function, target?: any): Http {\n        this.target = target;\n        this._onComplete = callback;\n        return this;\n    }\n\n    /**\n     * 错误回调\n     * @param {Function} callback\n     * @param target this指针\n     * @returns {Http}\n     */\n    public onError(callback: Function, target?: any): Http {\n        this.target = target;\n        this._onError = callback;\n        return this;\n    }\n\n    /**\n     * 将请求发送到服务器。\n     * @param data 可以是对象|字符,仅用于 POST 请求\n     */\n    public send(data?: any): void {\n        data = data || this.data;\n        if (typeof data === \"object\") {\n            try {\n                data = JSON.stringify(data);\n            } catch (e) {\n                console.error(e);\n            }\n        }\n        this.xhr.onreadystatechange = this.onReadyStateChange.bind(this);\n        console.log(`body = ${data}`)\n        this.xhr.send(data);\n    }\n\n    /**\n     * 如果请求已经被发送,则立刻中止请求.\n     */\n    public abort(): void {\n        if (this.xhr) {\n            this.xhr.abort();\n        }\n    }\n\n    /**\n     * 向请求添加 HTTP 头。\n     * @example {token:A1BC,name:guess}\n     * @param data 键值对形式都好分割\n     * @returns {Http}\n     */\n    public setRequestHeader(data?: any): Http {\n        try {\n            for (let key in data) {\n                this.xhr.setRequestHeader(key, data[key]);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n        return this;\n    }\n\n    /**\n     * 返回所有响应头信息(响应头名和值), 如果响应头还没接受,则返回\"\".\n     */\n    public getAllResponseHeaders(): string {\n        if (!this.xhr) {\n            return \"\";\n        }\n        let result: string = this.xhr.getAllResponseHeaders();\n        return result ? result : \"\";\n    }\n\n    public onDestroy(): void {\n        // TODO 清空其他数据\n        this.xhr = null;\n    }\n\n    private spliceUrl(url: string, data: any): string {\n        let dataStr: string = \"\";\n        for (let key in data) {\n            dataStr += key + \"=\" + data[key] + \"&\";\n        }\n        dataStr = dataStr.substr(0, dataStr.length - 1);\n        if (dataStr.length > 2) {\n            url += url.indexOf(\"?\") < 0 ? \"?\" + dataStr : url + dataStr;\n        }\n        return url;\n    }\n\n    private onReadyStateChange(): void {\n        let xhr = this.xhr;\n        if (xhr.readyState == 4) {\n            let ioError = xhr.status >= 400 || xhr.status == 0;\n            let url = this.url;\n            let self = this;\n            if (ioError) {\n                if (this._onError) {\n                    let response = null;\n                    if (this.xhr.response) {\n                        response = JSON.parse(this.xhr.response)\n                    }\n                    this._onError(this.xhr.status, HttpStateMap.instance.getErrorInfoById(this.xhr.status), response); // TODO 返回错误码对应的含义\n                    // this._onError(this.xhr.status, HttpStateMap.instance.getErrorInfoById(this.xhr.status)); //TODO 返回错误码对应的含义\n                }\n            } else {\n                if (this.xhr.readyState == Http.DONE) {\n                    if (this.xhr.status >= 200 && this.xhr.status < 400) {\n                        this._onComplete.call(this.target ? this.target : null, JSON.parse(this.xhr.response));\n                    } else {\n                        this._onComplete.call(this.target ? this.target : null, HttpStateMap.instance.getErrorInfoById(this.xhr.status) // 返回错误码对应的含义\n                        );\n                    }\n                }\n            }\n        }\n    }\n    private static stringifyPrimitive(v: any) {\n        switch (typeof v) {\n            case 'string':\n                return v\n            case 'boolean':\n                return v ? 'true' : 'false'\n            case 'number':\n                return isFinite(v) ? v : ''\n            default:\n                return ''\n        }\n    }\n\n    private static stringify(obj, sep?: string, eq?: string, name?: string) {\n        sep = sep || '&'\n        eq = eq || '='\n        if (obj === null) {\n            obj = undefined\n        }\n\n        if (typeof obj === 'object') {\n            return Object.keys(obj).map(function (k) {\n                let ks = encodeURIComponent(Http.stringifyPrimitive(k)) + eq\n                if (Array.isArray(obj[k])) {\n                    return obj[k].map(function (v) {\n                        return ks + encodeURIComponent(Http.stringifyPrimitive(v))\n                    }).join(sep)\n                } else {\n                    return ks + encodeURIComponent(Http.stringifyPrimitive(obj[k]))\n                }\n            }).join(sep)\n\n        }\n\n        if (!name) { return '' }\n        return encodeURIComponent(Http.stringifyPrimitive(name)) + eq +\n            encodeURIComponent(Http.stringifyPrimitive(obj))\n    };\n\n    public static getUrl(url: string, params?: any) {\n        let s = Http.stringify(params)\n        let sep = url.indexOf('?') > -1 ? '&' : '?'\n        return url + (s ? sep + s : '')\n    }\n}","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class ImageLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络图片资源\r\n        cc.assetManager.loadRemote(path, type, (e, tex: cc.Texture2D) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, new cc.SpriteFrame(tex));\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"ImageLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","import IPlatform from \"./IPlatform\";\n\nexport default class IosAdapter implements IPlatform {\n    public packageName: string = \"CocosHelper\";\n    public isPrintLog: boolean = true;\n    public onGameExit(): void {\n        // console.log(`IosAdapter:onGameExit`)\n        // if (!ifGameExited()) {\n        //     this.callNative(\"InteractCourseResponder\", \"onGameExit\")\n        //     setGameExited(true);\n        // }\n    }\n    public onGameReady(): void {\n        // GameInfo.instance.hasCalledOnGameReady = true;\n        // this.callNative(\"InteractCourseResponder\", \"onGameReady\")\n        cc.log(`getWritablePath():${jsb.fileUtils.getWritablePath()}`)\n    }\n\n    public toast(message: string): void {\n        // jsb.reflection.callStaticMethod(\"CocosHelper\", \"test2WithParm1:andParm2:\", parm1, parm2);\n       jsb.reflection.callStaticMethod(this.packageName, `toast:`, message);\n    }\n\n    callFunction(funcName: string, parm: string, moduleName: string): void {\n        let packagePath = this.packageName;\n        if (moduleName && moduleName != '') {\n            packagePath = moduleName;\n        }\n        jsb.reflection.callStaticMethod(packagePath, `${funcName}:`, parm);\n    }\n\n    callFunctionResult(funcName: string, parm: string, moduleName: string): any {\n        let packagePath = this.packageName;\n        if (moduleName && moduleName != '') {\n            packagePath = moduleName;\n        }\n        let result = jsb.reflection.callStaticMethod(packagePath, `${funcName}:`, parm);\n        return result;\n    }\n}\n","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class JsonLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res: cc.JsonAsset) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"JsonLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","/**\n * 节点类型\n */\nexport class LinkedNode<N> {\n    /** 元素对象本身的值 */\n    public element: N = null;\n    /** 指向前一项 */\n    public previous: LinkedNode<N> = null;\n    /** 指向下一项 */\n    public next: LinkedNode<N>;\n    constructor(element: N) {\n        this.element = element;\n    }\n}\n\n/**\n * 双向链表\n */\nexport default class LinkedList<T> {\n    /** 将数组转化为链表 */\n    public static from<L>(array: L[]) {\n        const { length } = array;\n        const linkedList = new LinkedList(array.shift());\n        linkedList.length = length;\n        array.reduce((previous, current) => {\n            previous.next = new LinkedNode(current);\n            previous.next.previous = previous;\n            return previous.next;\n        }, linkedList.head);\n        return linkedList\n    }\n    /** 头节点 */\n    public head: LinkedNode<T>;\n    /** 链表的长度 */\n    public length: number = 0;\n    constructor(element: T) {\n        this.head = new LinkedNode(element);\n        this.head.next = this.head;\n        this.head.previous = this.head;\n        this.length = 1;\n    }\n\n    /**\n     * @description 用于寻找符合条件的节点，回调函数返回为 true 时，返回对应节点\n     * @param cb 用于寻找的回调函数\n     */\n    public find(cb: (element: LinkedNode<T>) => boolean) {\n        let i;\n        let currentNode = this.head;\n        for (i = 0; i < this.length; i++) {\n            if (cb.call(this, currentNode)) { break; }\n            currentNode = currentNode.next;\n        }\n        return i !== this.length ? currentNode : null;\n    }\n\n\n    /**\n     * @description 在指定节点插入元素\n     * @param newElement 插入元素\n     * @param node 被插入节点\n     */\n    public insert(newElement: T, node: LinkedNode<T>) {\n        const newNode = new LinkedNode(newElement);\n        const previousNode = this.find((n) => n === node);\n        if (previousNode) {\n            const rawNextNode = previousNode.next;\n            previousNode.next = newNode;\n            newNode.previous = previousNode;\n            newNode.next = rawNextNode;\n            rawNextNode.previous = newNode;\n            this.length++;\n        }\n    }\n\n    /**\n     * 删除指定的节点\n     * @param node 要删除的节点\n     */\n    public remove(node: LinkedNode<T>) {\n        const deletedNode = this.find((n) => n === node);\n        if (deletedNode) {\n            if (this.head === deletedNode) {\n                this.head = deletedNode.next;\n            }\n            deletedNode.previous.next = deletedNode.next;\n            deletedNode.next.previous = deletedNode.previous;\n            this.length--;\n        }\n    }\n}","\r\nexport class LoaderObserverParam {\r\n    public url: string;\r\n    public type: typeof cc.Asset;\r\n    public bundle: cc.AssetManager.Bundle;\r\n    public time: number;\r\n    public options: any;\r\n\r\n    public constructor (url: string, type: typeof cc.Asset, bundle: cc.AssetManager.Bundle, time: number, options: any) {\r\n        this.url = url;\r\n        this.type = type;\r\n        this.bundle = bundle;\r\n        this.time = time;\r\n        this.options = options;\r\n    }\r\n}\r\n\r\nexport interface LoaderObserver {\r\n    /**\r\n     * 资源开始加载之前\r\n     * @param {string} url 资源地址\r\n     * @param {cc.Asset} type 资源类型\r\n     */\r\n    beforeLoadRes(param: LoaderObserverParam): void;\r\n\r\n    /**\r\n     * 资源开始加载之前\r\n     * @param {string} url 资源地址\r\n     * @param {cc.Asset} type 资源类型\r\n     * @param {number} time 资源加载时间\r\n     */\r\n    afterLoadRes(param: LoaderObserverParam): void;\r\n\r\n    /**\r\n     * bundle开始加载之前\r\n     * @param {string} url 资源地址\r\n     * @param {cc.Asset} type 资源类型\r\n     */\r\n    beforeLoadBundle(param: LoaderObserverParam): void;\r\n\r\n    /**\r\n     * bundle开始加载之前\r\n     * @param {string} url 资源地址\r\n     * @param {cc.Asset} type 资源类型\r\n     * @param {number} time 资源加载时间\r\n     */\r\n    afterLoadBundle(param: LoaderObserverParam): void;\r\n}","/**\n * 本地存储\n * @version 1.0\n */\nexport class LocalStorageUtils {\n  /**\n   * 移除本地存储\n   * @param {string} key - 要移除的item的索引\n   */\n  public static removeItem(key: string) {\n    localStorage.removeItem(key);\n  }\n\n  /**\n   * 存储Object数据\n   * @param {string} key - 索引\n   * @param {object} value - 内容\n   */\n  public static setObject(key: string, value: any) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n\n  /**\n   * 获取Object数据\n   * @param {string} key - 索引\n   * @returns {object} - 内容\n   */\n  public static getObject(key: string): any {\n    let obj = localStorage.getItem(key);\n    if (obj == \"\") {\n      return null;\n    }\n    return JSON.parse(obj);\n  }\n\n  /**\n   * 存储Bool数据\n   * @param {string} key - 索引\n   * @param {boolean} value - 内容\n   */\n  public static setBool(key: string, value: boolean) {\n    localStorage.setItem(key, value.toString());\n  }\n\n  /**\n   * 获取Bool数据\n   * @param {string} key - 索引\n   * @returns {boolean} - 内容\n   */\n  public static getBool(key: string): boolean {\n    return localStorage.getItem(key) == \"true\" ? true : false;\n  }\n\n  /**\n   * 存储Int数据\n   * @param {string} key - 索引\n   * @param {number} value - 内容\n   */\n  public static setInt(key: string, value: number) {\n    localStorage.setItem(key, value.toString());\n  }\n\n  /**\n   * 获取Int数据\n   * @param {string} key - 索引\n   * @returns {number} - 内容\n   */\n  public static getInt(key: string): number {\n    return Number(localStorage.getItem(key));\n  }\n\n  /**\n   * 存储String数据\n   * @param {string} key - 索引\n   * @param {string} value - 内容\n   */\n  public static setString(key: string, value: string) {\n    localStorage.setItem(key, value);\n  }\n\n  /**\n   * 获取String数据\n   * @param {string} key - 索引\n   * @returns {string} - 内容\n   */\n  public static getString(key: string): string {\n    return localStorage.getItem(key);\n  }\n}\n","import { kit } from \"../../kit\";\nimport ASystem from \"../interface/ASystem\";\n\n/**\n * 日志系统\n * 设计目标主要是作为程序运行的日志，可以输出是控制台或者app本地，当遇到出现问题且没有报错的时候，排查问题的依据\n */\nexport default class LogSystem extends ASystem {\n    private static _instance: LogSystem;\n\n    public isDebug: boolean = true;\n    private gameName: string = \"\";\n    private gameVersion: string = \"\";\n    private outAdapter: Function;\n    private isPrintTime: boolean = false;\n\n    public static get instance(): LogSystem {\n        if (LogSystem._instance == null) {\n            LogSystem._instance = new LogSystem();\n        }\n        return LogSystem._instance;\n    }\n\n    /**\n     * 初始化日志系统\n     * @param {(message: string) => void} [outAdapter] 日志信息输出适配器，输出的字符串已json格式化\n     * @param {string} [gameName] 游戏名称\n     * @param {string} [gameVersion] 游戏版本\n     * @returns {Promise<any>}\n     * @memberof LogSystem\n     */\n    public init(outAdapter?: (message: string) => void, gameName?: string, gameVersion?: string, isPrintTime: boolean = false): Promise<void> {\n        return new Promise((res, rea) => {\n            this.gameName = gameName || \"\";\n            this.gameVersion = gameVersion || \"\";\n            this.outAdapter = outAdapter;\n            this.isPrintTime = isPrintTime;\n            res();\n        })\n    }\n\n    public release(): void {\n        this.outAdapter = null;\n        LogSystem._instance = null;\n    }\n\n    private print(type: string, messages: any): void {\n        // TODO 正式环境关闭复杂日志显示\n        let gameName: string = this.gameName ? \"[\" + this.gameName + \"]\" : '';\n        let gameVersion: string = this.gameName ? \"[\" + this.gameVersion + \"]\" : '';\n        console[type](new Date().toLocaleString() + \" \" + type + \" \" + gameName + \" \" + gameVersion + \"\\t\", messages);\n        if (this && this.outAdapter) {\n            this.outAdapter(new Date().toLocaleString() + type + \" \" + gameName + \" \" + gameVersion + \"\\t\", messages);\n        }\n    }\n\n    private obj2String(messages: any): string {\n        let str = \"\";\n        messages.forEach((element) => {\n            if (typeof messages == \"object\") {\n                str += JSON.stringify(element);\n            } else {\n                str += element;\n            }\n        })\n        return str;\n    }\n\n    public static error(messages): void {\n        kit.system.log.print(\"error\", messages);\n    }\n\n    public static warn(messages): void {\n        kit.system.log.print(\"warn\", messages);\n    }\n\n    /**\n     * 仅debug模式输出log\n     * @static\n     * @param {*} messages\n     * @memberof LogSystem\n     */\n    public static log(messages): void {\n        if (kit.system.log.isDebug) {\n            kit.system.log.print(\"log\", messages);\n        }\n    }\n\n    public static info(messages): void {\n        kit.system.log.print(\"info\", messages);\n    }\n}\n\n// /** 日志序列化组件，存于本地的日志缓存逻辑模块 */\n// export class LogSerializer {\n//     private static _instance: LogSerializer;\n\n//     public static get instanceOrigin(): LogSerializer {\n//         return LogSerializer._instance;\n//     }\n//     public static get instance(): LogSerializer {\n//         if (LogSerializer._instance == null) {\n//             LogSerializer._instance = new LogSerializer();\n//         }\n//         return LogSerializer._instance;\n//     }\n\n//     /** 日志缓存最大条数，超过条数后，最开始的日志将会被抹除 */\n//     public maxLogCount: number = 500;\n//     /** 日志清理结点，当然日志量达到最maxLogCount的一定倍率时，清空到maxLogCount */\n//     public logClearRate: number = 1.8;\n//     /** 日志数组 */\n//     private m_logArray: string[] = [];\n//     /** 日志文件路径 */\n//     private m_logFilePath: string = \"\";\n//     /** 工作状态 */\n//     private m_working: boolean = false;\n//     /**开始记录日志 */\n//     public static getLogFilePath() {\n//         if (cc.sys.isBrowser) {\n//             return \"\";\n//         }\n//         return OSPathManager.cocosPath + \"ccc_runtime_log.txt\"\n//     }\n//     public begin() {\n\n//         if (cc.sys.isBrowser) return;\n//         if (!cc.sys.isNative) {\n//             console.log(`LogSerializer error call begin in not native env.`)\n//             return;\n//         }\n\n//         if (this.m_working) {\n//             console.log(`LogSerializer call begin, but already working.`)\n//             return;\n//         }\n\n//         this.m_working = true;\n\n//         if (!this.m_logArray) {\n//             this.m_logArray = [];\n//         }\n\n//         this.m_logFilePath = LogSerializer.getLogFilePath();\n\n\n//         if (this.m_logFilePath) {\n//             console.log(`LogSerializer begin logfilepath is ${this.m_logFilePath}`)\n//             if (jsb.fileUtils.isFileExist(this.m_logFilePath)) {\n//                 // 认为，已经存储的日志一定是更旧的，因为当前代码处理运行时\n//                 let existLogs: string = jsb.fileUtils.getStringFromFile(this.m_logFilePath);\n//                 if (existLogs) {\n\n//                     // console.log(`LogSerializer begin append content ${existLogs}`)\n//                     this.m_logArray = existLogs.split(\"\\n\").concat(this.m_logArray);\n//                 }\n//             }\n//         }\n//     }\n//     /** 停止记录日志 */\n//     public end() {\n//         if (cc.sys.isBrowser) return;\n//         if (!cc.sys.isNative) {\n//             console.log(`LogSerializer error call end in not native env.`)\n//             return;\n//         }\n\n//         if (!this.m_working) {\n//             // 未调用 begin的情况\n//             this.begin();\n//         }\n\n//         this.flush();\n\n//         this.m_logArray = null;\n//         this.m_working = false;\n//     }\n\n//     public flush() {\n//         if (this.m_logFilePath) {\n//             let target_arr = this.m_logArray;\n//             if (target_arr.length > 0) {\n//                 if (this.m_logArray.length > this.maxLogCount) {\n//                     target_arr = this.m_logArray.slice(this.m_logArray.length - this.maxLogCount, this.m_logArray.length);\n//                 }\n//                 // console.log(`LogSerializer end write to ${this.m_logFilePath} with content ${target_arr.join(\"\\n\")}`)\n//                 jsb.fileUtils.writeStringToFile(target_arr.join(\"\\n\"), this.m_logFilePath);\n//                 // this.m_logArray.splice(0, this.m_logArray.length);\n//             }\n//         }\n//     }\n//     /** 输出一条log */\n//     public log(headStr: string, bodyStr?: string | any): void {\n//         if(!this.m_logArray) {\n//             console.log(`LogSerializer log already released.`)\n//             return;\n//         }\n//         let log_content: string = headStr + \" \" + safeStringify(bodyStr);\n//         // console.log(`LogSerializer add log ${log_content}`)\n//         this.m_logArray.push(log_content);\n//         if (this.m_logArray.length >= this.maxLogCount * this.logClearRate) {\n//             this.m_logArray.splice(0, this.m_logArray.length - this.maxLogCount);\n//         }\n\n//         this.flush();\n//     }\n\n//     public getOutAdapter(): Function {\n//         // 获取输出适配器时，开启日志打印模块\n//         this.begin();\n//         return this.log.bind(this);\n//     }\n\n//     public static reportLocalLogToServer() {\n//         let logFilePath: string = LogSerializer.getLogFilePath();\n//         if (cc.sys.isBrowser) {\n//             console.log(`LogSerializer reportLocalLogToServer error not native`);\n//             return;\n//         }\n//         if (jsb.fileUtils && jsb.fileUtils.isFileExist(logFilePath)) {\n//             let existLogs: string = jsb.fileUtils.getStringFromFile(logFilePath);\n//             if (existLogs) {\n//                 // test open send\n//                 SendLog.forceSend = true;\n//                 SendLog.sendBIPoint(LOG_TYPE_ENUM.RUNTIME_LOG, existLogs);\n//             }\n//         }\n//         else {\n//             console.log(`LogSerializer reportLocalLogToServer error log file not exist ${logFilePath}`)\n//         }\n//     }\n// }","/** 消息体基类 */\nexport class MessageBase {\n    messageApi: string;\n    param: any;\n    showTips: boolean = true; // 请求发生错误是否弹窗\n    debugData: any; // 本地数据模拟\n}","import Telegram from \"./Telegram\";\nimport IEntity from \"../entity/IEntity\";\nimport EntityManager from \"../entity/EntityManager\";\n\n/**\n * 实体消息派发器\n * @author \n */\nexport class MessageDispatcher {\n    private static _instance: MessageDispatcher;\n    private SEND_MSG_IMMEDIATELY: number = 0;\n    private NO_ADDITIONAL_INFO: number = 0;\n    private PriorityQ: TreeSet<Telegram>;\n    private showList: Telegram[];\n\n    public constructor() {\n        this.PriorityQ = new TreeSet<Telegram>((a, b) => { return a - b });\n        this.showList = new Array<Telegram>();\n    }\n\n    public static get instance(): MessageDispatcher {\n        if (this._instance == null) {\n            this._instance = new MessageDispatcher();\n        }\n        return this._instance;\n    }\n\n    /**\n     * 设置用作延迟消息的容器由于自动分类和避免的好处重复的。\n     * 消息按他们的调度时间进行排序。\n     */\n\n\n    /**\n     * 这种方法是通过向窗口发送消息或dispatchdelayedmessages利用。\n     * 此方法调用接收的消息处理成员函数实体，空，与新创建的电报\n     */\n    public Discharge(pReceiver: IEntity, telegram: Telegram): void {\n        this.showList.push(telegram);\n        if (!pReceiver.stateMachine.HandleMessage(telegram)) {\n            // console.log(\"消息被处理,Receiver：\" + EntityManager.instance.GetEntityFromID(telegram.Receiver).property.name);\n        }\n    }\n\n    public get showListData(): Telegram[] {\n        return this.showList;\n    }\n\n    /**\n     * send a message to another agent. Receiving agent is referenced by ID.\n     * 发送消息到另一个代理。接收代理是由身份证引用。\n     */\n    public DispatchMessage(sender: string, receiver: string, msg: number, info: any = null, delay: number = 0): void {\n        //        View.instance.addText(BACKGROUND_RED | FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE);\n        let pSender: IEntity = EntityManager.instance.getEntityFromID(sender);\n        let pReceiver: IEntity = EntityManager.instance.getEntityFromID(receiver);\n        if (pReceiver == null) {\n            console.warn(\"\\nWarning! No Receiver with ID of \" + receiver + \" found\");\n            return;\n        }\n        // create the telegram\n        let telegram: Telegram = new Telegram(0, sender, receiver, msg, info);\n        // if there is no delay, route telegram immediately\n        if (delay <= 0.0) {\n            this.Discharge(pReceiver, telegram);\n        } else {\n            telegram.DispatchTime = Date.now();\n            this.PriorityQ.add(telegram);\n        }\n    }\n\n    /**\n     * 发送任何延迟的消息。这种方法被称为每一次通过\n     * 主游戏循环。\n     */\n    public DispatchDelayedMessages(): void {\n        while ((!this.PriorityQ.isEmpty) && (this.PriorityQ.first.DispatchTime <= Date.now()) && (this.PriorityQ.first.DispatchTime > 0)) {\n            let telegram: Telegram = this.PriorityQ.first;\n            let pReceiver: IEntity = EntityManager.instance.getEntityFromID(telegram.Receiver);\n\n            this.Discharge(pReceiver, telegram);\n            this.PriorityQ.remove(this.PriorityQ.first);\n        }\n    }\n\n    public DispatchSimpleMessage(sender: IEntity, receiver: IEntity): void {\n        let pSender: IEntity = sender;\n        let pReceiver: IEntity = receiver;\n        if (pReceiver == null) {\n            console.warn(\"\\nWarning! No Receiver with ID of \" + receiver + \" found\");\n            return;\n        }\n        let telegram: Telegram = new Telegram(0, pSender.sid, receiver.sid, 0, null);\n        this.Discharge(pReceiver, telegram);\n\n    }\n}\n\n// 简单版TreeSet\nexport class TreeSet<K> extends Set {\n    public first: K;\n\n    private sortFun: Function;\n\n    constructor(sort: Function) {\n        super();\n        this.sortFun = sort;\n    }\n\n    public add(data: K): any {\n        return super.add(data);\n    }\n\n    public remove(data: K): boolean {\n        return this.delete(data);\n    }\n\n    public get isEmpty(): boolean {\n        return this.size === 0;\n    }\n\n}","/**\n * \n */\nexport class MessageType {\n\tpublic constructor() {\n\t}\n}\n","import { MessageBase } from \"./MessageBase\";\nimport NetHelper from \"./NetHelper\";\nconst {ccclass} = cc._decorator;\n\n/**\n * model基类\n */\n@ccclass\nexport default class ModelBase {\n\n    private cbMap: Map<string, (msg) => void> = new Map();\n\n    /** 子类重写 */\n    public init() {\n\n    }\n\n    public sendMessage (message: MessageBase) {\n        this.regiestReponse(message);\n        NetHelper.sendMessage(message);\n    }\n\n    public sendMessageWithOutToken (message: MessageBase) {\n        this.regiestReponse(message);\n        NetHelper.sendMessageWithOutToken(message);\n    }\n\n    public registerCallBack(messageBase: MessageBase, callBack: (msg) => void) {\n        this.cbMap.set(messageBase.messageApi, callBack);\n    }\n\n    private regiestReponse (message: MessageBase) {\n        NetHelper.registCb(message.messageApi, this.responseMessage.bind(this));\n    }\n\n    public responseMessage(api: string, msg: any) {\n        let cb = this.cbMap.get(api);\n        if (cb) {\n            cb(msg);\n        }\n    }\n\n    public clear () {\n        this.cbMap = new Map();\n    }\n}\n","import { LocalStorageUtils } from \"../utils/LocalStorageUtils\";\nimport ModelBase from \"./ModelBase\";\nimport NativeInfo from \"./NativeInfo\";\nimport NetHelper from \"./NetHelper\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ModelManager {\n    /** 测试token */\n    public static readonly testToken = \"\";\n    /** 测试phoneInfo */\n    public static readonly testPhoneInfo = \"\";\n\n    private static _instance: ModelManager = null;\n    public static get instance() {\n        if (!ModelManager._instance) {\n            ModelManager._instance = new ModelManager();\n        }\n        return ModelManager._instance;\n    }\n\n    /** token */\n    private userToken: string;\n    public set UserToken(value: string) {\n        this.userToken = value;\n    }\n    public get UserToken(): string {\n        if (ModelManager.testToken != \"\") {\n            return ModelManager.testToken;\n        }\n        return this.userToken;\n    }\n\n    /** userId */\n    private userId: string;\n    public set UserId(value: string) {\n        this.userId = value;\n    }\n    public get UserId(): string {\n        return this.userId;\n    }\n\n    /** 国家名称 */\n    private countryName: string;\n    public set CountryName(value: string) {\n        this.countryName = value;\n    }\n    public get CountryName(): string {\n        return this.countryName;\n    }\n\n    // 手机信息\n    private generateInfo: string;\n    public get phoneInfo(): string {\n        if (ModelManager.testPhoneInfo != \"\") {\n            return ModelManager.testPhoneInfo;\n        }\n        return this.generateInfo;\n    }\n    public set phoneInfo(value: string) {\n        this.generateInfo = value;\n    }\n    // 时间戳\n    private _timestamp: number;\n    public get timestamp() {\n        return this._timestamp;\n    }\n\n    private _modelList: Map<any, any> = new Map();\n\n    public init(url:string, errorCb: (states, message, response) => void) {\n        NetHelper.setHostUrl(url);\n        NetHelper.init(errorCb);\n        this.generateInfo = NativeInfo.generateInfo();\n        this._timestamp = NativeInfo.currentTimeStamp();\n        let userInfo = LocalStorageUtils.getObject(\"USER_INFO\") || {}\n        this.userToken = userInfo.token || \"\";\n        this.userId = userInfo.userId || -1;\n    }\n\n    public registerModel(model: { new(): ModelBase }): void {\n        let key = model;\n        if (this._modelList.get(key)) {\n        } else {\n            let m = new model();\n            m.init();\n            this._modelList.set(key, m);\n        }\n    }\n\n    /**\n     * 获取model对象\n     */\n\n    public getModel<T extends ModelBase>(model: new () => T): T {\n        let key = model;\n\n        if (!this._modelList.has(key)) {\n            this.registerModel(model);\n        }\n        return this._modelList.get(key);\n    }\n\n    public removeAllModel() {\n        for (let key in this._modelList) {\n            let model: ModelBase = this._modelList[key];\n            model.clear();\n            this._modelList.delete(key);\n        }\n        this._modelList.clear();\n    }\n\n    /** 清理所有model */\n    public clearAllModel(): void {\n        let keyList = Array.from(this._modelList.keys());\n        for (let key of keyList) {\n            let model: ModelBase = this._modelList.get(key);\n            if (model) {\n                model.clear();\n            }\n        }\n    }\n\n    /** 重新初始化所有model */\n    public reInitAllModel(): void {\n        let keyList = Array.from(this._modelList.keys());\n        for (let key of keyList) {\n            let model: ModelBase = this._modelList.get(key);\n            if (model) {\n                model.init();\n            }\n        }\n    }\n}\n","import LogSystem from \"../system/log/LogSystem\";\n\n/**\n * 性能监控工具\n * @version 1.0\n */\nexport class MonitorUtils {\n  private static showData: any = {};\n  private static elem: HTMLElement = null;\n\n  public static init(): void {\n    this.fps();\n    this.elem = document.createElement(\"monitor\");\n    this.elem.setAttribute(\"width\", \"200\");\n    this.elem.setAttribute(\"height\", \"400\");\n    this.elem.style.fontSize = \"10px\";\n    document.body.appendChild(this.elem);\n    setInterval(() => {\n      this.performance();\n      this.elem.innerHTML = this.getInfo();\n    }, 1000);\n  }\n\n  /** 当前页面FPS */\n  private static fps(): void {\n    const times = []; // 存储当前的时间数组\n    let fps: number = 0;\n    function refreshLoop() {\n      window.requestAnimationFrame(() => {\n        const now = (performance || Date).now();\n        while (times.length > 0 && times[0] <= now - 1000) {\n          times.shift(); // 去掉1秒外的时间\n        }\n        times.push(now);\n        fps = times.length;\n        refreshLoop();\n        MonitorUtils.showData[\"FPS\"] = fps;\n      });\n    }\n    refreshLoop();\n  }\n\n  /**\n   * performance 信息简单计算出网页性能数据\n   */\n  private static performance(): void {\n    let performance =\n      window[\"performance\"] || window[\"msPerformance\"] || window[\"webkitPerformance\"];\n\n    if (!performance) {\n      // 当前浏览器不支持\n      // LogSystem.ins.warn(\"你的浏览器不支持 performance 接口\");\n      return;\n    }\n    let m = performance.memory;\n    this.showData[\"内存大小限制\"] = (m.jsHeapSizeLimit / 1048576).toFixed(2) + \"MB\";\n    this.showData[\"可使用内存\"] = (m.totalJSHeapSize / 1048576).toFixed(2) + \"MB\";\n    this.showData[\"占用内存\"] = (m.usedJSHeapSize / 1048576).toFixed(2) + \"MB\";\n\n    let t = performance.timing;\n    this.showData[\"白屏耗时\"] = t.responseStart - t.navigationStart + \"ms\";\n    this.showData[\"DNS查询耗时\"] = t.domainLookupEnd - t.domainLookupStart + \"ms\";\n    this.showData[\"HTTP请求耗时\"] = t.responseEnd - t.requestStart + \"ms\";\n    this.showData[\"TCP链接耗时\"] = t.connectEnd - t.connectStart + \"ms\";\n    this.showData[\"load事件耗时\"] = t.loadEventEnd - t.loadEventStart + \"ms\";\n    this.showData[\"onload回调函数执行的时间\"] = t.loadEventEnd - t.navigationStart + \"ms\";\n\n    let dataStr: string = \"\";\n    for (let key in this.showData) {\n      dataStr += key + \": \" + this.showData[key] + \"\\n\";\n    }\n    // LogSystem.ins.info(\"Performance: \\n\" + dataStr);\n  }\n\n  private static getInfo(): string {\n    let dataStr: string = \"\";\n    for (let key in this.showData) {\n      dataStr += key + \": \" + this.showData[key] + \"</br>\";\n    }\n    return dataStr;\n  }\n}\n","import PlatformSystem from \"../framework/platform/PlatformSystem\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class NativeInfo {\n\n    private static moduleName = PlatformSystem.instance.isAndroid ? 'NativeInterface' : 'CocosHelper';\n\n    public static generateInfo(): string {\n        if (PlatformSystem.instance.isBrowser) {\n            return `{\"device_uuid\": \"lingoChineseAi\"}`;\n        }\n        let adapter = PlatformSystem.instance.adapter;\n        let result = adapter.callFunctionResult(\"generateCommNode\", \"\", NativeInfo.moduleName);\n        return result;\n    }\n\n    public static currentTimeStamp(): number {\n        if (PlatformSystem.instance.isBrowser) {\n            return (new Date()).getTime();\n        }\n        let adapter = PlatformSystem.instance.adapter;\n        let result = adapter.callFunctionResult(\"currentTimeStamp\", \"\", NativeInfo.moduleName);\n        return result;\n    }\n\n    public static getNetworkStatus(): string {\n        if (PlatformSystem.instance.isBrowser) {\n            return NetworkType.NETWORK_WIFI;\n        }\n        let adapter = PlatformSystem.instance.adapter;\n        let result = adapter.callFunctionResult(\"getNetworkStatus\", \"\", NativeInfo.moduleName);\n        return result;\n    }\n}\n\nexport class GenerateInfo {\n    public net_type: string;\n    public device_uuid: string;\n    public app_channel: string;\n    public device_brand: string;\n    public width: string;\n    public height: string;\n    public package_name: string;\n    public loc_latlng: string;\n    public eTz: string;\n    public os_ver: string;\n    public app_ver: string;\n    public os_type: string;\n    public device_model: string;\n}\nexport enum NetworkType {\n    NETWORK_WIFI = \"NETWORK_WIFI\",\n    NETWORK_5G = \"NETWORK_5G\",\n    NETWORK_4G = \"NETWORK_4G\",\n    NETWORK_3G = \"NETWORK_3G\",\n    NETWORK_2G = \"NETWORK_2G\",\n    NETWORK_UNKNOWN = \"NETWORK_UNKNOWN\",\n    NETWORK_NO = \"NETWORK_NO\" // 无网络\n}","import HttpSystem from \"../system/net/http/HttpSystem\";\nimport { MessageBase } from \"./MessageBase\";\nimport ModelManager from \"./ModelManager\";\nimport NativeInfo, { NetworkType } from \"./NativeInfo\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class NetHelper {\n\n    private static cbMap: Map<string, (api: string, msg: MessageBase) => void> = new Map();\n    public static currentMessage: MessageBase;\n    private static _hostUrl:string;\n    private static onErrorCb: (states, message, response) => void\n\n    public static init(errorCb: (states, message, response) => void) {\n        HttpSystem.instance.init(NetHelper.onError);\n        NetHelper.onErrorCb = errorCb;\n    }\n    public static setHostUrl(url:string) {\n        NetHelper._hostUrl = url;\n    }\n\n    public static registCb (message: string, callBack: (api, msg) => void) {\n        NetHelper.cbMap.set(message, callBack);\n    }\n\n    public static sendMessage(message: MessageBase) {\n        if (NetHelper._hostUrl == \"\") {\n            NetHelper.dispatcher(message.messageApi, message.debugData);\n            return;\n        }\n        if (!ModelManager.instance.UserToken || ModelManager.instance.UserToken == '') {\n            this.sendMessageWithOutToken(message);\n            return;\n        }\n        NetHelper.currentMessage = message;\n\n        let netWork = NativeInfo.getNetworkStatus();\n        // 无网络\n        if (netWork == NetworkType.NETWORK_NO) { \n            NetHelper.onError && NetHelper.onError(\"请求错误\", \"failed to connect\", null);\n            return;\n        }\n        let url = this.formatUrl(message.messageApi);\n        let header = { \"timestamp\": ModelManager.instance.timestamp, \"phoneInfo\": ModelManager.instance.phoneInfo, \"Authorization\": `Bearer ${ModelManager.instance.UserToken}` };\n        //let header =  `{\"timestamp\": ${ModelManager.instance.timestamp}, \"phoneInfo\": ${ModelManager.instance.phoneInfo}, \"Authorization\": \"Bearer ${ModelManager.instance.UserToken}\"}`\n        cc.log(header);\n        HttpSystem.instance.httpPost(url, message.param, null, JSON.stringify(header))\n            .then(msg => {\n                cc.log(message.messageApi + \"请求返回\", msg);\n                if (!msg || msg.code != 200) {\n                    NetHelper.onError && NetHelper.onError(\"请求错误\", msg, msg);\n                }\n                NetHelper.dispatcher(message.messageApi, msg);\n            })\n    }\n\n    public static sendMessageWithOutToken(message: MessageBase) {\n        if (NetHelper._hostUrl == \"\") {\n            NetHelper.dispatcher(message.messageApi, message.debugData);\n            return;\n        }\n        let url = this.formatUrl(message.messageApi);\n        let header = { \"timestamp\": ModelManager.instance.timestamp, \"phoneInfo\": ModelManager.instance.phoneInfo };\n        cc.log(header);\n        NetHelper.currentMessage = message;\n        NetHelper.currentMessage[\"noHeader\"] = true;\n        //let header = `{\"timestamp\": ${ModelManager.instance.timestamp}, \"phoneInfo\": ${ModelManager.instance.phoneInfo}}`\n        HttpSystem.instance.httpPost(url, message.param, null, JSON.stringify(header))\n            .then(msg => {\n                cc.log(message.messageApi + \"请求返回\", msg);\n                if (!msg || msg.code != 200) {\n                    NetHelper.onError && NetHelper.onError(\"请求错误\", msg, msg);\n                }\n                NetHelper.dispatcher(message.messageApi, msg);\n            })\n    }\n\n    public static dispatcher(api: string, msg: any) {\n        let cb = NetHelper.cbMap.get(api);\n        if (cb) { \n            cb(api, msg);\n            NetHelper.cbMap.delete(api);\n         }\n    }\n\n    public static tryAgain () {\n        if (NetHelper.currentMessage[\"noHeader\"]) {\n            NetHelper.sendMessageWithOutToken(NetHelper.currentMessage)\n            return;\n        } \n        NetHelper.sendMessage(NetHelper.currentMessage)\n    }\n\n    public static onError (states, message, response) {\n        let api = NetHelper.currentMessage.messageApi;\n        let cb = NetHelper.cbMap.get(api);\n        if (cb) { \n            cb(api, response);\n            NetHelper.cbMap.delete(api);\n        }\n        NetHelper.onErrorCb(states, message, response);\n    }\n\n    public static formatUrl(api: string): string {\n        return `${NetHelper._hostUrl}${api}`;\n    }\n}\n","/**\n * 数值计算工具\n * @version 1.0\n */\nexport class NumberUtils {\n  /**\n   * random 适用于整数\n   * @param {Number} lower\n   * @param {Number} upper\n   * @return {number}\n   */\n  public static random(lower: number, upper: number): number {\n    var range: number = upper - lower + 1;\n    return Math.floor(Math.random() * range) + lower;\n  }\n\n  /**\n   * randomf 适用于浮点数\n   * @param {Number} lower\n   * @param {Number} upper\n   * @return {number}\n   */\n  public static randomf(lower: number, upper: number): number {\n    return Math.random() * (upper - lower) + lower;\n  }\n  /**\n   * 减法\n   * @param {number} arg1\n   * @param {number} arg2\n   * @returns {number}\n   */\n  public static floatSub(arg1: number, arg2: number): number {\n    var r1, r2, m, n;\n    try {\n      r1 = arg1.toString().split(\".\")[1].length;\n    } catch (e) {\n      r1 = 0;\n    }\n    try {\n      r2 = arg2.toString().split(\".\")[1].length;\n    } catch (e) {\n      r2 = 0;\n    }\n    m = Math.pow(10, Math.max(r1, r2));\n    //动态控制精度长度\n    n = r1 >= r2 ? r1 : r2;\n    var result = (arg1 * m - arg2 * m) / m;\n    var tmp = result.toFixed(n);\n    return parseFloat(tmp);\n  }\n\n  /**\n   * 乘法\n   * @param {number} arg1\n   * @param {number} arg2\n   * @returns {number}\n   */\n  public static floatMul(arg1: number, arg2: number): number {\n    var m = 0,\n      s1 = arg1.toString(),\n      s2 = arg2.toString();\n    try {\n      m += s1.split(\".\")[1].length;\n    } catch (e) {}\n    try {\n      m += s2.split(\".\")[1].length;\n    } catch (e) {}\n    return (Number(s1.replace(\".\", \"\")) * Number(s2.replace(\".\", \"\"))) / Math.pow(10, m);\n  }\n\n  /**\n   * 除法\n   * @param {number} arg1\n   * @param {number} arg2\n   * @returns {number}\n   */\n  public static floatDiv(arg1: number, arg2: number): number {\n    var t1 = 0,\n      t2 = 0,\n      r1,\n      r2;\n    try {\n      t1 = arg1.toString().split(\".\")[1].length;\n    } catch (e) {}\n    try {\n      t2 = arg2.toString().split(\".\")[1].length;\n    } catch (e) {}\n    r1 = Number(arg1.toString().replace(\".\", \"\"));\n\n    r2 = Number(arg2.toString().replace(\".\", \"\"));\n    return (r1 / r2) * Math.pow(10, t2 - t1);\n  }\n\n  /**\n   * 大于1000转成1k，精确到小数点后一位\n   * @param {number} arg1\n   * @returns {string}\n   */\n  public static floatTok(arg1: number): string {\n    if (arg1 < 1000) {\n      return arg1.toString();\n    } else {\n      // 整数位 向下取整\n      var t1 = Math.floor(arg1 / 1000);\n      // 小数位 向下取整\n      var t2 = Math.floor((arg1 % 1000) / 100);\n      if (t2 > 0) {\n        return t1 + \".\" + t2 + \"k\";\n      }\n      return t1 + \"k\";\n    }\n  }\n\n  /**\n   * 两点间向量长度与最大向量长度百分比系数\n   * @param arg1 两点间x轴长度\n   * @param arg2 两点间y轴长度\n   * @param arg3 最小系数\n   * @param arg4 最大向量长度\n   */\n  public static floatSqrt(arg1: number, arg2: number, arg3: number, arg4: number): number {\n    var len: number = Math.sqrt(arg1 * arg1 + arg2 * arg2);\n    var mul: number = arg3 + arg4 / len;\n    return mul;\n  }\n}\n","export class ParseTemplateUtils{\n    public static parseSrt(srtText: string) {\n        let data: any[] =[]\n        function ToSeconds(t) {\n            var s = 0.0;\n            if (t) {\n              var p = t.split(\":\");\n              for (let i = 0; i < p.length; i++) {\n                s = s * 60 + parseFloat(p[i].replace(\",\", \".\"));\n              }\n            }\n            return s;\n        }\n        let json = srtText\n        json.split(/\\n\\s\\n/)\n        .filter(item => item != \"\")\n        .map((item, index) => {\n        let textItem = item.split(/\\n/);\n        data.push({\n            index: index,\n            sort: textItem[0],\n            text: textItem[2],\n            translate: textItem[3],\n            startTime: ToSeconds(textItem[1].split(\" --> \")[0]),\n            endTime:  ToSeconds(textItem[1].split(\" --> \")[1]),\n            timeLine: textItem[1],\n            isShow: false,\n          })\n        });\n        return data\n    }\n}","import AndroidAdapter from \"./AndroidAdapter\";\nimport IosAdapter from \"./IosAdapter\";\nimport WebAdapter from \"./WebAdapter\";\nimport IPlatform from \"./IPlatform\";\nimport ASystem from \"../../system/interface/ASystem\";\nimport DebuggerAdapter from \"./DebuggerAdapter\";\n\n/**\n * 平台适配系统\n * @export\n * @class PlatformSystem\n * @extends {ASystem}\n */\nexport default class PlatformSystem extends ASystem {\n    private static _instance: PlatformSystem;\n\n    public adapter: IPlatform;\n\n    public get isBrowser(): boolean {\n        return cc.sys.isBrowser;\n    }\n\n    public get isWXBrowser(): boolean {\n        return this.isBrowser && cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT;\n    }\n\n    public get isSafariBrowser(): boolean {\n        return this.isBrowser && cc.sys.browserType === cc.sys.BROWSER_TYPE_SAFARI;\n    }\n\n    public get isNative(): boolean {\n        return cc.sys.isNative;\n    }\n\n    public get isDebug(): boolean {\n        return this.adapter instanceof DebuggerAdapter;\n    }\n\n    /**\n     * 是否是微信小游戏\n     */\n    public get isWeChat(): boolean {\n        return cc.sys.platform === cc.sys.WECHAT_GAME;\n    }\n\n    public get isAndroid(): boolean {\n        return cc.sys.os === cc.sys.OS_ANDROID;\n    }\n\n    public get isIOS(): boolean {\n        return cc.sys.os === cc.sys.OS_IOS;\n    }\n\n    public async init(...args: any[]): Promise<any> {\n        if (this.isWeChat) {\n            // this.adapter = new WXLittleGameAdapter();\n        }\n        else if (this.isBrowser) {\n            if (window.location.href.indexOf('localhost:') > -1) {\n                this.adapter = new DebuggerAdapter();\n            } else {\n                this.adapter = new WebAdapter();\n            }\n        }\n        else if (this.isNative) {\n            if (this.isAndroid) {\n                this.adapter = new AndroidAdapter();\n            } else if (this.isIOS) {\n                this.adapter = new IosAdapter();\n            }\n        }\n        return Promise.resolve();\n    }\n\n    public release(): void {\n        this.adapter = null;\n        PlatformSystem._instance = null;\n    }\n\n    public static get instance(): PlatformSystem {\n        if (PlatformSystem._instance == null) {\n            PlatformSystem._instance = new PlatformSystem();\n        }\n        return PlatformSystem._instance;\n    }\n}","/**\n * 缓存池\n * @version 1.0\n */\n\nimport LogSystem from \"../system/log/LogSystem\";\n\nexport class PoolUtils {\n  /**\n   * 缓存池数组\n   */\n  private static poolArray: any = {};\n  /**\n   * 类缓存数组\n   */\n  private static classArray: Array<any> = [];\n\n  /**\n   * 初始化缓存池\n   * @param type 类型\n   * @param className 类名\n   * @param num 初始化数量\n   */\n  public static initPool(type: string, className: any, num: number): void {\n    if (this.poolArray[type] == null) {\n      this.poolArray[type] = new Array();\n    }\n    this.classArray[type] = className;\n    for (let i = 0; i < num; i++) {\n      let object = new className();\n      this.poolArray[type].push(object);\n    }\n    LogSystem.log(\"初始化\" + type + \"数量：\" + this.poolArray[type].length);\n  }\n  /**\n   * 获取缓存池对象\n   * @param type 类型\n   */\n  public static getPool(type: string): any {\n    if (this.poolArray[type].length > 0) {\n      let object = this.poolArray[type].shift();\n      // LogSystem.ins.log(\"获取\" + type + \"缓存池对象，剩余数量：\" + this.poolArray[type].length);\n      return object;\n    } else {\n      // LogSystem.ins.log(type + \"缓存池对象剩余不足，剩余数量：\" + this.poolArray[type].length);\n      return new this.classArray[type]();\n    }\n  }\n  /**\n   * 放入缓存池对象\n   * @param type 类型\n   * @param object 需要缓存的对象\n   */\n  public static putPool(type: string, object: any): void {\n    if (object) {\n      // object.reset();\n      this.poolArray[type].push(object);\n      // LogSystem.ins.log(\"放入\" + type + \"缓存池对象，剩余数量：\" + this.poolArray[type].length);\n    }\n  }\n\n  /**\n   * 清理单类型\n   * @param type 类型\n   */\n  public static clear(type: string): void {\n    while (this.poolArray[type] && this.poolArray[type].length > 0) {\n      let object = this.poolArray[type].shift();\n      object.parent = null;\n      // object.destroy();\n    }\n    // LogSystem.ins.log(\"清理后\" + type + \"数量：\" + this.poolArray[type].length);\n  }\n\n  /**\n   * 清理所有\n   */\n  public static clearAll(): void {\n    if (this.poolArray) {\n      for (const key in this.poolArray) {\n        if (this.poolArray.hasOwnProperty(key)) {\n          let pool = this.poolArray[key];\n          while (pool && pool.length > 0) {\n            let object = pool.shift();\n            object.parent = null;\n            // object.destroy();\n          }\n        }\n      }\n    }\n    this.poolArray = {};\n    this.classArray = [];\n  }\n}\n","const { ccclass, property } = cc._decorator;\n\n/**\n * 弹窗基类\n * @see PopupBase.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/components/popups/PopupBase.ts\n * @see PopupManager.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/core/PopupManager.ts\n * @version 20210409\n */\n@ccclass\nexport default class PopupBase<Options = any> extends cc.Component {\n\n    @property({ type: cc.Node, tooltip: CC_DEV && '背景遮罩' })\n    public background: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: CC_DEV && '弹窗主体' })\n    public main: cc.Node = null;\n\n    /** 展示/隐藏动画的时长 */\n    public animDuration: number = 0.3;\n\n    /** 用于拦截点击的节点 */\n    protected blocker: cc.Node = null;\n\n    /** 弹窗选项 */\n    protected options: Options = null;\n\n    /**\n     * 展示弹窗\n     * @param options 弹窗选项\n     * @param duration 动画时长\n     */\n    public show(options?: Options, duration: number = this.animDuration) {\n        return new Promise<void>(res => {\n            // 储存选项\n            this.options = options;\n            // 初始化节点\n            const background = this.background;\n            const main = this.main;\n            this.node.active = true;\n            background.active = true;\n            background.opacity = 0;\n            main.active = true;\n            main.scale = 0.5;\n            main.opacity = 0;\n            // 初始化\n            this.init(this.options);\n            // 更新样式\n            this.updateDisplay(this.options);\n            // 播放背景遮罩动画\n            cc.tween(background)\n                .to(duration * 0.8, { opacity: 200 })\n                .start();\n            // 播放弹窗主体动画\n            cc.tween(main)\n                .to(duration, { scale: 1, opacity: 255 }, { easing: 'backOut' })\n                .call(() => {\n                    // 弹窗已完全展示\n                    this.onShow && this.onShow();\n                    // Done\n                    res();\n                })\n                .start();\n        });\n    }\n\n    /**\n     * 隐藏弹窗\n     * @param suspended 是否被挂起\n     * @param duration 动画时长\n     */\n    public hide(suspended: boolean = false, duration: number = this.animDuration) {\n        return new Promise<void>(res => {\n            const node = this.node;\n            // 动画时长不为 0 时拦截点击事件（避免误操作）\n            if (duration !== 0) {\n                let blocker = this.blocker;\n                if (!blocker) {\n                    blocker = this.blocker = new cc.Node('blocker');\n                    blocker.addComponent(cc.BlockInputEvents);\n                    blocker.setParent(node);\n                    blocker.setContentSize(node.getContentSize());\n                }\n                blocker.active = true;\n            }\n            // 播放背景遮罩动画\n            cc.tween(this.background)\n                .delay(duration * 0.2)\n                .to(duration * 0.8, { opacity: 0 })\n                .start();\n            // 播放弹窗主体动画\n            cc.tween(this.main)\n                .to(duration, { scale: 0.5, opacity: 0 }, { easing: 'backIn' })\n                .call(() => {\n                    // 关闭拦截\n                    this.blocker && (this.blocker.active = false);\n                    // 关闭节点\n                    node.active = false;\n                    // 弹窗已完全隐藏（动画完毕）\n                    this.onHide && this.onHide(suspended);\n                    // Done\n                    res();\n                    // 弹窗完成回调\n                    this.finishCallback && this.finishCallback(suspended);\n                })\n                .start();\n        });\n    }\n\n    /**\n     * 初始化（派生类请重写此函数以实现自定义逻辑）\n     */\n    protected init(options: Options) { }\n\n    /**\n     * 更新样式（派生类请重写此函数以实现自定义样式）\n     * @param options 弹窗选项\n     */\n    protected updateDisplay(options: Options) { }\n\n    /**\n     * 弹窗已完全展示（派生类请重写此函数以实现自定义逻辑）\n     */\n    protected onShow() { }\n\n    /**\n     * 弹窗已完全隐藏（派生类请重写此函数以实现自定义逻辑）\n     * @param suspended 是否被挂起\n     */\n    protected onHide(suspended: boolean) { }\n\n    /**\n     * 弹窗流程结束回调（注意：该回调为 PopupManager 专用，重写 hide 函数时记得调用该回调）\n     */\n    protected finishCallback: (suspended: boolean) => void = null;\n\n    /**\n     * 设置弹窗完成回调（该回调为 PopupManager 专用）\n     * @param callback 回调\n     */\n    public setFinishCallback(callback: (suspended: boolean) => void) {\n        this.finishCallback = callback;\n    }\n\n}\n","import PopupBase from \"./PopupBase\";\r\n\r\n/** 弹窗缓存模式 */\r\nexport enum PopupCacheMode {\r\n    /** 一次性的（立即销毁节点，预制体资源随即释放） */\r\n    Once = 1,\r\n    /** 正常的（立即销毁节点，但是缓存预制体资源） */\r\n    Normal,\r\n    /** 频繁的（只关闭节点，且缓存预制体资源） */\r\n    Frequent\r\n}\r\n\r\n/** 弹窗请求结果 */\r\nexport enum PopupShowResult {\r\n    /** 展示成功（已关闭） */\r\n    Done = 1,\r\n    /** 展示失败（加载失败） */\r\n    Failed,\r\n    /** 等待中（已加入等待队列） */\r\n    Waiting\r\n}\r\n\r\n/**\r\n * 弹窗管理器\r\n * @see PopupManager.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/core/PopupManager.ts\r\n * @see PopupBase.ts https://gitee.com/ifaswind/eazax-ccc/blob/master/components/popups/PopupBase.ts\r\n * @version 20210524\r\n */\r\nexport default class PopupManager {\r\n\r\n    /** 预制体缓存 */\r\n    public static get prefabCache() { return this._prefabCache; }\r\n    private static _prefabCache: Map<string, cc.Prefab> = new Map<string, cc.Prefab>();\r\n\r\n    /** 节点缓存 */\r\n    public static get nodeCache() { return this._nodeCache; }\r\n    private static _nodeCache: Map<string, cc.Node> = new Map<string, cc.Node>();\r\n\r\n    /** 当前弹窗请求 */\r\n    public static get current() { return this._current; }\r\n    private static _current: PopupRequest = null;\r\n\r\n    /** 等待队列 */\r\n    public static get queue() { return this._queue; }\r\n    private static _queue: PopupRequest[] = [];\r\n\r\n    /** 被挂起的弹窗队列 */\r\n    public static get suspended() { return this._suspended; }\r\n    private static _suspended: PopupRequest[] = [];\r\n\r\n    /** 锁定状态 */\r\n    private static locked: boolean = false;\r\n\r\n    /** 用于存放弹窗节点的容器节点（不设置则默认为当前 Canvas） */\r\n    public static container: cc.Node = null;\r\n\r\n    /** 连续展示弹窗的时间间隔（秒） */\r\n    public static interval: number = 0.05;\r\n\r\n    /** 弹窗缓存模式 */\r\n    public static get CacheMode() { return PopupCacheMode; }\r\n\r\n    /** 弹窗请求结果 */\r\n    public static get ShowResult() { return PopupShowResult; }\r\n\r\n    public static cacheMode = PopupCacheMode;\r\n    public static showResult = PopupShowResult;\r\n    public static Base = PopupBase;\r\n    /**\r\n     * 弹窗动态加载开始回调\r\n     * @example\r\n     * PopupManager.loadStartCallback = () => {\r\n     *     LoadingTip.show();\r\n     * };\r\n     */\r\n    public static loadStartCallback: () => void = null;\r\n\r\n    /**\r\n     * 弹窗动态加载结束回调\r\n     * @example\r\n     * PopupManager.loadFinishCallback = () => {\r\n     *     LoadingTip.hide();\r\n     * };\r\n     */\r\n    public static loadFinishCallback: () => void = null;\r\n\r\n    /**\r\n     * 展示弹窗，如果当前已有弹窗在展示中则加入等待队列\r\n     * @param path 弹窗预制体相对路径（如：prefabs/MyPopup）\r\n     * @param options 弹窗选项（将传递给弹窗的组件）\r\n     * @param params 弹窗展示参数\r\n     * @example\r\n     * const options = {\r\n     *     title: 'Hello',\r\n     *     content: 'This is a popup!'\r\n     * };\r\n     * const params = {\r\n     *     mode: PopupCacheMode.Normal\r\n     * };\r\n     * PopupManager.show('prefabs/MyPopup', options, params);\r\n     */\r\n    public static show<Options>(targetNode: cc.Node, options?: Options, params?: PopupParams): Promise<PopupShowResult> {\r\n        let path: string = targetNode.uuid;\r\n        if (!targetNode.active) {\r\n            targetNode.active = true;\r\n        }\r\n        if (!this._nodeCache.has(path)) {\r\n            this._nodeCache.set(path, targetNode);\r\n        }\r\n        return new Promise(async (res) => {\r\n            // 解析处理参数\r\n            params = this.parseParams(params);\r\n            // 当前已有弹窗在展示中则加入等待队列\r\n            if (this._current || this.locked) {\r\n                // 是否立即强制展示\r\n                if (params && params.immediately) {\r\n                    this.locked = false;\r\n                    // 挂起当前弹窗\r\n                    await this.suspend();\r\n                } else {\r\n                    // 将请求推入等待队列\r\n                    this.push(targetNode, options, params);\r\n                    res(PopupShowResult.Waiting);\r\n                    return;\r\n                }\r\n            }\r\n            // 保存为当前弹窗，阻止新的弹窗请求\r\n            this._current = {\r\n                path:targetNode,\r\n                options,\r\n                params\r\n            };\r\n            // 先在缓存中获取弹窗节点\r\n            let node = this.getNodeFromCache(path);\r\n            // 缓存中没有，动态加载预制体资源\r\n            if (!cc.isValid(node)) {\r\n                // 开始回调\r\n                this.loadStartCallback && this.loadStartCallback();\r\n                // 等待加载\r\n                const prefab = await this.load(path);\r\n                // 完成回调\r\n                this.loadFinishCallback && this.loadFinishCallback();\r\n                // 加载失败（一般是路径错误导致的）\r\n                if (!cc.isValid(prefab)) {\r\n                    cc.warn('[PopupManager]', '弹窗加载失败', path);\r\n                    this._current = null;\r\n                    res(PopupShowResult.Failed);\r\n                    return;\r\n                }\r\n                // 实例化节点\r\n                node = cc.instantiate(prefab);\r\n            }\r\n            // 获取继承自 PopupBase 的弹窗组件\r\n            const popup = node.getComponent(PopupBase);\r\n            if (!popup) {\r\n                cc.warn('[PopupManager]', '未找到弹窗组件', path);\r\n                this._current = null;\r\n                res(PopupShowResult.Failed);\r\n                return;\r\n            }\r\n            // 保存组件引用\r\n            this._current.popup = popup;\r\n            // 保存节点引用\r\n            this._current.node = node;\r\n            // 添加到场景中\r\n            node.setParent(this.container || cc.Canvas.instance.node);\r\n            // 显示在最上层\r\n            node.setSiblingIndex(cc.macro.MAX_ZINDEX);\r\n            // 设置完成回调\r\n            const finishCallback = async (suspended: boolean) => {\r\n                if (suspended) {\r\n                    return;\r\n                }\r\n                // 是否需要锁定\r\n                this.locked = (this._suspended.length > 0 || this._queue.length > 0);\r\n                // 回收\r\n                this.recycle(path, node, params.mode);\r\n                this._current = null;\r\n                res(PopupShowResult.Done);\r\n                // 延迟一会儿\r\n                await new Promise((_res) => {\r\n                    cc.Canvas.instance.scheduleOnce(_res, this.interval);\r\n                });\r\n                // 下一个弹窗\r\n                this.next();\r\n            }\r\n            popup.setFinishCallback(finishCallback);\r\n            // 展示\r\n            popup.show(options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 隐藏当前弹窗\r\n     */\r\n    public static hide() {\r\n        if (this._current.popup) {\r\n            this._current.popup.hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从缓存中获取节点\r\n     * @param path 弹窗路径\r\n     */\r\n    private static getNodeFromCache(path: string): cc.Node {\r\n        // 从节点缓存中获取\r\n        const nodeCache = this._nodeCache;\r\n        if (nodeCache.has(path)) {\r\n            const node = nodeCache.get(path);\r\n            if (cc.isValid(node)) {\r\n                return node;\r\n            }\r\n            // 删除无效引用\r\n            nodeCache.delete(path);\r\n        }\r\n        // 从预制体缓存中获取\r\n        const prefabCache = this._prefabCache;\r\n        if (prefabCache.has(path)) {\r\n            const prefab = prefabCache.get(path);\r\n            if (cc.isValid(prefab)) {\r\n                return cc.instantiate(prefab);\r\n            }\r\n            // 删除无效引用\r\n            prefabCache.delete(path);\r\n        }\r\n        // 无\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * 展示挂起或等待队列中的下一个弹窗\r\n     */\r\n    private static next() {\r\n        if (this._current ||\r\n            (this._suspended.length === 0 && this._queue.length === 0)) {\r\n            return;\r\n        }\r\n        // 取出一个请求\r\n        let request: PopupRequest = null;\r\n        if (this._suspended.length > 0) {\r\n            // 挂起队列\r\n            request = this._suspended.shift();\r\n        } else {\r\n            // 等待队列\r\n            request = this._queue.shift();\r\n        }\r\n        // 解除锁定\r\n        this.locked = false;\r\n        // 已有实例\r\n        if (cc.isValid(request.popup)) {\r\n            // 设为当前弹窗\r\n            this._current = request;\r\n            // 直接展示\r\n            request.popup.show(request.options);\r\n            return;\r\n        }\r\n        // 加载并展示\r\n        this.show(request.path, request.options, request.params);\r\n    }\r\n\r\n    /**\r\n     * 添加一个弹窗请求到等待队列中，如果当前没有展示中的弹窗则直接展示该弹窗。\r\n     * @param path 弹窗预制体相对路径（如：prefabs/MyPopup）\r\n     * @param options 弹窗选项\r\n     * @param params 弹窗展示参数\r\n     */\r\n    private static push<Options>(path: cc.Node, options?: Options, params?: PopupParams) {\r\n        // 直接展示\r\n        if (!this._current && !this.locked) {\r\n            this.show(path, options, params);\r\n            return;\r\n        }\r\n        // 加入队列\r\n        this._queue.push({ path, options, params });\r\n        // 按照优先级从小到大排序\r\n        this._queue.sort((a, b) => (a.params.priority - b.params.priority));\r\n    }\r\n\r\n    /**\r\n     * 挂起当前展示中的弹窗\r\n     */\r\n    private static async suspend() {\r\n        if (!this._current) {\r\n            return;\r\n        }\r\n        const request = this._current;\r\n        // 将当前弹窗推入挂起队列\r\n        this._suspended.push(request);\r\n        // 关闭当前弹窗（挂起）\r\n        await request.popup.hide(true);\r\n        // 置空当前\r\n        this._current = null;\r\n    }\r\n\r\n    /**\r\n     * 回收弹窗\r\n     * @param path 弹窗路径\r\n     * @param node 弹窗节点\r\n     * @param mode 缓存模式\r\n     */\r\n    private static recycle(path: string, node: cc.Node, mode: PopupCacheMode) {\r\n        switch (mode) {\r\n            // 一次性\r\n            case PopupCacheMode.Once:\r\n                node.destroy();\r\n                this._nodeCache.delete(path);\r\n                this.release(path);\r\n                break;\r\n            // 正常\r\n            case PopupCacheMode.Normal:\r\n                node.destroy();\r\n                this._nodeCache.delete(path);\r\n                break;\r\n            // 频繁\r\n            case PopupCacheMode.Frequent:\r\n                node.removeFromParent(false);\r\n                this._nodeCache.set(path, node);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载并缓存弹窗预制体资源\r\n     * @param path 弹窗路径\r\n     */\r\n    public static load(path: string): Promise<cc.Prefab> {\r\n        return new Promise((res) => {\r\n            const prefabMap = this._prefabCache;\r\n            // 先看下缓存里有没有，避免重复加载\r\n            if (prefabMap.has(path)) {\r\n                const prefab = prefabMap.get(path);\r\n                // 缓存是否有效\r\n                if (cc.isValid(prefab)) {\r\n                    res(prefab);\r\n                    return;\r\n                } else {\r\n                    // 删除无效引用\r\n                    prefabMap.delete(path);\r\n                }\r\n            }\r\n            // 动态加载\r\n            cc.resources.load(path, (error: Error, prefab: cc.Prefab) => {\r\n                if (error) {\r\n                    res(null);\r\n                    return;\r\n                }\r\n                // 缓存预制体\r\n                prefabMap.set(path, prefab);\r\n                // 增加引用计数\r\n                prefab.addRef();\r\n                res(prefab);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 尝试释放弹窗资源（注意：弹窗内部动态加载的资源请自行释放）\r\n     * @param path 弹窗路径\r\n     */\r\n    public static release(path: string) {\r\n        // 移除节点\r\n        const nodeCache = this._nodeCache;\r\n        let node = nodeCache.get(path);\r\n        if (node) {\r\n            nodeCache.delete(path);\r\n            if (cc.isValid(node)) {\r\n                node.destroy();\r\n            }\r\n            node = null;\r\n        }\r\n        // 移除预制体\r\n        const prefabCache = this._prefabCache;\r\n        let prefab = prefabCache.get(path);\r\n        if (prefab) {\r\n            prefabCache.delete(path);\r\n            prefab.decRef();\r\n            prefab = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 解析参数\r\n     * @param params 参数\r\n     */\r\n    private static parseParams(params: PopupParams) {\r\n        if (params == undefined) {\r\n            return new PopupParams();\r\n        }\r\n        // 是否为对象\r\n        if (Object.prototype.toString.call(params) !== '[object Object]') {\r\n            cc.warn('[PopupManager]', '弹窗参数无效，使用默认参数');\r\n            return new PopupParams();\r\n        }\r\n        // 缓存模式\r\n        if (params.mode == undefined) {\r\n            params.mode = PopupCacheMode.Normal;\r\n        }\r\n        // 优先级\r\n        if (params.priority == undefined) {\r\n            params.priority = 0;\r\n        }\r\n        // 立刻展示\r\n        if (params.immediately == undefined) {\r\n            params.immediately = false;\r\n        }\r\n        return params;\r\n    }\r\n\r\n}\r\n\r\n/** 弹窗展示参数 */\r\nexport class PopupParams {\r\n    /** 缓存模式 */\r\n    public mode?: PopupCacheMode = PopupCacheMode.Normal;\r\n    /** 优先级（优先级大的优先展示） */\r\n    public priority?: number = 0;\r\n    /** 立刻展示（将会挂起当前展示中的弹窗） */\r\n    public immediately?: boolean = false;\r\n}\r\n\r\n/** 弹窗展示请求 */\r\nexport interface PopupRequest {\r\n    /** 弹窗预制体相对路径 */\r\n    path: cc.Node;\r\n    /** 弹窗选项 */\r\n    options: any;\r\n    /** 缓存模式 */\r\n    params: PopupParams,\r\n    /** 弹窗组件 */\r\n    popup?: PopupBase,\r\n    /** 弹窗节点 */\r\n    node?: cc.Node\r\n}\r\n","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class PrefabLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"PrefabLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","import BaseLoader from \"./base/BaseLoader\";\r\nimport { AtlasLoader, AudioLoader, DefaultLoader, ImageLoader, JsonLoader, PrefabLoader, SpineLoader, TextLoader } from \"./base/loader-index\";\r\nimport { LoaderObserver, LoaderObserverParam } from \"./LoaderObserver\";\r\n\r\n/**\r\n * 远程spine数据配置\r\n */\r\nexport class RemoteSpineData {\r\n    public json: string;\r\n    public atlas: string;\r\n    public images: string[];\r\n}\r\n\r\nexport default class ResLoader {\r\n\r\n    // 加载器map集合\r\n    private static _defaultMap: Map<{prototype: cc.Asset}, BaseLoader>;\r\n    // 默认loader\r\n    private static _defaultLoader: DefaultLoader = null;\r\n    // 是否初始化\r\n    private static _init: boolean = false;\r\n    // 加载器观察者列表\r\n    private static _observerList: LoaderObserver[] = [];\r\n\r\n    /** 初始化加载器 */\r\n    public static init (): void {\r\n        if (!ResLoader._init) {\r\n            ResLoader._defaultMap = new Map();\r\n            ResLoader._defaultMap.set(cc.SpriteFrame, new ImageLoader());\r\n            ResLoader._defaultMap.set(cc.SpriteAtlas, new AtlasLoader());\r\n            ResLoader._defaultMap.set(cc.AudioClip, new AudioLoader());\r\n            ResLoader._defaultMap.set(cc.JsonAsset, new JsonLoader());\r\n            ResLoader._defaultMap.set(cc.TextAsset, new TextLoader());\r\n            ResLoader._defaultMap.set(cc.Prefab, new PrefabLoader());\r\n            ResLoader._defaultMap.set(sp.SkeletonData, new SpineLoader());\r\n            // 默认加载器\r\n            ResLoader._defaultLoader = new DefaultLoader();\r\n        }\r\n        ResLoader._init = true;\r\n    }\r\n\r\n    /**\r\n     * 注册观察者\r\n     * @param {LoaderObserver} observer 自定义观察者\r\n     */\r\n    public static addObserver (observer: LoaderObserver): void {\r\n        ResLoader._observerList.push(observer);\r\n    }\r\n\r\n    /**\r\n     * 移除观察者\r\n     * @param {LoaderObserver} observer 自定义观察者 \r\n     * @returns {boolean} 是否移除成功\r\n     */\r\n    public static removeObserver (observer: LoaderObserver): boolean {\r\n        for (let i = ResLoader._observerList.length - 1; i >= 0; i--) {\r\n            let obs = ResLoader._observerList[i];\r\n            if (obs === observer) {\r\n                ResLoader._observerList.splice(i, 1);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 通用资源加载接口（包括本地资源、网络资源和远程资源）\r\n     * @param {string} path 资源路径，可以是本地资源、网络资源和远程资源\r\n     * @param {cc.Asset | Record<string, any>} options 资源类型 | 远程资源可选参数\r\n     * @param {(err, res) => void} onComplete 加载完成回调\r\n     * @param {cc.AssetManager.Bundle | string} bundle 资源所属bundle，可选。\r\n     * @param {(finish: number, total: number, item: cc.AssetManager.RequestItem) => void} onProgress 加载进度\r\n     */\r\n    public static loadRes (\r\n        path: string, \r\n        options: typeof cc.Asset | Record<string, any>, \r\n        onComplete: (err, res) => void, \r\n        bundle?: cc.AssetManager.Bundle | string, \r\n        onProgress?: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void): void {\r\n        // 初始化resloader\r\n        ResLoader.init();\r\n        let curBundle: cc.AssetManager.Bundle = null;\r\n        let tempType = null;\r\n        if (typeof options !== \"object\") {\r\n            tempType = options;\r\n            if (bundle && typeof bundle === \"string\" && bundle !== \"\") {\r\n                curBundle = cc.assetManager.getBundle(bundle);\r\n            } else if (bundle && typeof bundle !== \"string\") {\r\n                curBundle = bundle as cc.AssetManager.Bundle;\r\n            } else {\r\n                curBundle = cc.resources as cc.AssetManager.Bundle;\r\n            }\r\n            if (curBundle) {\r\n                let as = curBundle.get(path, tempType);\r\n                if (as) {\r\n                    ResLoader.__beforeLoadRes(new LoaderObserverParam(path, tempType, curBundle, 0, null));\r\n                    onComplete(null, as);\r\n                    ResLoader.__afterLoadRes(new LoaderObserverParam(path, tempType, curBundle, 0, null));\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        let param = new LoaderObserverParam(path, tempType, curBundle, 0, null);\r\n        ResLoader.__beforeLoadRes(param);\r\n        let loader = ResLoader._defaultMap.get(tempType);\r\n        if (!loader) {\r\n            if (typeof options !== \"object\") {\r\n                cc.log(`assets type: ${tempType} is not exists, default loader insteaded!`);\r\n            }\r\n            loader = ResLoader._defaultLoader;\r\n        }\r\n        let startTime = new Date().getTime();\r\n        loader.loadRes(path, options, (_err, _res) => {\r\n            if (onComplete) {\r\n                param.time = new Date().getTime() - startTime; // 计算下载时间\r\n                ResLoader.__afterLoadRes(param);\r\n                onComplete(_err, _res);\r\n            }\r\n        }, curBundle, onProgress);\r\n    }\r\n\r\n    private static __beforeLoadRes (param: LoaderObserverParam): void {\r\n        for (let obs of ResLoader._observerList) {\r\n            obs.beforeLoadRes(param);\r\n        }\r\n    }\r\n\r\n    private static __afterLoadRes (param: LoaderObserverParam): void {\r\n        for (let obs of ResLoader._observerList) {\r\n            obs.afterLoadRes(param);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 加载目录\r\n     * @param {string} dir 资源目录\r\n     * @param {cc.Asset} type 资源类型\r\n     * @param {(finish: number, total: number, item: cc.AssetManager.RequestItem) => void} onProgress 加载进度回调\r\n     * @param {(error: Error, assets: Array<T>) => void} onComplete 加载完成回调\r\n     * @param {cc.AssetManager.Bundle | string} bundle 资源所属bundle，可选。 \r\n     */\r\n    public static loadDir<T extends cc.Asset> (dir: string, type: typeof cc.Asset, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, onComplete: (error: Error, assets: Array<T>) => void, bundle?: cc.AssetManager.Bundle | string): void {\r\n        let curBundle: cc.AssetManager.Bundle = null;\r\n        if (bundle && typeof bundle === \"string\" && bundle !== \"\") {\r\n            curBundle = cc.assetManager.getBundle(bundle);\r\n        } else if (bundle && typeof bundle !== \"string\") {\r\n            curBundle = bundle as cc.AssetManager.Bundle;\r\n        } else {\r\n            curBundle = cc.resources as cc.AssetManager.Bundle;\r\n        }\r\n        if (!curBundle) {\r\n            onComplete(new Error(`bundle ${bundle} is not exists!`), null);\r\n            return;\r\n        }\r\n        curBundle.loadDir(dir, type, onProgress, onComplete);\r\n    }\r\n\r\n    /**\r\n     * 加载bundle\r\n     * @param {string} nameOrUrl bundle名称或地址\r\n     * @param {Record<string, any>} options 下载bundle的可选参数\r\n     * @param {(err: Error, bundle: cc.AssetManager.Bundle) => void} onComplete 加载完成回调\r\n     */\r\n    public static loadBundle (nameOrUrl: string, options: Record<string, any>, onComplete: (err: Error, bundle: cc.AssetManager.Bundle) => void): void {\r\n        let param = new LoaderObserverParam(nameOrUrl, null, null, 0, null);\r\n        let startTime = new Date().getTime();\r\n        ResLoader.__beforeLoadBundle(param);\r\n        cc.assetManager.loadBundle(nameOrUrl, options, (_err, _bundle) => {\r\n            param.time = new Date().getTime() - startTime; // 加载时间处理\r\n            ResLoader.__afterLoadBundle(param);\r\n            if (onComplete) {\r\n                onComplete(_err, _bundle);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static __beforeLoadBundle (param: LoaderObserverParam): void {\r\n        for (let obs of ResLoader._observerList) {\r\n            obs.beforeLoadBundle(param);\r\n        }\r\n    }\r\n\r\n    private static __afterLoadBundle (param: LoaderObserverParam): void {\r\n        for (let obs of ResLoader._observerList) {\r\n            obs.afterLoadBundle(param);\r\n        }\r\n    }\r\n}","import ResLoader from \"../framework/load/ResLoader\";\nimport LogSystem from \"../system/log/LogSystem\";\n\n/**\n * 资源加载类型， Global 不会被释放bundle\n */\nexport enum ResourceType {\n    default,\n    Global, \n    Normal\n}\n\nclass Asset {\n    public bundle: cc.AssetManager.Bundle;\n    private assetMap: Map<string, cc.Asset>;\n    private resType: ResourceType;\n\n    constructor(resType) {\n        this.assetMap = new Map();\n        this.resType = resType;\n    }\n\n    public loadBundle(bundleName): Promise<any> {\n        return new Promise((reslove, reject) => {\n            ResLoader.loadBundle(bundleName, null, (e, bundle: cc.AssetManager.Bundle) => {\n                if (e) {\n                    reject(e);\n                    return;\n                }\n                this.bundle = bundle;\n                reslove(bundle);\n            })\n        }).catch(e => cc.log(e))\n    }\n\n    public loadRes(path: string, type: typeof cc.Asset, finishCb: (e, asset) => void) {\n        if (this.assetMap.has(path)) {\n            let asset = this.assetMap.get(path);\n            if (finishCb) {\n                finishCb(null, asset);\n            }\n            return;\n        }\n        ResLoader.loadRes(path, type, (e, res: cc.Asset) => {\n            this.assetMap.set(path, res);\n            // res.addRef();\n\n            if (finishCb) {\n                finishCb(null, this.assetMap.get(path));\n                return;\n            }\n        }, this.bundle);\n    }\n\n    public release(releaseComponents?: boolean): string {\n        if (this.bundle.name == 'components' && !releaseComponents) {\n            cc.log('components 不释放');\n            return;\n        }\n        this.assetMap.forEach((res, key) => {\n            // cc.log(`释放${res.name}`);\n            // res.decRef();\n            cc.log(`释放${res.name}`);\n            cc.assetManager.releaseAsset(res)\n            this.bundle.release(key);\n        });\n        this.assetMap.clear();\n        if (this.resType == ResourceType.Global) {\n            return \"\";\n        }\n        cc.log(`释放bundle${this.bundle.name}`);\n        cc.assetManager.removeBundle(this.bundle);\n        return this.bundle.name;\n    }\n\n    public releaseWithOutBundle(releaseComponents?: boolean): string {\n        this.assetMap.forEach((res, key) => {\n            // cc.log(`释放${res.name}`);\n            // res.decRef();\n            cc.log(`释放${res.name}`);\n            cc.assetManager.releaseAsset(res)\n            this.bundle.release(key);\n        });\n        this.assetMap.clear();\n        if (this.resType == ResourceType.Global) {\n            return \"\";\n        }\n        return this.bundle.name;\n    }\n}\n\nexport default class ResourcesManager {\n    private static _instance: ResourcesManager;\n\n    private assetsMap: Map<string, Asset>;\n\n    public static get instance(): ResourcesManager {\n        if (!ResourcesManager._instance) {\n            ResourcesManager._instance = new ResourcesManager();\n        }\n        return ResourcesManager._instance;\n    }\n\n    constructor() {\n        this.assetsMap = new Map();\n    }\n\n    /**\n     * 加载单个资源\n     * @param {string} bundleName\n     * @param {string} resPath \n     * @param {kit.manager.Resources.type} resType 加载类型 \n     * @param {typeof cc.Asset} assetType \n     * @param {(error, res) => void} finishCb  加载完成回调\n     * @returns \n     */\n    public loadRes(bundleName: string, resPath: string, resType: ResourceType, assetType: typeof cc.Asset, finishCb: (error, res) => void): Promise<any> {\n        return new Promise(async (resolve, rej) => {\n            if (bundleName == \"\" || resPath == \"\") {\n                LogSystem.error(`ResourcesManager loadRes bundleName or resPath null`);\n                rej();\n                return;\n            }\n\n            if (this.assetsMap.has(bundleName)) {\n                let asset = this.assetsMap.get(bundleName);\n                asset.loadRes(resPath, assetType, (e, res) => {\n\n                    if (finishCb) {\n                        finishCb(e, res);\n                    }\n                    if (e) {\n                        rej(e);\n                    } else {\n                        resolve(res);\n                    }\n\n                })\n                return;\n            }\n\n            let assetClip = new Asset(resType);\n            await assetClip.loadBundle(bundleName);\n            assetClip.loadRes(resPath, assetType, (e, asset) => {\n                this.assetsMap.set(bundleName, assetClip);\n                if (finishCb) {\n                    finishCb(e, asset);\n                }\n                if (e) {\n                    rej(e);\n                } else {\n                    resolve(asset);\n                }\n\n            });\n\n        }).catch(e => () => {\n            if (finishCb) {\n                finishCb(e, null);\n            }\n        })\n    }\n\n    /**\n     * 加载bundle list\n     * @param nameList \n     * @returns \n     */\n    public loadBundleList (nameList: string[]): Promise<cc.AssetManager.Bundle[] | void> {\n        let list: Promise<any>[] = [];\n        for (let key in nameList) {\n            list.push(\n                this.loadBundle(nameList[key])\n            )\n        }\n        return Promise.all(list).catch((e) => cc.log(e));\n    }\n\n    /** 加载单个bundle */\n    public loadBundle(bundleName: string): Promise<cc.AssetManager.Bundle | void> {\n        return new Promise<cc.AssetManager.Bundle>(async (res, rej) => {\n            if (this.assetsMap.has(bundleName)) {\n                let bundle = this.assetsMap.get(bundleName).bundle;\n                res(bundle);\n                return;\n            }\n            let assetClip = new Asset(ResourceType.Normal);\n            this.assetsMap.set(bundleName, assetClip);\n\n            await assetClip.loadBundle(bundleName);\n            res(assetClip.bundle);\n        }).catch(e => {\n            cc.log(e);\n        })\n    }\n\n    /**\n     * 释放资源\n     * @param {?string | string[]} bundleName 传入null或者“”释放加载过的所有资源， 传入bundleName string 释放对应bundleName以及加载的资源，传入bundleName list释放对应的资源和bundle\n     * @param {?boolean} releaseComponents 释放需要释放Component里的资源 默认不释放， ❗️游戏内禁止释放\n     * @returns \n     */\n    public releaseAsset(bundleName?: string | string[], releaseComponents?: boolean) {\n        cc.log(\"释放资源\", bundleName);\n        if (bundleName && typeof bundleName == \"string\" && bundleName != \"\") {\n            let element = this.assetsMap.get(bundleName);\n            let releaseKey = element.release(releaseComponents);\n            if (releaseKey != '') {\n                this.assetsMap.delete(releaseKey);\n            }\n            return;\n        }\n        // 多个释放\n        if (bundleName && typeof bundleName == \"object\") {\n            bundleName.forEach((item) => {\n                let element = this.assetsMap.get(item);\n                let releaseKey = element.release(releaseComponents);\n                if (releaseKey != '') {\n                    this.assetsMap.delete(releaseKey);\n                }\n            })\n            return;\n        }\n        this.assetsMap.forEach(element => {\n            let releaseKey = element.release(releaseComponents);\n            if (releaseKey != '') {\n                this.assetsMap.delete(releaseKey);\n            }\n        });\n\n    }\n\n    public releaseRes(bundle?: cc.AssetManager.Bundle) {\n        if (bundle) {\n            let element = this.assetsMap.get(bundle.name);\n            if (!element) {\n                cc.assetManager.removeBundle(bundle);\n                return;\n            }\n            let releaseKey = element.releaseWithOutBundle();\n            if (releaseKey != '') {\n                this.assetsMap.delete(releaseKey);\n            }\n            cc.log(this.assetsMap);\n            cc.assetManager.removeBundle(bundle);\n        }\n    }\n\n}\n","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class SpineLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"TextLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","import PlatformSystem from \"../../framework/platform/PlatformSystem\";\nimport { StringUtils } from \"../../utils/StringUtils\";\nimport ASystem from \"../interface/ASystem\";\nimport HttpSystem from \"../net/http/HttpSystem\";\n\n/**\n * 埋点\n */\nexport default class SpotSystem extends ASystem {\n\n    /** 埋点 */\n    private static readonly LOG_EVENT: string = \"la_logEvent\";\n    /** 初始化埋点sdk */\n    private static readonly LOG_INIT: string = \"la_logInitWithApiKey\";\n    /** 设置用户id */\n    private static readonly LOG_SET_USER_ID: string = \"la_logUserId\";\n    /** app key */\n    private static APP_KEY: string = \"3437b23f038afa01e3c220886da2deda\";\n    /** 埋点url */\n    private static readonly HTTP_HOST: string = \"https://api2.amplitude.com/batch\";\n    /** ios sdk类名 */\n    private static readonly NAME_SPACE_IOS: string = \"LaLogUtli\";\n    /** android sdk类名 */\n    private static readonly NAME_SPACE_ANDROID: string = \"amplitude/LaLogUtli\";\n\n    private static packagePath: string = PlatformSystem.instance.isAndroid ? SpotSystem.NAME_SPACE_ANDROID : SpotSystem.NAME_SPACE_IOS;\n    private static _instance: SpotSystem;\n\n    private baseInfo: any;\n\n    public static get instance(): SpotSystem {\n        if (SpotSystem._instance == null) {\n            SpotSystem._instance = new SpotSystem();\n        }\n        return SpotSystem._instance;\n    }\n\n    /**\n     * @param baseInfo 公参\n     */\n    public init(baseInfo: any, app_key:string): Promise<void> {\n        return new Promise((res, rej) => {\n            SpotSystem.APP_KEY = app_key;\n            this.baseInfo = baseInfo;\n            cc.log(`init spot system, info: ${this.baseInfo}`)\n            res();\n        })\n    }\n\n    /**\n     * 埋点\n     * @param name 名称\n     * @param params 参数\n     */\n    public send(name: string, ...args): void {\n        // if (PlatformSystem.instance.isNative) {\n        //     this.sendSdk(name, ...args);\n        // } else if (PlatformSystem.instance.isBrowser) {\n        //     this.sendHttp(name, ...args);\n        // }\n        this.sendHttp(name, ...args);   // 原生sdk有问题，切换到http埋点\n    }\n\n    /**\n     * 原生sdk埋点\n     * @param name 名称\n     * @param params 参数\n     */\n    public sendSdk(name: string, ...args): void {\n        let str: string = name;\n        if (args) {\n            str = StringUtils.format(name, ...args);\n        }\n        // cc.log(`spot: ${str}`)\n        PlatformSystem.instance.adapter.callFunction(SpotSystem.LOG_EVENT, str, SpotSystem.packagePath);\n    }\n\n    /**\n     * http api 埋点\n     * @param name 名称\n     * @param params 参数\n     * @see https://analytics.amplitude.com/demo/connections/project/168342/sources/setup/HTTP_API?source=connections+page%3A+sources\n     */\n    public sendHttp(name: string, ...args): void {\n        let str: string = name;\n        if (args) {\n            str = StringUtils.format(name, ...args);\n        }\n        let obj: any = {\n            \"api_key\": SpotSystem.APP_KEY,\n            \"events\": [\n                {\n                    \"event_type\": str,\n                    \"time\": Date.now(),\n                    ...this.baseInfo\n                }\n            ]\n        }\n        // cc.log(`spot: ${JSON.stringify(obj)}`)\n        HttpSystem.instance.httpPost(SpotSystem.HTTP_HOST, obj).catch((error) => {\n            cc.error(error);    // 埋点错误不做处理\n        })\n    }\n\n    public release(): void {\n\n    }\n}","import IEntity from \"./entity/IEntity\";\nimport IState from \"./state/IState\";\nimport Telegram from './message/Telegram';\n\n/**\n * 状态机,翻译自游戏编程精粹7，c++版本\n * @class StateMachine\n */\nexport default class StateMachine<T extends IEntity> {\n    private m_pOwner: T;\n    private m_pCurrentState: IState<T>;\n    private m_pPreviousState: IState<T>;\n    private m_pGlobalState: any;\n\n    public constructor(owner: T) {\n        this.m_pOwner = owner;\n        this.m_pCurrentState = null;\n        this.m_pPreviousState = null;\n        this.m_pGlobalState = {};\n    }\n\n    public release(): void {\n        this.m_pCurrentState && this.m_pCurrentState.exit();\n        if (this.m_pGlobalState) {\n            for (let key in this.m_pGlobalState) {\n                this.m_pGlobalState[key].exit();\n                delete this.m_pGlobalState[key]\n            }\n            this.m_pGlobalState = null;\n        }\n    }\n\n    public AddGlobalState(state: any, data?: any): void {\n        let newState: IState<T> = new state()\n        newState.entity = this.m_pOwner;\n        this.m_pGlobalState[state] = newState;\n        // enter 放在后面\n        newState.enter(data);\n    }\n\n    public RemoveGlobalState(state: any): void {\n        if (this.m_pGlobalState[state]) {\n            this.m_pGlobalState[state].exit();\n            delete this.m_pGlobalState[state];\n        }\n    }\n\n    public Update(dt: number): void {\n        if (this.m_pGlobalState !== null) {\n            for (let key in this.m_pGlobalState) {\n                this.m_pGlobalState[key].execute(dt);\n            }\n        }\n        if (this.m_pCurrentState !== null) {\n            this.m_pCurrentState.execute(dt);\n        }\n    }\n\n    /**\n     * 自定义改变状态过程\n     * @param onTransition 自定义过场函数\n     * @example\n     *    this.stateMachine.Transition((currentState: IState<Main>) => {\n     *        let newState: IState<Main> = new stateClass();\n     *        newState.entity = this;\n     *        newState.enter(data).then(() => {\n     *            currentState.exit();\n     *        })\n     *        return newState;\n     *    });\n     */\n    public Transition(onTransition: (currentState: IState<T>) => IState<T>): void {\n        this.m_pPreviousState = this.m_pCurrentState;\n        let newState: IState<T> = onTransition(this.m_pPreviousState);\n        this.m_pCurrentState = newState;\n    }\n\n    public ChangeState(pNewState: any, data?: any): void {\n        this.m_pPreviousState = this.m_pCurrentState;\n        this.m_pPreviousState && this.m_pPreviousState.exit(this.m_pOwner);\n        this.m_pCurrentState = new pNewState();\n        this.m_pCurrentState.entity = this.m_pOwner;\n        this.m_pCurrentState.enter(data);\n    }\n\n    public HandleMessage(msg: Telegram): boolean {\n        if (this.m_pCurrentState && this.m_pCurrentState.onMessage(this.m_pOwner, msg)) {\n            return true;\n        }\n        if (this.m_pGlobalState) {\n            this.m_pGlobalState.forEach((element: IState<T>) => {\n                element.onMessage(this.m_pOwner, msg);\n            })\n        }\n        return false;\n    }\n\n    public RevertPreviousState(): void {\n        this.ChangeState(this.m_pPreviousState);\n    }\n\n    public isInState(state: any | IState<T>): boolean {\n        return this.m_pCurrentState instanceof state;\n    }\n\n    public exitCurrentState(data?: any): void {\n        this.CurrentState && this.CurrentState.exit(data);\n        this.m_pCurrentState.entity = null;\n        this.m_pPreviousState = null;\n        this.m_pCurrentState = null;\n    }\n\n    public get CurrentState(): IState<T> {\n        return this.m_pCurrentState;\n    }\n\n    public get GlobalState(): IState<T>[] {\n        return this.m_pGlobalState;\n    }\n\n    public get PreviousState(): IState<T> {\n        return this.m_pPreviousState;\n    }\n}\n","/**\n * 字符串工具\n * @version 1.0\n */\nexport class StringUtils {\n  public static format(sourceStr: string, ...args): string {\n    if (args.length === 0) {\n      return sourceStr;\n    }\n    let str = sourceStr;\n    for (let i = 0; i < args.length; i++) {\n      str = str.replace(new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\"), args[i]);\n    }\n    return str;\n  }\n  /**\n   * 替换字符\n   * @param fromIndex 开始替换的索引，以0开始\n   * @param len 替换的长度\n   * @param sourceStr 源字符串\n   * @param replaceCode 替换成字符串码\n   * @returns string\n   */\n  public static replaceStr(\n    fromIndex: number,\n    len: number,\n    sourceStr: string,\n    replaceCode: string = \"*\"\n  ): string {\n    var tempStr = \"\";\n    var tempLen = sourceStr.length;\n    for (var index = 0; index < tempLen; ++index) {\n      if (index >= fromIndex && index < fromIndex + len) {\n        tempStr += replaceCode;\n      } else {\n        tempStr += sourceStr.charAt(index);\n      }\n    }\n    return tempStr;\n  }\n\n  /**\n   * 字符串长度\n   * @param str 字符串\n   * @returns number\n   */\n  public static strLength(str: string): number {\n    if (str === void 0) {\n      return 0;\n    }\n    var len = 0;\n    for (var i = 0; i < str.length; i++) {\n      if ((str.charCodeAt(i) & 0xff00) != 0) {\n        len++;\n      }\n      len++;\n    }\n    return len;\n  }\n\n  /**\n   * 判断空串\n   */\n  public static isEmpty(obj: any): boolean {\n    if (typeof obj == \"undefined\" || obj == null || obj == \"\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * 超出部分显示省略号\n   * @param {string} text 原始文本\n   * @param {number} max 最大长度\n   * @param {string} [moreText=\"...\"] 省略号或指定字符\n   */\n  public static moreText(text: string, max: number, moreText: string = \"...\"): string {\n    if (text.length > max) {\n      return text.substring(0, max - 2) + \"...\";\n    } else {\n      return text;\n    }\n  }\n}\n","/**\n *\n * @author \n */\nexport default class Telegram {\n    /**\n     * these telegrams will be stored in a priority queue. Therefore the >\n     * operator needs to be overloaded so that the PQ can sort the telegrams\n     * by time priority. Note how the times must be smaller than\n     * SmallestDelay apart before two Telegrams are considered unique.\n     */\n    private SmallestDelay: number = 0.25;\n    /**\n     * 发送消息的实体(entity)的id\n     */\n    public Sender: string;\n    /**\n     * 处理消息的实体(entity)的id\n     */\n    public Receiver: string;\n    /**\n     * 一个enum类型的消息类型，实体(entity)根据不同的消息类型进行不同的处理\n     */\n    public Msg: number;\n    /**\n     * 消息可以立即发送或延迟指定的金额时间。\n     * 如果一个延迟是必要的，这个字段是加盖的时间应发送消息。\n     */\n    public DispatchTime: number;\n\n    // 消息附带的额外信息，这个可以根据需求自定义，也可以为null\n    public ExtraInfo: any;\n\n    public time: number;\n\n    public constructor(time: number, sender: string, receiver: string, msg: number, info: any = null) {\n        this.Sender = sender;\n        this.Receiver = receiver;\n        this.Msg = msg;\n        this.DispatchTime = time;\n        this.time = Date.now();\n        this.ExtraInfo = info;\n    }\n\n    public get sortSerial(): number {\n        return this.DispatchTime;\n    }\n}\n","\r\nimport BaseLoader from \"./BaseLoader\";\r\n\r\nexport class TextLoader extends BaseLoader {\r\n\r\n    public loadNetRes(path: string, type: typeof cc.Asset | Record<string, any>, callback: (err: any, res: any) => void): void {\r\n        // 加载网络json资源\r\n        cc.assetManager.loadRemote(path, type, (e, res) => {\r\n            if (e) {\r\n                cc.error(e);\r\n            }\r\n            if (callback) {\r\n                callback(e, res);\r\n            }\r\n        });\r\n    }\r\n\r\n    public loadRemoteRes(path: string, type: any, callback: (err: any, res: any) => void): void {\r\n        // 加载远程待下载图片资源\r\n        cc.log(path, type, callback);\r\n        throw new Error(\"TextLoader loadRemoteRes method not implemented.\");\r\n    }\r\n\r\n    public loadLocalRes(path: string, type: any, onProgress: (finish: number, total: number, item: cc.AssetManager.RequestItem) => void, callback: (err: any, res: any) => void, bundle?: cc.AssetManager.Bundle): void {\r\n        if (bundle) {\r\n            bundle.load(path, type, onProgress, callback);\r\n        } else {\r\n            cc.resources.load(path, type, onProgress, callback);\r\n        }\r\n    }\r\n}\r\n","import { NumberUtils } from \"./NumberUtils\";\n\n/**\n * 时间工具\n * @version 1.0\n */\nexport class TimeUtils {\n  /**\n   * 根据指定格式格式化时间\n   * dateToFormate(new Date(), \"yyyy-MM-dd hh:mm:ss\");\n   * @param Date data对象\n   * @param fmt 时间格式，如 yyyy-MM-dd hh:mm:ss\n   * @returns {string}\n   */\n  public static dateToFormate(date: Date, fmt: string): string {\n    let o: any = {\n      \"M+\": date.getMonth() + 1, // 月份\n      \"d+\": date.getDate(), // 日\n      \"h+\": date.getHours(), // 小时\n      \"m+\": date.getMinutes(), // 分\n      \"s+\": date.getSeconds(), // 秒\n      \"q+\": Math.floor((date.getMonth() + 3) / 3), // 季度\n      S: date.getMilliseconds() // 毫秒\n    };\n    if (/(y+)/.test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, (date.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n    }\n    for (let k in o) {\n      if (new RegExp(\"(\" + k + \")\").test(fmt)) {\n        fmt = fmt.replace(\n          RegExp.$1,\n          RegExp.$1.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length)\n        );\n      }\n    }\n    return fmt;\n  }\n\n  /**\n   * 将一个秒数转换为：小时:分钟:秒,譬如：12：23：45\n   * @param number time 时间戳\n   * @returns {string}\n   */\n  public static toDate(time: number): string {\n    let result: string = \"\";\n    if (time <= 0) { return \"00:00:00\"; }\n    let hour = 0;\n    if (time >= 3600) {\n      hour = Math.floor(NumberUtils.floatDiv(time, 3600));\n      time %= 3600;\n    }\n    let minute = 0;\n    if (time >= 60) {\n      minute = Math.floor(NumberUtils.floatDiv(time, 60));\n      time %= 60;\n    }\n    let second = Math.floor(time);\n    if (hour < 10) { result += \"0\" + hour; }\n    else { result += hour.toFixed(); }\n    result += \":\";\n    if (minute < 10) { result += \"0\" + minute; }\n    else { result += minute.toFixed(); }\n    result += \":\";\n    if (second < 10) { result += \"0\" + second; }\n    else { result += second.toFixed(); }\n    return result;\n  }\n\n}\n","import ASystem from \"../interface/ASystem\";\n\n/**\n * 时间系统\n */\nexport default class TimerSystem extends ASystem {\n\n    private static _instance: TimerSystem;\n    private static INTERVAL: number = 1 / 60;\n\n    private _pool: TimerHandler[] = new Array<TimerHandler>();\n    private _handlers: any = {};\n    private _currTimer: number = 0;\n    private _currFrame: number = 0;\n    private _count: number = 0;\n    private _index: number = 0;\n    private _startTime: number = 0;\n\n    public static get instance(): TimerSystem {\n        if (TimerSystem._instance == null) {\n            TimerSystem._instance = new TimerSystem();\n        }\n        return TimerSystem._instance;\n    }\n\n    public init(): Promise<void> {\n        return new Promise((res, rej) => {\n            this._startTime = Date.now();\n            this._currTimer = Date.now();\n            cc.director.getScheduler().enableForTarget(this)\n            cc.director.getScheduler().schedule(this.onEnterFrame, this, TimerSystem.INTERVAL);\n            res();\n        })\n    }\n\n\n    public onEnterFrame(elapsed?: any): void {\n        this._currFrame++;\n        this._currTimer = Date.now();\n        let k: any;\n        for (k in this._handlers) {\n            if (k !== \"undefined\") {\n                let handler: TimerHandler = this._handlers[k];\n                let t: number = handler.userFrame ? this._currFrame : this._currTimer;\n                if (t >= handler.exeTime) {\n                    let method: Function = handler.method;\n                    let args: any[] = handler.args || [elapsed];\n                    if (handler.repeat) {\n                        while (t >= handler.exeTime && k in this._handlers) {\n                            handler.exeTime += handler.delay;\n                            method.apply(handler.thisObj, args);\n\n                        }\n                    } else {\n                        method.apply(handler.thisObj, args);\n                        this.clearTimer(k);\n                    }\n                }\n            } else {\n                console.log(k);\n            }\n        }\n    }\n\n    private create(useFrame: boolean, repeat: boolean, delay: number, method: Function, thisObj: any = null, args: any[] = null, cover: boolean = true): any {\n        let key: any;\n        if (cover) {\n            // 先删除相同函数的计时\n            this.clearTimer(method);\n            key = method;\n        } else {\n            key = this._index++;\n        }\n\n        // 如果执行时间小于1，直接执行\n        if (delay < 1) {\n            method.apply(null, args)\n            return -1;\n        }\n        let handler: TimerHandler = this._pool.length > 0 ? this._pool.pop() : new TimerHandler();\n        handler.userFrame = useFrame;\n        handler.repeat = repeat;\n        handler.delay = delay;\n        handler.method = method;\n        handler.thisObj = thisObj;\n\n        handler.args = args;\n        handler.exeTime = delay + (useFrame ? this._currFrame : this._currTimer);\n        this._handlers[key] = handler;\n        this._count++;\n        return key;\n    }\n\n    /**定时执行一次\n     * @params    delay  延迟时间(单位毫秒)\n     * @params    method 结束时的回调方法\n     * @params    args   回调参数\n     * @params    cover  是否覆盖(true:同方法多次计时，后者覆盖前者。false:同方法多次计时，不相互覆盖)\n     * @return  cover=true时返回回调函数本身，cover=false时，返回唯一ID，均用来作为clearTimer的参数\n     */\n    public doOnce(delay: number, method: Function, thisObj: any = null, args: any[] = null, cover: boolean = true): any {\n        return this.create(false, false, delay, method, thisObj, args, cover);\n    }\n\n    /**定时重复执行\n     * @params    delay  延迟时间(单位毫秒)\n     * @params    method 结束时的回调方法\n     * @params    args   回调参数\n     * @params    cover  是否覆盖(true:同方法多次计时，后者覆盖前者。false:同方法多次计时，不相互覆盖)\n     * @return  cover=true时返回回调函数本身，cover=false时，返回唯一ID，均用来作为clearTimer的参数\n     */\n    public doLoop(delay: number, method: Function, thisObj: any = null, args: any[] = null, cover: boolean = true): any {\n        return this.create(false, true, delay, method, thisObj, args, cover);\n    }\n\n    /**定时执行一次(基于帧率)\n     * @params    delay  延迟时间(单位为帧)\n     * @params    method 结束时的回调方法\n     * @params    args   回调参数\n     * @params    cover  是否覆盖(true:同方法多次计时，后者覆盖前者。false:同方法多次计时，不相互覆盖)\n     * @return  cover=true时返回回调函数本身，cover=false时，返回唯一ID，均用来作为clearTimer的参数\n     */\n    public doFrameOnce(delay: number, method: Function, thisObj: any = null, args: any[] = null, cover: boolean = true): any {\n        return this.create(true, false, delay, method, thisObj, args, cover);\n    }\n\n    /**定时重复执行(基于帧率)\n     * @params    delay  延迟时间(单位为帧)\n     * @params    method 结束时的回调方法\n     * @params    args   回调参数\n     * @params    cover  是否覆盖(true:同方法多次计时，后者覆盖前者。false:同方法多次计时，不相互覆盖)\n     * @return  cover=true时返回回调函数本身，否则返回唯一ID，均用来作为clearTimer的参数\n     */\n    public doFrameLoop(delay: number, method: Function, thisObj: any = null, args: any[] = null, cover: boolean = true): any {\n        return this.create(true, true, delay, method, thisObj, args, cover);\n    }\n\n    /** 定时器执行数量 */\n    public get count(): number {\n        return this._count;\n    }\n\n    /**清理定时器\n     * @params    method 创建时的cover=true时method为回调函数本身，否则method为返回的唯一ID\n     */\n    public clearTimer(method: any): void {\n        let handler: TimerHandler = this._handlers[method];\n        if (handler != null) {\n            delete this._handlers[method];\n            handler.clear();\n            this._pool.push(handler);\n            this._count--;\n        }\n    }\n\n    /**\n     * 方法是否在定时器的队列中\n     */\n    public running(method: any): boolean {\n        if (this._handlers[method] != null) {\n            return true;\n        }\n        return false;\n    }\n\n    public release(): void {\n        for (let handler in this._handlers) {\n            this.clearTimer(this._handlers[handler]);\n        }\n    }\n\n}\n\nclass TimerHandler {\n    /** 执行间隔 */\n    public delay: number = 0;\n    /** 是否重复执行 */\n    public repeat: boolean;\n    /** 是否用帧率 */\n    public userFrame: boolean;\n    /** 执行时间 */\n    public exeTime: number = 0;\n    /** 处理方法 */\n    public method: Function;\n    /** 参数 */\n    public args: any[];\n    /** this对象 */\n    public thisObj: any;\n\n    /** 清理 */\n    public clear(): void {\n        this.method = null;\n        this.args = null;\n        this.thisObj = null;\n    }\n}","import ResLoader from \"../framework/load/ResLoader\";\nimport { kit } from \"../kit\";\nimport LogSystem from \"../system/log/LogSystem\";\n\n/**\n * 解析UI节点工具\n */\nexport default class UIUtils {\n\n    /***\n     * 生成子节点的唯一标识快捷访问\n     * @param node\n     * @param map\n     */\n    public static createSubNodeMap(node: cc.Node, map: Map<string, cc.Node>) {\n        let children = node.children;\n        if (!children) {\n            return;\n        }\n        for (let t = 0, len = children.length; t < len; ++t) {\n            let subChild = children[t];\n            map.set(subChild.name, subChild);\n            UIUtils.createSubNodeMap(subChild, map);\n        }\n    }\n\n    /**\n     * 返回当前节点所有节点,一唯一标识存在\n     * @param node 父节点\n     * @return {Object} 所有子节点的映射map\n     */\n    public static seekAllSubView(node: cc.Node): UIContainer {\n        let map = new Map<string, cc.Node>();\n        UIUtils.createSubNodeMap(node, map);\n        return new UIContainer(map);\n    }\n}\n\nexport class UIContainer {\n    /** 所有节点集合 */\n    private _uiNodesMap: Map<string, cc.Node>;\n\n    // 点击音效\n    private _clickSound = \"commonRes/sound/btn_click\";\n    // 默认bundle\n    private _bundleName = 'components';\n\n    public constructor(nodesMap: Map<string, cc.Node>) {\n        this._uiNodesMap = nodesMap;\n        this.preloadClickEffect();\n    }\n    /**\n     * 根据节点名字获取节点\n     * @param {string}name 节点名字\n     * @return {cc.Node}\n     */\n    public getNode(name: string): cc.Node {\n        return this._uiNodesMap.get(name);\n    }\n\n    /**\n     * 根据节点名字和组件类型获取组件对象\n     * @param {string}name 节点名字\n     * @param {{prototype: cc.Component}}com 组建类型\n     * @return {cc.Component}\n     */\n    public getComponent<T extends cc.Component>(name: string, com: { prototype: T }): T {\n        let node = this._uiNodesMap.get(name);\n        if (node) {\n            return node.getComponent(com);\n        }\n        return null;\n    }\n\n    /**\n     * 注册或发送点击事件，默认带点击音效\n     * @param {cc.Node | string} node 事件节点  \n     * @param {string | (event: any) => void} handler 事件名称 | 事件回调函数 \n     * @param {any} target 目标 \n     * @param {any} param 参数 \n     * @param {string} sound 声音，有默认 \n     * @param {string} bundleName bundle名称 默认components\n     */\n    public onClick<T extends (event: any) => void>(node: cc.Node | string, handler: T, target?: any, param?: any, sound?: string, bundleName?: string | cc.AssetManager.Bundle): void {\n        if (!node) {\n            LogSystem.warn(`onClick参数node不能为空：${node}`);\n            return;\n        }\n        let tempNode: cc.Node = null;\n        if (typeof node === \"string\") {\n            tempNode = this.getNode(node);\n        } else {\n            tempNode = node;\n        }\n        tempNode.on(cc.Node.EventType.TOUCH_START, (event) => {\n            let soundName = (typeof sound == \"string\") ? sound : this._clickSound;\n            let bundle = (typeof bundleName == \"string\") ? bundleName : this._bundleName;\n            kit.manager.Audio.playEffect(bundle, soundName);\n            if (handler) { handler.call(target, param); }\n\n        }, target);\n    }\n\n    /**\n     * 移除节点的点击事件\n     * @param {cc.Node | string} node 事件节点 \n     */\n    public offClick(node: cc.Node | string): void {\n        if (!node) {\n            LogSystem.warn(`offClick参数node不能为空：${node}`);\n            return;\n        }\n        let tempNode: cc.Node = null;\n        if (typeof node === \"string\") {\n            tempNode = this.getNode(node);\n        } else {\n            tempNode = node;\n        }\n        tempNode.off(cc.Node.EventType.TOUCH_START);\n    }\n\n    preloadClickEffect() {\n        ResLoader.loadRes(this._clickSound, cc.AudioClip, () => { }, this._bundleName);\n    }\n\n}\n","export default class UrlUtils {\n    /**\n     * 获取当前url页面后面的参数\n     * @param key:要获取参数键值\n     * @return 返回获取对应键的值，如果没有获取到键就返回一个''空字符串\n     */\n    static getQueryString(key: string): string {\n        let reg = new RegExp(key + '=([^&]*)(?:&)?');\n        let rs = window.location.search.substr(1).match(reg);\n        if (rs != null) return rs[1];\n        return null;\n    }\n\n    /**\n     * 获取json中的url\n     * @param {*} jsonObj\n     * @param {string[]} type\n     * @returns {string[]}\n     * @memberof UrlUtils\n     */\n    static getUrlArrayByFileType(jsonObj, type: string): string[] {\n        console.log(`getUrlArrayByFileType`)\n        if (!jsonObj) {\n            console.log('jsonObj is null , please check your json!!!')\n            return\n        }\n        let urls: string[] = []\n        let len = type.length\n        function traverseJson(obj) {\n            for (let o in obj) {\n                if (typeof (obj[o]) === 'object') {\n                    traverseJson(obj[o])\n                } else if (typeof (obj[o]) === 'string') {\n                    if (obj[o].slice(-len, obj[o].length) === type) {\n                        urls.push(obj[o])\n                    }\n                }\n            }\n        }\n        traverseJson(jsonObj)\n        if (urls.length > 1) {/** 去重 */\n            let list = [urls[0]]\n            urls.sort()\n            for (let i = 0; i < urls.length; i++) {\n                if (urls[i] !== list[list.length - 1]) {\n                    list.push(urls[i])\n                }\n            }\n            return list\n        }\n        return urls\n    }\n\n    static parseUrl(url: string): any {\n        let m = url.match(/^(([^:\\/?#]+:)?(?:\\/\\/((?:([^\\/?#:]*):([^\\/?#:]*)@)?([^\\/?#:]*)(?::([^\\/?#:]*))?)))?([^?#]*)(\\?[^#]*)?(#.*)?$/),\n            r = {\n                hash: m[10] || \"\",                   // #asd\n                host: m[3] || \"\",                    // localhost:257\n                hostname: m[6] || \"\",                // localhost\n                href: m[0] || \"\",                    // http://username:password@localhost:257/deploy/?asd=asd#asd\n                origin: m[1] || \"\",                  // http://username:password@localhost:257\n                pathname: m[8] || (m[1] ? \"/\" : \"\"), // /deploy/\n                port: m[7] || \"\",                    // 257\n                protocol: m[2] || \"\",                // http:\n                search: m[9] || \"\",                  // ?asd=asd\n                username: m[4] || \"\",                // username\n                password: m[5] || \"\"                 // password\n            };\n        if (r.protocol.length == 2) {\n            r.protocol = \"file:///\" + r.protocol.toUpperCase();\n            r.origin = r.protocol + \"//\" + r.host;\n        }\n        r.href = r.origin + r.pathname + r.search + r.hash;\n        return m && r;\n    }\n    // parseUrl(\"http://username:password@localhost:257/deploy/?asd=asd#asd\");\n\n    static getUrlPathName(url: string): string {\n        let ret: any = this.parseUrl(url);\n        if (ret && ret.pathname) {\n            return ret.pathname;\n        }\n        return \"\"\n    }\n\n}","import IPlatform from \"./IPlatform\";\n\nexport default class WebAdapter implements IPlatform {\n    public packageName: string = '';\n    public isPrintLog: boolean = true;\n    public onGameExit(): void {\n        // console.log(`onGameExit`)\n    }\n    public onGameReady(): void {\n        // console.log('onGameReady')\n        // GameInfo.instance.hasCalledOnGameReady = true;\n    }\n    public toast(message: string): void {\n        // console.error(message);\n    }\n\n    callFunction(funcName: string, parm: string): void {\n        throw new Error(\"Method not implemented.\");\n    }\n    callFunctionResult(funcName: string, parm: string, moduleName: string) {\n        return {};\n    }\n}\n","import ResLoader from \"../framework/load/ResLoader\";\nimport { kit } from \"../kit\";\nimport LogSystem from \"../system/log/LogSystem\";\n\n/** 音频类型枚举 */\nexport enum MusicType {\n    SOUND,  // 音效\n    MUSIC,  // 音乐\n    LOOP_SOUND     // 循环音效\n}\n\n/** 音频工具类 */\nexport default class AudioUtil {\n    /** 背景音乐缓存池 */\n    private static _musicPool: Map<string, __AudioSource> = new Map<string, __AudioSource>();\n    /** 音效缓存池 */\n    private static _soundPool: Map<string, __AudioSource[]> = new Map<string, __AudioSource[]>();\n    /** 循环音效 */\n    private static _loopSoundPool: Map<string, __AudioSource> = new Map<string, __AudioSource>();\n    /** 当前背景音乐 */\n    private static _curMusic: __AudioSource;\n    /** 当前音效 */\n    private static _curSound: string = \"\";\n    /** 上次播放音效时间 */\n    private static _lastSoundTime: number = 0;\n    /** 是否暂停所有音效 */\n    private static _pauseFlag: boolean = false;\n    /** 当前音频状态级别，数字越大越高 配合_pauseFlag判断 */\n    private static _level: number = 0;\n\n    private static getFixedPath(bundleName: string | cc.AssetManager.Bundle, path: string) {\n        let cachePath = '';\n        if (bundleName instanceof cc.AssetManager.Bundle) {\n            cachePath = bundleName.name\n        } else {\n            cachePath = bundleName\n        }\n        return `${cachePath}/${path}`\n    }\n    /**\n     * 播放音效\n     * @param {string} path 音效资源\n     */\n    public static playEffect(bundleName: string | cc.AssetManager.Bundle, path: string, finishCb?: () => void): void {\n        if (AudioUtil._pauseFlag) { return; }\n        let curTime = new Date().getTime();\n        if (path === AudioUtil._curSound) {\n            let tempTime = curTime - AudioUtil._lastSoundTime;\n            if (tempTime < 50) {\n                return;\n            }\n        }\n        AudioUtil._curSound = path;\n        AudioUtil._lastSoundTime = curTime;\n        let fixedPath = AudioUtil.getFixedPath(bundleName, path);\n        let source = AudioUtil.getEffectFromPool(fixedPath);\n        if (source) {\n            source.play(false, finishCb);\n        } else {\n            source = new __AudioSource(bundleName, path, MusicType.SOUND);\n            AudioUtil.addEffectToPool(fixedPath, source);\n            source.play(false, finishCb);\n        }\n    }\n\n    /** 暂停音效 */\n    public static stopEffect(): void {\n        AudioUtil._soundPool.forEach((value: __AudioSource[], key: string, map) => {\n            if (value) {\n                for (let source of value) {\n                    source.stop();\n                }\n            }\n        });\n    }\n\n    /** 播放循环音效 */\n    public static playLoopEffect(bundleName: string | cc.AssetManager.Bundle, path: string): void {\n        if (AudioUtil._pauseFlag) { return; }\n        let fixedPath = AudioUtil.getFixedPath(bundleName, path); \n        let source = AudioUtil._loopSoundPool.get(fixedPath);\n        if (!source) {\n            source = new __AudioSource(bundleName, path, MusicType.LOOP_SOUND);\n            AudioUtil._loopSoundPool.set(fixedPath, source);\n        }\n        source.play(true);\n    }\n\n    /** 暂停循环音效 */\n    public static stopLoopEffect(bundleName: string | cc.AssetManager.Bundle, path: string): void {\n        let fixedPath = AudioUtil.getFixedPath(bundleName, path); \n        let source = AudioUtil._loopSoundPool.get(fixedPath);\n        if (source) {\n            source.stop()\n        }\n    }\n\n    /**\n     * 播放音效\n     * @param {string} path 播放背景音乐\n     */\n    public static playMusic(bundleName: string | cc.AssetManager.Bundle, path: string): void {\n        if (AudioUtil._pauseFlag) { return; }\n        if (AudioUtil._curMusic) {\n            AudioUtil._curMusic.stop();\n        }\n        let fixedPath = AudioUtil.getFixedPath(bundleName, path);\n        let source = AudioUtil._musicPool.get(fixedPath);\n        if (source) {\n            source.play(true);\n        } else {\n            source = new __AudioSource(bundleName, path, MusicType.MUSIC);\n            AudioUtil._musicPool.set(fixedPath, source);\n            source.play(true);\n        }\n        AudioUtil._curMusic = source;\n    }\n\n    /** 暂停音效 */\n    public static stopMusic(): void {\n        if (AudioUtil._curMusic) {\n            AudioUtil._curMusic.stop();\n        }\n    }\n\n    public static passMusic(): void {\n        if (AudioUtil._curMusic) {\n            AudioUtil._curMusic.pause();\n        }\n    }\n\n    public static resumeMusic(): void {\n        if (AudioUtil._curMusic) {\n            AudioUtil._curMusic.resume();\n        }\n    }\n\n    /** 从音效对象池获取对象 */\n    public static getEffectFromPool(path: string): __AudioSource {\n        let list = AudioUtil._soundPool.get(path);\n        if (list) {\n            for (let source of list) {\n                if (!source.isPlaying()) {\n                    return source;\n                }\n            }\n        }\n        return null;\n    }\n\n    /** 像音效对象池添加对象 */\n    public static addEffectToPool(path: string, source: __AudioSource): void {\n        let list = AudioUtil._soundPool.get(path);\n        if (list) {\n            list.push(source);\n        } else {\n            list = [];\n            list.push(source);\n            AudioUtil._soundPool.set(path, list);\n        }\n    }\n\n    /**\n     * 设置暂停所有音效标志\n     * @param {boolean} flag 标志 true-暂停  false-恢复\n     * @param {number} level 设置状态级别，数字越大级别越高，高级别逻辑覆盖低级别，低级别不能覆盖高级别。\n     */\n    public static setPauseFlag(flag: boolean, level: number = 0): void {\n        AudioUtil._level = level;\n        AudioUtil._pauseFlag = flag;\n        if (flag) {\n            if (AudioUtil._curMusic) { AudioUtil._curMusic.pause(); }\n            AudioUtil.pauseLoopEffects();\n        } else {\n            if (AudioUtil._curMusic) { AudioUtil._curMusic.resume(); }\n            AudioUtil.resumeLoopEffects();\n        }\n    }\n\n    /** 暂停所有循环音效 */\n    public static pauseLoopEffects(): void {\n        AudioUtil._loopSoundPool.forEach((v: __AudioSource, key: string) => {\n            v.pause();\n        });\n    }\n\n    /** 恢复所有循环音效 */\n    public static resumeLoopEffects(): void {\n        AudioUtil._loopSoundPool.forEach((v: __AudioSource, key: string) => {\n            v.resume();\n        });\n    }\n\n    public static stopEffectByName(path: string) {\n        let list = AudioUtil._soundPool.get(path)\n        if (list) {\n            list.forEach((value) => {\n                value.stop()\n            })\n        }\n    }\n\n    /**\n     * 新版播放音效\n     * @param bundleName \n     * @param path \n     * @param isSingle 是否唯一\n     * @param isLoop 是否循环\n     * @returns \n     */\n    static async playEffectByName(bundleName: string | cc.AssetManager.Bundle, path: string, isSingle: boolean = true, isLoop: boolean = false) {\n        return new Promise<void>(resolve => {\n            if (AudioUtil._pauseFlag) {\n                resolve()\n                return\n            }\n\n            let curTime = new Date().getTime()\n            if (path === AudioUtil._curSound) {\n                let tempTime = curTime - AudioUtil._lastSoundTime\n                if (tempTime < 50) {\n                    resolve()\n                    return\n                }\n            }\n\n            let fixedPath = AudioUtil.getFixedPath(bundleName, path)\n\n            if (isSingle) {\n                AudioUtil.stopEffectByName(fixedPath)\n            }\n\n            AudioUtil._curSound = path;\n            AudioUtil._lastSoundTime = curTime;\n            \n            let source = null\n            if (isLoop) {\n                source = AudioUtil._loopSoundPool.get(fixedPath)\n            } else {\n                source = AudioUtil.getEffectFromPool(fixedPath)\n            }\n\n            if (source) {\n                source.play(isLoop, () => {\n                    resolve()\n                })\n            } else {\n                source = new __AudioSource(bundleName, path, MusicType.SOUND)\n                if (isLoop) {\n                    AudioUtil._loopSoundPool.set(fixedPath, source)\n                } else {\n                    AudioUtil.addEffectToPool(fixedPath, source)\n                }\n                source.play(isLoop, () => {\n                    resolve()\n                })\n            }\n        })\n    }\n\n    static destroyAudio(bundleName: string, path: string) {\n        let fixedPath = AudioUtil.getFixedPath(bundleName, path)\n        if (AudioUtil._soundPool.has(fixedPath)) {\n            AudioUtil.stopEffectByName(fixedPath)\n            let list = AudioUtil._soundPool.get(fixedPath)\n            list.forEach((element) => {\n                element.destroy()\n            })\n            AudioUtil._soundPool.delete(fixedPath)\n        }\n        if (AudioUtil._musicPool.has(fixedPath)) {\n            AudioUtil.stopMusic()\n            let clip = AudioUtil._musicPool.get(fixedPath)\n            clip.destroy()\n            AudioUtil._musicPool.delete(fixedPath)\n        }\n        if (AudioUtil._loopSoundPool.has(fixedPath)) {\n            AudioUtil.stopLoopEffect(bundleName, path)\n            let clip = AudioUtil._loopSoundPool.get(fixedPath)\n            clip.destroy()\n            AudioUtil._loopSoundPool.delete(fixedPath)\n        }\n    }\n}\n\nclass __AudioSource {\n    // 是否加载完成\n    private _loaded: boolean = false;\n    // 音频资源\n    private _audioSource: cc.AudioClip = null;\n    // bundle名称\n    private _bundleName: string | cc.AssetManager.Bundle;\n    // 音频路径\n    private _path: string = \"\";\n    // 音频类型\n    private _musicType: MusicType;\n    // 是否已被暂停\n    private _isStop: boolean;\n\n    private state = {} as any\n\n    public constructor(bundleName: string | cc.AssetManager.Bundle, path: string, type: MusicType) {\n        this._bundleName = bundleName;\n        this._path = path;\n        this._musicType = type;\n    }\n\n    /**\n     * 音频加载接口\n     * @param {() => void} cb 加载完成回调\n     */\n    private loadRes(cb: () => void): void {\n        if (!this._loaded) {\n            ResLoader.loadRes(this._path, cc.AudioClip, (err: any, res: cc.AudioClip) => {\n                if (err) {\n                    LogSystem.warn(`音频资源加载出错:${this._path}`);\n                } else {\n                    this._audioSource = res;\n                    this._loaded = true;\n                    if (cb) { cb(); }\n                }\n            }, this._bundleName);\n        }\n    }\n\n    public play(isLoop?: boolean, cb?: () => void): void {\n        this._isStop = false;\n        if (this._loaded) {\n            this.stop();\n            // this._audioSource.loop = isLoop;\n            // this._audioSource.play();\n            if (!isLoop) {\n                isLoop = false\n            }\n            this.state.isLoop = isLoop;\n            this.state.isPlaying = true;\n            if (this._musicType == MusicType.MUSIC) {\n                this.state.id = cc.audioEngine.playMusic(this._audioSource, isLoop);\n            } else {\n                this.state.id = cc.audioEngine.playEffect(this._audioSource, isLoop);\n            }\n            if (cb) {\n                let duration = this._audioSource.duration;\n                kit.system.timer.doOnce(duration * 1000, () => {\n                    cb();\n                }, this, null, false)\n            }\n        } else {\n            this.loadRes(() => {\n                if (!this._isStop) {\n                    this.play(isLoop, cb);\n                }\n            });\n        }\n    }\n\n    async playEffect(isLoop?: boolean) {\n        return new Promise<void>(resolve => {\n            this.play(isLoop, () => {\n                resolve()\n            })\n        })\n    }\n\n    public isPlaying(): boolean {\n        return this.state.isPlaying;\n    }\n\n    public stop(): void {\n        this._isStop = true;\n        if (this._loaded) {\n            // this._audioSource.stop();\n            if (this.state.id != null && this.state.id != undefined) {\n                if (this._musicType == MusicType.MUSIC) {\n                    cc.audioEngine.stopMusic();\n                } else {\n                    cc.audioEngine.stopEffect(this.state.id);\n                }\n            }\n        }\n    }\n\n    public pause(): void {\n        if (this._loaded) {\n            // this._audioSource.pause();\n            if (this.state.id) {\n                if (this._musicType == MusicType.MUSIC) {\n                    cc.audioEngine.pauseMusic();\n                } else {\n                    cc.audioEngine.pauseEffect(this.state.id);\n                }\n            }\n        }\n    }\n\n    public resume(): void {\n        if (this._loaded) {\n            // this._audioSource.resume();\n            if (this.state.id) {\n                if (this._musicType == MusicType.MUSIC) {\n                    cc.audioEngine.resumeMusic();\n                } else {\n                    cc.audioEngine.resumeEffect(this.state.id);\n                }\n            }\n        }\n    }\n\n    public destroy(): void {\n        this.stop();\n        if (this._audioSource) {\n            // console.log('release audio:' + this._audioSource.name)\n            cc.assetManager.releaseAsset(this._audioSource)\n            this._audioSource.destroy()\n            this._audioSource = null;\n        }\n    }\n}","import { kit } from \"../kit\";\n\n/**\n * 加载bundle\n * @param bundleName\n * @returns\n */\nexport function loadBundle(bundleName: string): Promise<any> {\n    return new Promise((res, rej) => {\n        console.time(bundleName);\n        cc.assetManager.loadBundle(bundleName, (error: Error, bundle: cc.AssetManager.Bundle) => {\n            console.timeEnd(bundleName);\n            if (error) {\n                rej(error);\n                return;\n            }\n            res(bundle);\n        })\n    })\n    kit.manager.resources.loadRes\n}\n\n/**\n * 加载bundle,并返回其中的scene\n * @param bundleName\n * @param sceneName\n * @returns scene\n */\nexport function loadBundleScene(bundleName: string, sceneName: string): Promise<any> {\n    return new Promise((res, rej) => {\n        loadBundle(bundleName).then(bundle => {\n            bundle.loadScene(sceneName, (error: Error, scene: any) => {\n                if (error) {\n                    rej(error);\n                    return;\n                }\n                res(scene)\n            })\n        }).catch(error => {\n            rej(error);\n        })\n    })\n}\n\n/**\n * 加载bundle\n * @param nameList \n * @returns bundle列表\n */\nexport function loadBundles(nameList: string[]): Promise<any> {\n    let list: Promise<any>[] = [];\n    for (let key in nameList) {\n        list.push(\n            loadBundle(nameList[key])\n        )\n    }\n    return Promise.all(list);\n}","export default class BundleUtil {\n    /**\n     * 加载bundle\n     * @param bundleName\n     * @returns\n     */\n    public static loadBundle(bundleName: string): Promise<any> {\n        return new Promise((res, rej) => {\n            // tslint:disable-next-line: no-console\n            console.time(bundleName);\n            cc.assetManager.loadBundle(bundleName, (error: Error, bundle: cc.AssetManager.Bundle) => {\n                // tslint:disable-next-line: no-console\n                console.timeEnd(bundleName);\n                if (error) {\n                    rej(error);\n                    return;\n                }\n                res(bundle);\n            })\n        })\n    }\n\n    /**\n     * 加载bundle,并返回其中的scene\n     * @param bundleName\n     * @param sceneName\n     * @returns scene\n     */\n    public static loadBundleScene(bundleName: string, sceneName: string): Promise<any> {\n        return new Promise((res, rej) => {\n            BundleUtil.loadBundle(bundleName).then(bundle => {\n                bundle.loadScene(sceneName, (error: Error, scene: any) => {\n                    if (error) {\n                        rej(error);\n                        return;\n                    }\n                    res(scene)\n                })\n            }).catch(error => {\n                rej(error);\n            })\n        })\n    }\n\n    /**\n     * 加载bundle\n     * @param nameList\n     * @returns bundle列表\n     */\n    public static loadBundles(nameList: string[]): Promise<any> {\n        let list: Promise<any>[] = [];\n        for (let key in nameList) {\n            list.push(\n                BundleUtil.loadBundle(nameList[key])\n            )\n        }\n        return Promise.all(list);\n    }\n}\n","/**\n * 生命周期-创建完毕\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_CREATED代替\n */\nexport const LIFE_CYCLE_CREATED: string = \"lifeCycleCreated\";\n/**\n * 生命周期-就绪\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_READY\n */\nexport const LIFE_CYCLE_READY: string = \"lifeCycleReady\";\n/**\n * 生命周期-完成\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_COMPLETE\n */\nexport const LIFE_CYCLE_COMPLETE: string = \"lifeCycleComplete\";\n/**\n * 生命周期-阻塞事件\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_BLOCK\n */\nexport const LIFE_CYCLE_BLOCK: string = \"lifeCycleBlock\";\n/**\n * 生命周期-取消阻塞事件\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_UNBLOCK\n */\nexport const LIFE_CYCLE_UNBLOCK: string = \"lifeCycleUnblock\";\n/**\n * 生命周期-给子模块传参\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_PARAMS\n */\nexport const LIFE_CYCLE_PARAMS: string = \"lifeCycleParams\";\n/**\n * 生命周期-返回(不弹出确认框直接退出，用于有失败概念的游戏使用)\n * @deprecated 废弃，推荐使用Events.LIFE_CYCLE_BACK\n */\nexport const LIFE_CYCLE_BACK: string = \"lifeCycleBack\";\n/**\n * 跟读模块-子游戏TO跟读模块事件\n * @deprecated 废弃，推荐使用Events.FOLLOW_CLIENT_TO_MODULE\n */\nexport const FOLLOW_CLIENT_TO_MODULE: string = 'followClientToModule';\n/**\n * 跟读模块-子游戏TO跟读模块事件\n * @deprecated 废弃，推荐使用Events.FOLLOW_MODULE_TO_CLIENT\n */\nexport const FOLLOW_MODULE_TO_CLIENT: string = 'followModuleToClient';\n/**\n * 视频 框架-子游戏\n * @deprecated 废弃，推荐使用Events.VIDEO_CLIENT_TO_MODULE\n */\nexport const VIDEO_CLIENT_TO_MODULE: string = 'voidClient2Module';\n/**\n *  视频 子游戏-框架\n * @deprecated 废弃，推荐使用Events.VIDEO_MODULE_TO_CLIENT\n */\nexport const VIDEO_MODULE_TO_CLIENT: string = 'voidModule2Client';\n/**\n * 控制容器顶部按钮 (用于有自身有二级返回的游戏使用)\n * @deprecated 废弃，推荐使用Events.SET_TOP_BAR_ACTIVE\n */\nexport const SET_TOP_BAR_ACTIVE: string = \"setTopBarActive\";\n\n\nexport default class Events {\n    // 生命周期-创建完毕\n    public static readonly LIFE_CYCLE_CREATED: string = \"lifeCycleCreated\";\n    // 生命周期-就绪\n    public static readonly LIFE_CYCLE_READY: string = \"lifeCycleReady\";\n    // 生命周期-完成\n    public static readonly LIFE_CYCLE_COMPLETE: string = \"lifeCycleComplete\";\n    // 生命周期-阻塞事件\n    public static readonly LIFE_CYCLE_BLOCK: string = \"lifeCycleBlock\";\n    // 生命周期-取消阻塞事件\n    public static readonly LIFE_CYCLE_UNBLOCK: string = \"lifeCycleUnblock\";\n    // 给子模块传参\n    public static readonly LIFE_CYCLE_PARAMS: string = \"lifeCycleParams\";\n    // 生命周期-返回(不弹出确认框直接退出，用于有失败概念的游戏使用)\n    public static readonly LIFE_CYCLE_BACK: string = \"lifeCycleBack\";\n\n    // 跟读模块-子游戏TO跟读模块事件\n    public static readonly FOLLOW_CLIENT_TO_MODULE: string = 'followClientToModule';\n    // 跟读模块-子游戏TO跟读模块事件\n    public static readonly FOLLOW_MODULE_TO_CLIENT: string = 'followModuleToClient';\n\n    // 视频 框架-子游戏\n    public static readonly VIDEO_CLIENT_TO_MODULE: string = 'voidClient2Module';\n    // 视频 子游戏-框架(暂停、播放、卡顿、拖拽进度等) 枚举参考：VideoEventTransType\n    public static readonly VIDEO_MODULE_TO_CLIENT: string = 'voidModule2Client';\n\n    // 控制容器顶部按钮 (用于有自身有二级返回的游戏使用)\n    public static readonly SET_TOP_BAR_ACTIVE: string = \"setTopBarActive\";\n\n    // 展示通用弹窗\n    public static readonly SHOW_COMMON_TIPS_POP: string = \"showCommonTipsPop\";\n}","// \nexport const enum BOX_SPINE{\n\n}\n\nexport const enum PLAYER_SPINE{\n    \n}\n\nexport const enum MONSTER_SPINE{\n    \n}\n\nexport const enum HIT_MONSTER_MUSIC{\n    \n}","\nconst {ccclass, property} = cc._decorator;\n@ccclass\nexport default class hitMonsterMain extends cc.Component {\n\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    @property\n    text: string = 'hello';\n\n\n    onLoad () {\n        \n    }\n\n\n    start () {\n\n    }\n\n    onDestroy(){\n\n    }\n}\n","import ClickCmpt from \"./component/ClickCmpt\";\nimport Events from \"./events/events\";\nimport ResLoader from \"./framework/load/ResLoader\";\nimport PlatformSystem from \"./framework/platform/PlatformSystem\";\nimport PopupManager from \"./manager/popupManager.ts/PopupManager\";\nimport ResourcesManager, { ResourceType } from \"./manager/ResourcesManager\";\nimport { VideoEventTransType } from \"./structure/ClientModuleEnum\";\nimport { VideoClient2Module, VideoModule2Client } from \"./structure/ClientModuleInterface\";\nimport LinkedList from \"./structure/LinkedNode\";\nimport AudioManager from \"./system/audio/AudioManager\";\nimport ErrorSystem from \"./system/error/ErrorSystem\";\nimport EventSystem from \"./system/event/EventSystem\";\nimport IEntity from \"./system/fsm/entity/IEntity\";\nimport Telegram from \"./system/fsm/message/Telegram\";\nimport IState from \"./system/fsm/state/IState\";\nimport StateMachine from \"./system/fsm/StateMachine\";\nimport LogSystem from \"./system/log/LogSystem\";\nimport HttpSystem from \"./system/net/http/HttpSystem\";\nimport TimerSystem from \"./system/timer/TimerSystem\";\nimport { LocalStorageUtils } from \"./utils/LocalStorageUtils\";\nimport { TimeUtils } from \"./utils/TimeUtils\";\nimport UIUtils, { UIContainer } from \"./utils/UIUtils\";\nimport ModelManager from \"./model/ModelManager\";\nimport ModelBase from \"./model/ModelBase\";\nimport { MessageBase } from \"./model/MessageBase\";\nimport NativeInfo, { NetworkType } from \"./model/NativeInfo\";\nimport SpotSystem from \"./system/log/SpotSystem\";\nimport { TIPS_TYPE } from \"./structure/ClientTipsEnum\";\n\n/**\n * cocos-kit\n * ```\n * 版本1：统一命名空间，兼容老版本\n * 版本2：可动态替换kit，大厅可以本地调试子bundle项目\n * ```\n */\nexport namespace kit {\n    export namespace util {\n        export const Time = TimeUtils;\n        export const Ui = UIUtils;\n        export const UiContainer = UIContainer;\n        export const LocalStorage = LocalStorageUtils;\n    }\n    export namespace system {\n        export const log: LogSystem = LogSystem.instance;\n        export const error: ErrorSystem = ErrorSystem.instance;\n        export const timer: TimerSystem = TimerSystem.instance;\n        export const platform: PlatformSystem = PlatformSystem.instance;\n        export const spot: SpotSystem = SpotSystem.instance;\n    }\n    export namespace manager {\n        export const resources: ResourcesManager = ResourcesManager.instance;\n        export namespace Resources {\n            export const Type = ResourceType;\n        }\n        export const Audio = AudioManager;\n        export const Event = EventSystem;\n        export const Http = HttpSystem;\n        export const Popup = PopupManager;\n    }\n\n    export namespace consts {\n        export const Event = Events;\n    }\n\n    export namespace structure {\n        export const LinkList = LinkedList;\n        export namespace Tips {\n            export const Type = TIPS_TYPE;\n        }\n\n    }\n\n    export namespace video {\n        export const videoTransType = VideoEventTransType;\n        export interface Module2Client extends VideoModule2Client { };\n        export interface Client2Module extends VideoClient2Module { };\n    }\n\n    export namespace component {\n        export const Click = ClickCmpt;\n    }\n\n    export class Loader extends ResLoader { };\n\n    export namespace fsm {\n        export interface Entity extends IEntity { };\n        export interface State<T extends Entity> extends IState<T> { };\n        export const StateManager = StateMachine;\n        export interface Telegrams extends Telegram{ };\n    }\n\n    export namespace model {\n        export const modelManager: ModelManager = ModelManager.instance;\n        export class modelBase extends ModelBase { }\n        export class messageBase extends MessageBase { }\n        export class nativeInfo extends NativeInfo { }\n        export namespace netWork {\n            export const networkType = NetworkType;\n        }\n    }\n}","export * from \"./DefaultLoader\";\r\nexport * from \"./ImageLoader\";\r\nexport * from \"./JsonLoader\";\r\nexport * from \"./AudioLoader\";\r\nexport * from \"./AtlasLoader\";\r\nexport * from \"./TextLoader\";\r\nexport * from \"./PrefabLoader\";\r\nexport * from \"./SpineLoader\";","import { LIFE_CYCLE_PARAMS } from \"../kit/events/events\";\nimport PlatformSystem from \"../kit/framework/platform/PlatformSystem\";\nimport AudioManager from \"../kit/system/audio/AudioManager\";\nimport EventSystem from \"../kit/system/event/EventSystem\";\nimport TimerSystem from \"../kit/system/timer/TimerSystem\";\nimport { loadBundles } from \"../kit/utils/bundleUtils\";\n\nconst { ccclass, property } = cc._decorator;\n\nconst cdn_root = 'https://math-thinking.oss-cn-beijing.aliyuncs.com/qt/tools/book/baobaov1'\nconst book_id = 'ee520b9c-7e63-4b5b-b4c5-e6da6b2edc01'\nconst CONFIG = { id: 1, main: 'book_player_en', assets: [\n    // 'https://shi-xintao.github.io/bundleTest/EduRemark',\n    `${cdn_root}/internal-ice`,\n    `${cdn_root}/resources-ice`,\n    `${cdn_root}/main-ice`,\n    `${cdn_root}/${book_id}`,\n    'common', \n    'book_player_en', \n], params: {bundle:`${cdn_root}/${book_id}`,} }\n// const CONFIG = { id: 1, main: 'guaguale', assets: ['common','guaguale'], params: { url: \"\" } }\n@ccclass\nexport default class main extends cc.Component {\n\n    @property(cc.Node)\n    contentNode: cc.Node = null;\n\n    private lessonNode: cc.Node = null;\n\n    onLoad() {\n        this.relayout()\n        cc.debug.setDisplayStats(false);\n        PlatformSystem.instance.init();\n        TimerSystem.instance.init();\n        AudioManager.init();\n\n        this.loadLocalProject();\n    }\n\n    private lock = false\n \n    public relayout() {\n        if (this.lock) {\n            return\n        }\n        this.lock = true\n        // 根据屏幕物理形状动态设置设计尺寸\n        let frameSize = cc.view.getFrameSize() // 屏幕尺寸\n        let designResolution = cc.Canvas.instance.designResolution\n        let designSize = cc.size(designResolution.width, designResolution.height)\n        cc.log(\"canvas designSize:\", designSize)\n        let frameAspectRatio = frameSize.width / frameSize.height\n        let designAspectRatio = designSize.width / designSize.height\n        let screenSize = { ...designSize } as cc.Size\n \n        if (frameAspectRatio < designAspectRatio) {\n            screenSize.height = Math.ceil(designSize.width / frameAspectRatio)\n        } else {\n            screenSize.width = Math.ceil(designSize.height * frameAspectRatio)\n        }\n        // 设置实际的设计尺寸(更改canvas的形状)\n        cc.Canvas.instance.designResolution = screenSize\n \n        this.lock = false\n    }\n\n    // 加载课程bundle\n    private loadLocalProject(): void {\n        let list: string[] = []\n        CONFIG.assets.forEach((url: string) => {\n            list.push(`${url}`)\n        });\n        console.log(\"list: \", list);\n\n        let bundle: cc.AssetManager.Bundle = null\n        loadBundles(list).then((res: cc.AssetManager.Bundle[]) => {\n            bundle = res.find((element: cc.AssetManager.Bundle) => {\n                return element.name === CONFIG.main\n            })\n            // 加载\n            bundle.load(`${CONFIG.main}`, cc.Prefab, (error: Error, prefab: cc.Prefab) => {\n                if (error) {\n                    cc.error(error);\n                    return;\n                }\n                this.lessonNode = cc.instantiate(prefab);\n                let comp = this.lessonNode.getComponent(\"BaseChapterComponent\");\n                comp && comp.initParams(CONFIG.params);\n                this.contentNode.addChild(this.lessonNode);\n\n                //后面回废弃\n                TimerSystem.instance.doFrameOnce(1, () => {\n                    EventSystem.emit(LIFE_CYCLE_PARAMS, CONFIG.params);\n                });\n            })\n\n        }).catch((error) => {\n            cc.error(error)\n        })\n    }\n}\n"],"file":"index.js"}